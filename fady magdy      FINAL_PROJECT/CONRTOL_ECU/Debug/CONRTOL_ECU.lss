
CONRTOL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002a02  00002a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  00002aa8  2**0
                  ALLOC
  3 .stab         00002bbc  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001351  00000000  00000000  00005664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000069b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000088ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a548  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 95 12 	jmp	0x252a	; 0x252a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 12 	call	0x2514	; 0x2514 <main>
      8a:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <start>:

Timer1_Configtype timerConfig = {COMPARE,0,7813,Prescale_1024};
UART_ConfigType uartConfig = {Asynchronous,Even,one};

void start(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c0 58       	subi	r28, 0x80	; 128
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24

	uint8 password[5] , confirmPassword[5] , passwordVerified , command;

	Buzzer_init();
     b6e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <Buzzer_init>
	DcMotor_Init();
     b72:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <DcMotor_Init>
	Timer1_setCallBack(timerHandler);
     b76:	8d e0       	ldi	r24, 0x0D	; 13
     b78:	9c e0       	ldi	r25, 0x0C	; 12
     b7a:	0e 94 85 13 	call	0x270a	; 0x270a <Timer1_setCallBack>
	UART_init(&uartConfig);
     b7e:	8e e6       	ldi	r24, 0x6E	; 110
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 b3 13 	call	0x2766	; 0x2766 <UART_init>
	EEPROM_init();
     b86:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <EEPROM_init>
     b8a:	d1 c0       	rjmp	.+418    	; 0xd2e <start+0x1e8>


	while(passwordVerified == 0)
	{
		receivePassword(password);
     b8c:	ce 01       	movw	r24, r28
     b8e:	8d 58       	subi	r24, 0x8D	; 141
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>

		receivePassword(confirmPassword);
     b96:	ce 01       	movw	r24, r28
     b98:	88 58       	subi	r24, 0x88	; 136
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>

		passwordVerified = verifyPassword(password, confirmPassword);
     ba0:	ce 01       	movw	r24, r28
     ba2:	8d 58       	subi	r24, 0x8D	; 141
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	9e 01       	movw	r18, r28
     ba8:	28 58       	subi	r18, 0x88	; 136
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	b9 01       	movw	r22, r18
     bae:	0e 94 9e 0b 	call	0x173c	; 0x173c <verifyPassword>
     bb2:	fe 01       	movw	r30, r28
     bb4:	ee 58       	subi	r30, 0x8E	; 142
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 83       	st	Z, r24
		UART_sendByte(passwordVerified);
     bba:	fe 01       	movw	r30, r28
     bbc:	ee 58       	subi	r30, 0x8E	; 142
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
     bc6:	fe 01       	movw	r30, r28
     bc8:	e3 59       	subi	r30, 0x93	; 147
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a2 e0       	ldi	r26, 0x02	; 2
     bd2:	b3 e4       	ldi	r27, 0x43	; 67
     bd4:	80 83       	st	Z, r24
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	a2 83       	std	Z+2, r26	; 0x02
     bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	8e 01       	movw	r16, r28
     bde:	07 59       	subi	r16, 0x97	; 151
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	fe 01       	movw	r30, r28
     be4:	e3 59       	subi	r30, 0x93	; 147
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a ef       	ldi	r20, 0xFA	; 250
     bf6:	54 e4       	ldi	r21, 0x44	; 68
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0a:	fe 01       	movw	r30, r28
     c0c:	e7 59       	subi	r30, 0x97	; 151
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	44 f4       	brge	.+16     	; 0xc38 <start+0xf2>
		__ticks = 1;
     c28:	fe 01       	movw	r30, r28
     c2a:	e9 59       	subi	r30, 0x99	; 153
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	64 c0       	rjmp	.+200    	; 0xd00 <start+0x1ba>
	else if (__tmp > 65535)
     c38:	fe 01       	movw	r30, r28
     c3a:	e7 59       	subi	r30, 0x97	; 151
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	0c f0       	brlt	.+2      	; 0xc58 <start+0x112>
     c56:	43 c0       	rjmp	.+134    	; 0xcde <start+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	fe 01       	movw	r30, r28
     c5a:	e3 59       	subi	r30, 0x93	; 147
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8e 01       	movw	r16, r28
     c78:	09 59       	subi	r16, 0x99	; 153
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <start+0x188>
     c90:	fe 01       	movw	r30, r28
     c92:	eb 59       	subi	r30, 0x9B	; 155
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	88 ec       	ldi	r24, 0xC8	; 200
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	fe 01       	movw	r30, r28
     ca0:	eb 59       	subi	r30, 0x9B	; 155
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <start+0x162>
     cac:	fe 01       	movw	r30, r28
     cae:	eb 59       	subi	r30, 0x9B	; 155
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	de 01       	movw	r26, r28
     cb8:	a9 59       	subi	r26, 0x99	; 153
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e9 59       	subi	r30, 0x99	; 153
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	fe 01       	movw	r30, r28
     cd0:	e9 59       	subi	r30, 0x99	; 153
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	d1 f6       	brne	.-76     	; 0xc90 <start+0x14a>
     cdc:	28 c0       	rjmp	.+80     	; 0xd2e <start+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	8e 01       	movw	r16, r28
     ce0:	09 59       	subi	r16, 0x99	; 153
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	fe 01       	movw	r30, r28
     ce6:	e7 59       	subi	r30, 0x97	; 151
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
     d00:	de 01       	movw	r26, r28
     d02:	ad 59       	subi	r26, 0x9D	; 157
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e9 59       	subi	r30, 0x99	; 153
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	8e 93       	st	-X, r24
     d16:	fe 01       	movw	r30, r28
     d18:	ed 59       	subi	r30, 0x9D	; 157
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <start+0x1da>
     d24:	fe 01       	movw	r30, r28
     d26:	ed 59       	subi	r30, 0x9D	; 157
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
	Timer1_setCallBack(timerHandler);
	UART_init(&uartConfig);
	EEPROM_init();


	while(passwordVerified == 0)
     d2e:	fe 01       	movw	r30, r28
     d30:	ee 58       	subi	r30, 0x8E	; 142
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <start+0x1f6>
     d3a:	28 cf       	rjmp	.-432    	; 0xb8c <start+0x46>

		_delay_ms(UART_DELAY);
	}


	storePasswordeeprom(password);
     d3c:	ce 01       	movw	r24, r28
     d3e:	8d 58       	subi	r24, 0x8D	; 141
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	0e 94 44 0c 	call	0x1888	; 0x1888 <storePasswordeeprom>


	while(1)
	{
		uint8 passwordEEPROM[4];
		readPasswordeeprom(passwordEEPROM);
     d46:	ce 01       	movw	r24, r28
     d48:	83 58       	subi	r24, 0x83	; 131
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <readPasswordeeprom>
		command = UART_recieveByte();
     d50:	0e 94 4d 14 	call	0x289a	; 0x289a <UART_recieveByte>
     d54:	fe 01       	movw	r30, r28
     d56:	ef 58       	subi	r30, 0x8F	; 143
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 83       	st	Z, r24
     d5c:	fe 01       	movw	r30, r28
     d5e:	e1 5a       	subi	r30, 0xA1	; 161
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a2 e0       	ldi	r26, 0x02	; 2
     d68:	b3 e4       	ldi	r27, 0x43	; 67
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	a2 83       	std	Z+2, r26	; 0x02
     d70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	8e 01       	movw	r16, r28
     d74:	05 5a       	subi	r16, 0xA5	; 165
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	fe 01       	movw	r30, r28
     d7a:	e1 5a       	subi	r30, 0xA1	; 161
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4a ef       	ldi	r20, 0xFA	; 250
     d8c:	54 e4       	ldi	r21, 0x44	; 68
     d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	f8 01       	movw	r30, r16
     d98:	80 83       	st	Z, r24
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	a2 83       	std	Z+2, r26	; 0x02
     d9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     da0:	fe 01       	movw	r30, r28
     da2:	e5 5a       	subi	r30, 0xA5	; 165
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e8       	ldi	r20, 0x80	; 128
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dba:	88 23       	and	r24, r24
     dbc:	44 f4       	brge	.+16     	; 0xdce <start+0x288>
		__ticks = 1;
     dbe:	fe 01       	movw	r30, r28
     dc0:	e7 5a       	subi	r30, 0xA7	; 167
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
     dcc:	64 c0       	rjmp	.+200    	; 0xe96 <start+0x350>
	else if (__tmp > 65535)
     dce:	fe 01       	movw	r30, r28
     dd0:	e5 5a       	subi	r30, 0xA5	; 165
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	0c f0       	brlt	.+2      	; 0xdee <start+0x2a8>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <start+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dee:	fe 01       	movw	r30, r28
     df0:	e1 5a       	subi	r30, 0xA1	; 161
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	8e 01       	movw	r16, r28
     e0e:	07 5a       	subi	r16, 0xA7	; 167
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	bc 01       	movw	r22, r24
     e14:	cd 01       	movw	r24, r26
     e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	f8 01       	movw	r30, r16
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	1f c0       	rjmp	.+62     	; 0xe64 <start+0x31e>
     e26:	fe 01       	movw	r30, r28
     e28:	e9 5a       	subi	r30, 0xA9	; 169
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	fe 01       	movw	r30, r28
     e36:	e9 5a       	subi	r30, 0xA9	; 169
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <start+0x2f8>
     e42:	fe 01       	movw	r30, r28
     e44:	e9 5a       	subi	r30, 0xA9	; 169
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	de 01       	movw	r26, r28
     e4e:	a7 5a       	subi	r26, 0xA7	; 167
     e50:	bf 4f       	sbci	r27, 0xFF	; 255
     e52:	fe 01       	movw	r30, r28
     e54:	e7 5a       	subi	r30, 0xA7	; 167
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	9c 93       	st	X, r25
     e62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e64:	fe 01       	movw	r30, r28
     e66:	e7 5a       	subi	r30, 0xA7	; 167
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f6       	brne	.-76     	; 0xe26 <start+0x2e0>
     e72:	28 c0       	rjmp	.+80     	; 0xec4 <start+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	8e 01       	movw	r16, r28
     e76:	07 5a       	subi	r16, 0xA7	; 167
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	fe 01       	movw	r30, r28
     e7c:	e5 5a       	subi	r30, 0xA5	; 165
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	f8 01       	movw	r30, r16
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	de 01       	movw	r26, r28
     e98:	ab 5a       	subi	r26, 0xAB	; 171
     e9a:	bf 4f       	sbci	r27, 0xFF	; 255
     e9c:	fe 01       	movw	r30, r28
     e9e:	e7 5a       	subi	r30, 0xA7	; 167
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	9c 93       	st	X, r25
     eaa:	8e 93       	st	-X, r24
     eac:	fe 01       	movw	r30, r28
     eae:	eb 5a       	subi	r30, 0xAB	; 171
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <start+0x370>
     eba:	fe 01       	movw	r30, r28
     ebc:	eb 5a       	subi	r30, 0xAB	; 171
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(command == '+')
     ec4:	fe 01       	movw	r30, r28
     ec6:	ef 58       	subi	r30, 0x8F	; 143
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 81       	ld	r24, Z
     ecc:	8b 32       	cpi	r24, 0x2B	; 43
     ece:	09 f0       	breq	.+2      	; 0xed2 <start+0x38c>
     ed0:	da c1       	rjmp	.+948    	; 0x1286 <start+0x740>
		{
			receivePassword(password);
     ed2:	ce 01       	movw	r24, r28
     ed4:	8d 58       	subi	r24, 0x8D	; 141
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>

			if(verifyPassword(password, passwordEEPROM))
     edc:	ce 01       	movw	r24, r28
     ede:	8d 58       	subi	r24, 0x8D	; 141
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	9e 01       	movw	r18, r28
     ee4:	23 58       	subi	r18, 0x83	; 131
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	b9 01       	movw	r22, r18
     eea:	0e 94 9e 0b 	call	0x173c	; 0x173c <verifyPassword>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <start+0x3ae>
     ef2:	bd c0       	rjmp	.+378    	; 0x106e <start+0x528>
			{
				falsePasswords = 0;
     ef4:	10 92 77 00 	sts	0x0077, r1
     ef8:	10 92 76 00 	sts	0x0076, r1
				UART_sendByte(1);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
     f02:	fe 01       	movw	r30, r28
     f04:	ef 5a       	subi	r30, 0xAF	; 175
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a2 e0       	ldi	r26, 0x02	; 2
     f0e:	b3 e4       	ldi	r27, 0x43	; 67
     f10:	80 83       	st	Z, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f18:	8e 01       	movw	r16, r28
     f1a:	03 5b       	subi	r16, 0xB3	; 179
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	fe 01       	movw	r30, r28
     f20:	ef 5a       	subi	r30, 0xAF	; 175
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a ef       	ldi	r20, 0xFA	; 250
     f32:	54 e4       	ldi	r21, 0x44	; 68
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 83       	st	Z, r24
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	a2 83       	std	Z+2, r26	; 0x02
     f44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f46:	fe 01       	movw	r30, r28
     f48:	e3 5b       	subi	r30, 0xB3	; 179
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	44 f4       	brge	.+16     	; 0xf74 <start+0x42e>
		__ticks = 1;
     f64:	fe 01       	movw	r30, r28
     f66:	e5 5b       	subi	r30, 0xB5	; 181
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
     f72:	64 c0       	rjmp	.+200    	; 0x103c <start+0x4f6>
	else if (__tmp > 65535)
     f74:	fe 01       	movw	r30, r28
     f76:	e3 5b       	subi	r30, 0xB3	; 179
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	0c f0       	brlt	.+2      	; 0xf94 <start+0x44e>
     f92:	43 c0       	rjmp	.+134    	; 0x101a <start+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	fe 01       	movw	r30, r28
     f96:	ef 5a       	subi	r30, 0xAF	; 175
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e2       	ldi	r20, 0x20	; 32
     fa8:	51 e4       	ldi	r21, 0x41	; 65
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	8e 01       	movw	r16, r28
     fb4:	05 5b       	subi	r16, 0xB5	; 181
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	f8 01       	movw	r30, r16
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
     fca:	1f c0       	rjmp	.+62     	; 0x100a <start+0x4c4>
     fcc:	fe 01       	movw	r30, r28
     fce:	e7 5b       	subi	r30, 0xB7	; 183
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	88 ec       	ldi	r24, 0xC8	; 200
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
     fda:	fe 01       	movw	r30, r28
     fdc:	e7 5b       	subi	r30, 0xB7	; 183
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <start+0x49e>
     fe8:	fe 01       	movw	r30, r28
     fea:	e7 5b       	subi	r30, 0xB7	; 183
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	de 01       	movw	r26, r28
     ff4:	a5 5b       	subi	r26, 0xB5	; 181
     ff6:	bf 4f       	sbci	r27, 0xFF	; 255
     ff8:	fe 01       	movw	r30, r28
     ffa:	e5 5b       	subi	r30, 0xB5	; 181
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	9c 93       	st	X, r25
    1008:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	fe 01       	movw	r30, r28
    100c:	e5 5b       	subi	r30, 0xB5	; 181
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	d1 f6       	brne	.-76     	; 0xfcc <start+0x486>
    1018:	27 c0       	rjmp	.+78     	; 0x1068 <start+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101a:	8e 01       	movw	r16, r28
    101c:	05 5b       	subi	r16, 0xB5	; 181
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	fe 01       	movw	r30, r28
    1022:	e3 5b       	subi	r30, 0xB3	; 179
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	f8 01       	movw	r30, r16
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
    103c:	de 01       	movw	r26, r28
    103e:	a9 5b       	subi	r26, 0xB9	; 185
    1040:	bf 4f       	sbci	r27, 0xFF	; 255
    1042:	fe 01       	movw	r30, r28
    1044:	e5 5b       	subi	r30, 0xB5	; 181
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	8d 93       	st	X+, r24
    104e:	9c 93       	st	X, r25
    1050:	fe 01       	movw	r30, r28
    1052:	e9 5b       	subi	r30, 0xB9	; 185
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <start+0x514>
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5b       	subi	r30, 0xB9	; 185
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				openDoor();
    1068:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <openDoor>
    106c:	6c ce       	rjmp	.-808    	; 0xd46 <start+0x200>
			}

			else
			{
				UART_sendByte(0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
    1074:	fe 01       	movw	r30, r28
    1076:	ed 5b       	subi	r30, 0xBD	; 189
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a2 e0       	ldi	r26, 0x02	; 2
    1080:	b3 e4       	ldi	r27, 0x43	; 67
    1082:	80 83       	st	Z, r24
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	a2 83       	std	Z+2, r26	; 0x02
    1088:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	8e 01       	movw	r16, r28
    108c:	01 5c       	subi	r16, 0xC1	; 193
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	fe 01       	movw	r30, r28
    1092:	ed 5b       	subi	r30, 0xBD	; 189
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a ef       	ldi	r20, 0xFA	; 250
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 83       	st	Z, r24
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	a2 83       	std	Z+2, r26	; 0x02
    10b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10b8:	fe 01       	movw	r30, r28
    10ba:	ff 96       	adiw	r30, 0x3f	; 63
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f4       	brge	.+10     	; 0x10de <start+0x598>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9e af       	std	Y+62, r25	; 0x3e
    10da:	8d af       	std	Y+61, r24	; 0x3d
    10dc:	46 c0       	rjmp	.+140    	; 0x116a <start+0x624>
	else if (__tmp > 65535)
    10de:	fe 01       	movw	r30, r28
    10e0:	ff 96       	adiw	r30, 0x3f	; 63
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	64 f5       	brge	.+88     	; 0x1152 <start+0x60c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	fe 01       	movw	r30, r28
    10fc:	ed 5b       	subi	r30, 0xBD	; 189
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e af       	std	Y+62, r25	; 0x3e
    1126:	8d af       	std	Y+61, r24	; 0x3d
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <start+0x602>
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c af       	std	Y+60, r25	; 0x3c
    1130:	8b af       	std	Y+59, r24	; 0x3b
    1132:	8b ad       	ldd	r24, Y+59	; 0x3b
    1134:	9c ad       	ldd	r25, Y+60	; 0x3c
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <start+0x5f0>
    113a:	9c af       	std	Y+60, r25	; 0x3c
    113c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1140:	9e ad       	ldd	r25, Y+62	; 0x3e
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9e af       	std	Y+62, r25	; 0x3e
    1146:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	8d ad       	ldd	r24, Y+61	; 0x3d
    114a:	9e ad       	ldd	r25, Y+62	; 0x3e
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f7       	brne	.-38     	; 0x112a <start+0x5e4>
    1150:	16 c0       	rjmp	.+44     	; 0x117e <start+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	fe 01       	movw	r30, r28
    1154:	ff 96       	adiw	r30, 0x3f	; 63
    1156:	60 81       	ld	r22, Z
    1158:	71 81       	ldd	r23, Z+1	; 0x01
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	93 81       	ldd	r25, Z+3	; 0x03
    115e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9e af       	std	Y+62, r25	; 0x3e
    1168:	8d af       	std	Y+61, r24	; 0x3d
    116a:	8d ad       	ldd	r24, Y+61	; 0x3d
    116c:	9e ad       	ldd	r25, Y+62	; 0x3e
    116e:	9a af       	std	Y+58, r25	; 0x3a
    1170:	89 af       	std	Y+57, r24	; 0x39
    1172:	89 ad       	ldd	r24, Y+57	; 0x39
    1174:	9a ad       	ldd	r25, Y+58	; 0x3a
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <start+0x630>
    117a:	9a af       	std	Y+58, r25	; 0x3a
    117c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				falsePasswords++;
    117e:	80 91 76 00 	lds	r24, 0x0076
    1182:	90 91 77 00 	lds	r25, 0x0077
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 77 00 	sts	0x0077, r25
    118c:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    1190:	80 91 76 00 	lds	r24, 0x0076
    1194:	90 91 77 00 	lds	r25, 0x0077
    1198:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a2 e0       	ldi	r26, 0x02	; 2
    11a2:	b3 e4       	ldi	r27, 0x43	; 67
    11a4:	8d ab       	std	Y+53, r24	; 0x35
    11a6:	9e ab       	std	Y+54, r25	; 0x36
    11a8:	af ab       	std	Y+55, r26	; 0x37
    11aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ac:	6d a9       	ldd	r22, Y+53	; 0x35
    11ae:	7e a9       	ldd	r23, Y+54	; 0x36
    11b0:	8f a9       	ldd	r24, Y+55	; 0x37
    11b2:	98 ad       	ldd	r25, Y+56	; 0x38
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	4a ef       	ldi	r20, 0xFA	; 250
    11ba:	54 e4       	ldi	r21, 0x44	; 68
    11bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	89 ab       	std	Y+49, r24	; 0x31
    11c6:	9a ab       	std	Y+50, r25	; 0x32
    11c8:	ab ab       	std	Y+51, r26	; 0x33
    11ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11cc:	69 a9       	ldd	r22, Y+49	; 0x31
    11ce:	7a a9       	ldd	r23, Y+50	; 0x32
    11d0:	8b a9       	ldd	r24, Y+51	; 0x33
    11d2:	9c a9       	ldd	r25, Y+52	; 0x34
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e0:	88 23       	and	r24, r24
    11e2:	2c f4       	brge	.+10     	; 0x11ee <start+0x6a8>
		__ticks = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	98 ab       	std	Y+48, r25	; 0x30
    11ea:	8f a7       	std	Y+47, r24	; 0x2f
    11ec:	3f c0       	rjmp	.+126    	; 0x126c <start+0x726>
	else if (__tmp > 65535)
    11ee:	69 a9       	ldd	r22, Y+49	; 0x31
    11f0:	7a a9       	ldd	r23, Y+50	; 0x32
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	57 e4       	ldi	r21, 0x47	; 71
    11fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1202:	18 16       	cp	r1, r24
    1204:	4c f5       	brge	.+82     	; 0x1258 <start+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1206:	6d a9       	ldd	r22, Y+53	; 0x35
    1208:	7e a9       	ldd	r23, Y+54	; 0x36
    120a:	8f a9       	ldd	r24, Y+55	; 0x37
    120c:	98 ad       	ldd	r25, Y+56	; 0x38
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e2       	ldi	r20, 0x20	; 32
    1214:	51 e4       	ldi	r21, 0x41	; 65
    1216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	98 ab       	std	Y+48, r25	; 0x30
    122c:	8f a7       	std	Y+47, r24	; 0x2f
    122e:	0f c0       	rjmp	.+30     	; 0x124e <start+0x708>
    1230:	88 ec       	ldi	r24, 0xC8	; 200
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e a7       	std	Y+46, r25	; 0x2e
    1236:	8d a7       	std	Y+45, r24	; 0x2d
    1238:	8d a5       	ldd	r24, Y+45	; 0x2d
    123a:	9e a5       	ldd	r25, Y+46	; 0x2e
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <start+0x6f6>
    1240:	9e a7       	std	Y+46, r25	; 0x2e
    1242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1244:	8f a5       	ldd	r24, Y+47	; 0x2f
    1246:	98 a9       	ldd	r25, Y+48	; 0x30
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	98 ab       	std	Y+48, r25	; 0x30
    124c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1250:	98 a9       	ldd	r25, Y+48	; 0x30
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	69 f7       	brne	.-38     	; 0x1230 <start+0x6ea>
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <start+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1258:	69 a9       	ldd	r22, Y+49	; 0x31
    125a:	7a a9       	ldd	r23, Y+50	; 0x32
    125c:	8b a9       	ldd	r24, Y+51	; 0x33
    125e:	9c a9       	ldd	r25, Y+52	; 0x34
    1260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	98 ab       	std	Y+48, r25	; 0x30
    126a:	8f a7       	std	Y+47, r24	; 0x2f
    126c:	8f a5       	ldd	r24, Y+47	; 0x2f
    126e:	98 a9       	ldd	r25, Y+48	; 0x30
    1270:	9c a7       	std	Y+44, r25	; 0x2c
    1272:	8b a7       	std	Y+43, r24	; 0x2b
    1274:	8b a5       	ldd	r24, Y+43	; 0x2b
    1276:	9c a5       	ldd	r25, Y+44	; 0x2c
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <start+0x732>
    127c:	9c a7       	std	Y+44, r25	; 0x2c
    127e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);
				falsePassword();
    1280:	0e 94 1d 0c 	call	0x183a	; 0x183a <falsePassword>
    1284:	60 cd       	rjmp	.-1344   	; 0xd46 <start+0x200>

			}
		}

		else if(command == '-')
    1286:	fe 01       	movw	r30, r28
    1288:	ef 58       	subi	r30, 0x8F	; 143
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	8d 32       	cpi	r24, 0x2D	; 45
    1290:	09 f0       	breq	.+2      	; 0x1294 <start+0x74e>
    1292:	59 cd       	rjmp	.-1358   	; 0xd46 <start+0x200>
		{
			receivePassword(password);
    1294:	ce 01       	movw	r24, r28
    1296:	8d 58       	subi	r24, 0x8D	; 141
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>


			passwordVerified = verifyPassword(password, passwordEEPROM);
    129e:	ce 01       	movw	r24, r28
    12a0:	8d 58       	subi	r24, 0x8D	; 141
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	9e 01       	movw	r18, r28
    12a6:	23 58       	subi	r18, 0x83	; 131
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	b9 01       	movw	r22, r18
    12ac:	0e 94 9e 0b 	call	0x173c	; 0x173c <verifyPassword>
    12b0:	fe 01       	movw	r30, r28
    12b2:	ee 58       	subi	r30, 0x8E	; 142
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 83       	st	Z, r24
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a2 e0       	ldi	r26, 0x02	; 2
    12be:	b3 e4       	ldi	r27, 0x43	; 67
    12c0:	8f a3       	std	Y+39, r24	; 0x27
    12c2:	98 a7       	std	Y+40, r25	; 0x28
    12c4:	a9 a7       	std	Y+41, r26	; 0x29
    12c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c8:	6f a1       	ldd	r22, Y+39	; 0x27
    12ca:	78 a5       	ldd	r23, Y+40	; 0x28
    12cc:	89 a5       	ldd	r24, Y+41	; 0x29
    12ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a ef       	ldi	r20, 0xFA	; 250
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8b a3       	std	Y+35, r24	; 0x23
    12e2:	9c a3       	std	Y+36, r25	; 0x24
    12e4:	ad a3       	std	Y+37, r26	; 0x25
    12e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ea:	7c a1       	ldd	r23, Y+36	; 0x24
    12ec:	8d a1       	ldd	r24, Y+37	; 0x25
    12ee:	9e a1       	ldd	r25, Y+38	; 0x26
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <start+0x7c4>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9a a3       	std	Y+34, r25	; 0x22
    1306:	89 a3       	std	Y+33, r24	; 0x21
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <start+0x842>
	else if (__tmp > 65535)
    130a:	6b a1       	ldd	r22, Y+35	; 0x23
    130c:	7c a1       	ldd	r23, Y+36	; 0x24
    130e:	8d a1       	ldd	r24, Y+37	; 0x25
    1310:	9e a1       	ldd	r25, Y+38	; 0x26
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	57 e4       	ldi	r21, 0x47	; 71
    131a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	4c f5       	brge	.+82     	; 0x1374 <start+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	6f a1       	ldd	r22, Y+39	; 0x27
    1324:	78 a5       	ldd	r23, Y+40	; 0x28
    1326:	89 a5       	ldd	r24, Y+41	; 0x29
    1328:	9a a5       	ldd	r25, Y+42	; 0x2a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e2       	ldi	r20, 0x20	; 32
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9a a3       	std	Y+34, r25	; 0x22
    1348:	89 a3       	std	Y+33, r24	; 0x21
    134a:	0f c0       	rjmp	.+30     	; 0x136a <start+0x824>
    134c:	88 ec       	ldi	r24, 0xC8	; 200
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	98 a3       	std	Y+32, r25	; 0x20
    1352:	8f 8f       	std	Y+31, r24	; 0x1f
    1354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1356:	98 a1       	ldd	r25, Y+32	; 0x20
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <start+0x812>
    135c:	98 a3       	std	Y+32, r25	; 0x20
    135e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1360:	89 a1       	ldd	r24, Y+33	; 0x21
    1362:	9a a1       	ldd	r25, Y+34	; 0x22
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9a a3       	std	Y+34, r25	; 0x22
    1368:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136a:	89 a1       	ldd	r24, Y+33	; 0x21
    136c:	9a a1       	ldd	r25, Y+34	; 0x22
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	69 f7       	brne	.-38     	; 0x134c <start+0x806>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <start+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1374:	6b a1       	ldd	r22, Y+35	; 0x23
    1376:	7c a1       	ldd	r23, Y+36	; 0x24
    1378:	8d a1       	ldd	r24, Y+37	; 0x25
    137a:	9e a1       	ldd	r25, Y+38	; 0x26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9a a3       	std	Y+34, r25	; 0x22
    1386:	89 a3       	std	Y+33, r24	; 0x21
    1388:	89 a1       	ldd	r24, Y+33	; 0x21
    138a:	9a a1       	ldd	r25, Y+34	; 0x22
    138c:	9e 8f       	std	Y+30, r25	; 0x1e
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
    1390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1392:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <start+0x84e>
    1398:	9e 8f       	std	Y+30, r25	; 0x1e
    139a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(UART_DELAY);
			UART_sendByte(passwordVerified);
    139c:	fe 01       	movw	r30, r28
    139e:	ee 58       	subi	r30, 0x8E	; 142
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>

			if(passwordVerified)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ee 58       	subi	r30, 0x8E	; 142
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <start+0x870>
    13b4:	a0 c0       	rjmp	.+320    	; 0x14f6 <start+0x9b0>
			{
				falsePasswords = 0;
    13b6:	10 92 77 00 	sts	0x0077, r1
    13ba:	10 92 76 00 	sts	0x0076, r1
				receivePassword(password);
    13be:	ce 01       	movw	r24, r28
    13c0:	8d 58       	subi	r24, 0x8D	; 141
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>


				receivePassword(confirmPassword);
    13c8:	ce 01       	movw	r24, r28
    13ca:	88 58       	subi	r24, 0x88	; 136
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <receivePassword>

				passwordVerified = verifyPassword(password, confirmPassword);
    13d2:	ce 01       	movw	r24, r28
    13d4:	8d 58       	subi	r24, 0x8D	; 141
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	9e 01       	movw	r18, r28
    13da:	28 58       	subi	r18, 0x88	; 136
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	b9 01       	movw	r22, r18
    13e0:	0e 94 9e 0b 	call	0x173c	; 0x173c <verifyPassword>
    13e4:	fe 01       	movw	r30, r28
    13e6:	ee 58       	subi	r30, 0x8E	; 142
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a2 e0       	ldi	r26, 0x02	; 2
    13f2:	b3 e4       	ldi	r27, 0x43	; 67
    13f4:	89 8f       	std	Y+25, r24	; 0x19
    13f6:	9a 8f       	std	Y+26, r25	; 0x1a
    13f8:	ab 8f       	std	Y+27, r26	; 0x1b
    13fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	69 8d       	ldd	r22, Y+25	; 0x19
    13fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8d 8b       	std	Y+21, r24	; 0x15
    1416:	9e 8b       	std	Y+22, r25	; 0x16
    1418:	af 8b       	std	Y+23, r26	; 0x17
    141a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <start+0x8f8>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <start+0x976>
	else if (__tmp > 65535)
    143e:	6d 89       	ldd	r22, Y+21	; 0x15
    1440:	7e 89       	ldd	r23, Y+22	; 0x16
    1442:	8f 89       	ldd	r24, Y+23	; 0x17
    1444:	98 8d       	ldd	r25, Y+24	; 0x18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <start+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	69 8d       	ldd	r22, Y+25	; 0x19
    1458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
    147e:	0f c0       	rjmp	.+30     	; 0x149e <start+0x958>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9a 8b       	std	Y+18, r25	; 0x12
    1486:	89 8b       	std	Y+17, r24	; 0x11
    1488:	89 89       	ldd	r24, Y+17	; 0x11
    148a:	9a 89       	ldd	r25, Y+18	; 0x12
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <start+0x946>
    1490:	9a 8b       	std	Y+18, r25	; 0x12
    1492:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	9c 89       	ldd	r25, Y+20	; 0x14
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9c 8b       	std	Y+20, r25	; 0x14
    149c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8b 89       	ldd	r24, Y+19	; 0x13
    14a0:	9c 89       	ldd	r25, Y+20	; 0x14
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <start+0x93a>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <start+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	98 8b       	std	Y+16, r25	; 0x10
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	98 89       	ldd	r25, Y+16	; 0x10
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <start+0x982>
    14cc:	98 8b       	std	Y+16, r25	; 0x10
    14ce:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(UART_DELAY);
				UART_sendByte(passwordVerified);
    14d0:	fe 01       	movw	r30, r28
    14d2:	ee 58       	subi	r30, 0x8E	; 142
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>

				if(passwordVerified)
    14dc:	fe 01       	movw	r30, r28
    14de:	ee 58       	subi	r30, 0x8E	; 142
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <start+0x9a4>
    14e8:	2e cc       	rjmp	.-1956   	; 0xd46 <start+0x200>
				{
					storePasswordeeprom(password);
    14ea:	ce 01       	movw	r24, r28
    14ec:	8d 58       	subi	r24, 0x8D	; 141
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	0e 94 44 0c 	call	0x1888	; 0x1888 <storePasswordeeprom>
    14f4:	28 cc       	rjmp	.-1968   	; 0xd46 <start+0x200>

			}

			else
			{
				falsePasswords++;
    14f6:	80 91 76 00 	lds	r24, 0x0076
    14fa:	90 91 77 00 	lds	r25, 0x0077
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	90 93 77 00 	sts	0x0077, r25
    1504:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    1508:	80 91 76 00 	lds	r24, 0x0076
    150c:	90 91 77 00 	lds	r25, 0x0077
    1510:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a2 e0       	ldi	r26, 0x02	; 2
    151a:	b3 e4       	ldi	r27, 0x43	; 67
    151c:	8b 87       	std	Y+11, r24	; 0x0b
    151e:	9c 87       	std	Y+12, r25	; 0x0c
    1520:	ad 87       	std	Y+13, r26	; 0x0d
    1522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a ef       	ldi	r20, 0xFA	; 250
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	a9 87       	std	Y+9, r26	; 0x09
    1542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <start+0xa20>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <start+0xa9e>
	else if (__tmp > 65535)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <start+0xa8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <start+0xa80>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <start+0xa6e>
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <start+0xa62>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <start+0xab2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <start+0xaaa>
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(UART_DELAY);
				falsePassword();
    15f8:	0e 94 1d 0c 	call	0x183a	; 0x183a <falsePassword>
    15fc:	a4 cb       	rjmp	.-2232   	; 0xd46 <start+0x200>

000015fe <receivePassword>:
	}
}


void receivePassword (uint8 password[])
{
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	61 97       	sbiw	r28, 0x11	; 17
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	99 8b       	std	Y+17, r25	; 0x11
    1618:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    161a:	1f 86       	std	Y+15, r1	; 0x0f
    161c:	0f c0       	rjmp	.+30     	; 0x163c <receivePassword+0x3e>
	{
		password [i] = UART_recieveByte();
    161e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	88 89       	ldd	r24, Y+16	; 0x10
    1626:	99 89       	ldd	r25, Y+17	; 0x11
    1628:	8c 01       	movw	r16, r24
    162a:	02 0f       	add	r16, r18
    162c:	13 1f       	adc	r17, r19
    162e:	0e 94 4d 14 	call	0x289a	; 0x289a <UART_recieveByte>
    1632:	f8 01       	movw	r30, r16
    1634:	80 83       	st	Z, r24

void receivePassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	8f 5f       	subi	r24, 0xFF	; 255
    163a:	8f 87       	std	Y+15, r24	; 0x0f
    163c:	8f 85       	ldd	r24, Y+15	; 0x0f
    163e:	85 30       	cpi	r24, 0x05	; 5
    1640:	70 f3       	brcs	.-36     	; 0x161e <receivePassword+0x20>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a2 e0       	ldi	r26, 0x02	; 2
    1648:	b3 e4       	ldi	r27, 0x43	; 67
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c
    164e:	ad 87       	std	Y+13, r26	; 0x0d
    1650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a ef       	ldi	r20, 0xFA	; 250
    1660:	54 e4       	ldi	r21, 0x44	; 68
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	a9 87       	std	Y+9, r26	; 0x09
    1670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1686:	88 23       	and	r24, r24
    1688:	2c f4       	brge	.+10     	; 0x1694 <receivePassword+0x96>
		__ticks = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <receivePassword+0x114>
	else if (__tmp > 65535)
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	4c f5       	brge	.+82     	; 0x16fe <receivePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <receivePassword+0xf6>
    16d6:	88 ec       	ldi	r24, 0xC8	; 200
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <receivePassword+0xe4>
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <receivePassword+0xd8>
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <receivePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <receivePassword+0x120>
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
	{
		password [i] = UART_recieveByte();
	}
	_delay_ms (UART_DELAY);
}
    1726:	61 96       	adiw	r28, 0x11	; 17
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <verifyPassword>:



uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <verifyPassword+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <verifyPassword+0x8>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <verifyPassword+0xa>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9b 83       	std	Y+3, r25	; 0x03
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	7d 83       	std	Y+5, r23	; 0x05
    1750:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	19 c0       	rjmp	.+50     	; 0x1788 <verifyPassword+0x4c>
	{
		if (password[i] != confirmPassword[i])
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	fc 01       	movw	r30, r24
    1762:	e2 0f       	add	r30, r18
    1764:	f3 1f       	adc	r31, r19
    1766:	40 81       	ld	r20, Z
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	fc 01       	movw	r30, r24
    1774:	e2 0f       	add	r30, r18
    1776:	f3 1f       	adc	r31, r19
    1778:	80 81       	ld	r24, Z
    177a:	48 17       	cp	r20, r24
    177c:	11 f0       	breq	.+4      	; 0x1782 <verifyPassword+0x46>
		{
			return 0;
    177e:	1e 82       	std	Y+6, r1	; 0x06
    1780:	08 c0       	rjmp	.+16     	; 0x1792 <verifyPassword+0x56>

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	85 30       	cpi	r24, 0x05	; 5
    178c:	20 f3       	brcs	.-56     	; 0x1756 <verifyPassword+0x1a>
		if (password[i] != confirmPassword[i])
		{
			return 0;
		}
	}
	return 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	8e 83       	std	Y+6, r24	; 0x06
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1794:	26 96       	adiw	r28, 0x06	; 6
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <openDoor>:




void openDoor (void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    17ae:	88 e6       	ldi	r24, 0x68	; 104
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <Timer1_init>

	DcMotor_Rotate(CLOCKWISE);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DcMotor_Rotate>
	while (counter < 15);
    17bc:	80 91 74 00 	lds	r24, 0x0074
    17c0:	90 91 75 00 	lds	r25, 0x0075
    17c4:	8f 30       	cpi	r24, 0x0F	; 15
    17c6:	91 05       	cpc	r25, r1
    17c8:	cc f3       	brlt	.-14     	; 0x17bc <openDoor+0x16>
	counter = 0;
    17ca:	10 92 75 00 	sts	0x0075, r1
    17ce:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DcMotor_Rotate>


	while (counter < 3);
    17d8:	80 91 74 00 	lds	r24, 0x0074
    17dc:	90 91 75 00 	lds	r25, 0x0075
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	cc f3       	brlt	.-14     	; 0x17d8 <openDoor+0x32>
	counter = 0;
    17e6:	10 92 75 00 	sts	0x0075, r1
    17ea:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(ANTICLOCKWISE);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DcMotor_Rotate>


	while (counter < 15);
    17f4:	80 91 74 00 	lds	r24, 0x0074
    17f8:	90 91 75 00 	lds	r25, 0x0075
    17fc:	8f 30       	cpi	r24, 0x0F	; 15
    17fe:	91 05       	cpc	r25, r1
    1800:	cc f3       	brlt	.-14     	; 0x17f4 <openDoor+0x4e>
	counter = 0;
    1802:	10 92 75 00 	sts	0x0075, r1
    1806:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DcMotor_Rotate>
	Timer1_deInit();
    1810:	0e 94 5e 13 	call	0x26bc	; 0x26bc <Timer1_deInit>
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <timerHandler>:




void timerHandler(void)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
	counter++;
    1822:	80 91 74 00 	lds	r24, 0x0074
    1826:	90 91 75 00 	lds	r25, 0x0075
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	90 93 75 00 	sts	0x0075, r25
    1830:	80 93 74 00 	sts	0x0074, r24
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <falsePassword>:




void falsePassword (void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	if (falsePasswords >= 3)
    1842:	80 91 76 00 	lds	r24, 0x0076
    1846:	90 91 77 00 	lds	r25, 0x0077
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	cc f0       	brlt	.+50     	; 0x1882 <falsePassword+0x48>
	{
		falsePasswords = 0;
    1850:	10 92 77 00 	sts	0x0077, r1
    1854:	10 92 76 00 	sts	0x0076, r1
		Timer1_init (&timerConfig);
    1858:	88 e6       	ldi	r24, 0x68	; 104
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <Timer1_init>
		Buzzer_on();
    1860:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Buzzer_on>
		while (counter < 60);
    1864:	80 91 74 00 	lds	r24, 0x0074
    1868:	90 91 75 00 	lds	r25, 0x0075
    186c:	8c 33       	cpi	r24, 0x3C	; 60
    186e:	91 05       	cpc	r25, r1
    1870:	cc f3       	brlt	.-14     	; 0x1864 <falsePassword+0x2a>
		Buzzer_off();
    1872:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Buzzer_off>
		counter = 0;
    1876:	10 92 75 00 	sts	0x0075, r1
    187a:	10 92 74 00 	sts	0x0074, r1
		Timer1_deInit();
    187e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <Timer1_deInit>
	}
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <storePasswordeeprom>:



void storePasswordeeprom (uint8 password[])
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	61 97       	sbiw	r28, 0x11	; 17
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	99 8b       	std	Y+17, r25	; 0x11
    189e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    18a0:	1f 86       	std	Y+15, r1	; 0x0f
    18a2:	88 c0       	rjmp	.+272    	; 0x19b4 <storePasswordeeprom+0x12c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
    18a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	80 57       	subi	r24, 0x70	; 112
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	ac 01       	movw	r20, r24
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	88 89       	ldd	r24, Y+16	; 0x10
    18b8:	99 89       	ldd	r25, Y+17	; 0x11
    18ba:	fc 01       	movw	r30, r24
    18bc:	e2 0f       	add	r30, r18
    18be:	f3 1f       	adc	r31, r19
    18c0:	20 81       	ld	r18, Z
    18c2:	ca 01       	movw	r24, r20
    18c4:	62 2f       	mov	r22, r18
    18c6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <EEPROM_writeByte>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a2 e0       	ldi	r26, 0x02	; 2
    18d0:	b3 e4       	ldi	r27, 0x43	; 67
    18d2:	8b 87       	std	Y+11, r24	; 0x0b
    18d4:	9c 87       	std	Y+12, r25	; 0x0c
    18d6:	ad 87       	std	Y+13, r26	; 0x0d
    18d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8f 83       	std	Y+7, r24	; 0x07
    18f4:	98 87       	std	Y+8, r25	; 0x08
    18f6:	a9 87       	std	Y+9, r26	; 0x09
    18f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <storePasswordeeprom+0x94>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	3f c0       	rjmp	.+126    	; 0x199a <storePasswordeeprom+0x112>
	else if (__tmp > 65535)
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <storePasswordeeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	0f c0       	rjmp	.+30     	; 0x197c <storePasswordeeprom+0xf4>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <storePasswordeeprom+0xe2>
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <storePasswordeeprom+0xd6>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <storePasswordeeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <storePasswordeeprom+0x11e>
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01


void storePasswordeeprom (uint8 password[])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    19ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	85 30       	cpi	r24, 0x05	; 5
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <storePasswordeeprom+0x134>
    19ba:	74 cf       	rjmp	.-280    	; 0x18a4 <storePasswordeeprom+0x1c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
	_delay_ms(UART_DELAY);
	}
}
    19bc:	61 96       	adiw	r28, 0x11	; 17
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <readPasswordeeprom>:



void readPasswordeeprom (uint8 password [])
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	61 97       	sbiw	r28, 0x11	; 17
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	99 8b       	std	Y+17, r25	; 0x11
    19e4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    19e6:	1f 86       	std	Y+15, r1	; 0x0f
    19e8:	86 c0       	rjmp	.+268    	; 0x1af6 <readPasswordeeprom+0x128>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
    19ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	80 57       	subi	r24, 0x70	; 112
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	ac 01       	movw	r20, r24
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	99 89       	ldd	r25, Y+17	; 0x11
    1a00:	28 0f       	add	r18, r24
    1a02:	39 1f       	adc	r19, r25
    1a04:	ca 01       	movw	r24, r20
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <EEPROM_readByte>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a8 ec       	ldi	r26, 0xC8	; 200
    1a12:	b2 e4       	ldi	r27, 0x42	; 66
    1a14:	8b 87       	std	Y+11, r24	; 0x0b
    1a16:	9c 87       	std	Y+12, r25	; 0x0c
    1a18:	ad 87       	std	Y+13, r26	; 0x0d
    1a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8f 83       	std	Y+7, r24	; 0x07
    1a36:	98 87       	std	Y+8, r25	; 0x08
    1a38:	a9 87       	std	Y+9, r26	; 0x09
    1a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <readPasswordeeprom+0x90>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <readPasswordeeprom+0x10e>
	else if (__tmp > 65535)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <readPasswordeeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <readPasswordeeprom+0xf0>
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <readPasswordeeprom+0xde>
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <readPasswordeeprom+0xd2>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <readPasswordeeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <readPasswordeeprom+0x11a>
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01


void readPasswordeeprom (uint8 password [])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    1af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	85 30       	cpi	r24, 0x05	; 5
    1afa:	08 f4       	brcc	.+2      	; 0x1afe <readPasswordeeprom+0x130>
    1afc:	76 cf       	rjmp	.-276    	; 0x19ea <readPasswordeeprom+0x1c>
	{
		EEPROM_readByte ((0x0090 + i) , (password + i));
		_delay_ms(100);
	}
}
    1afe:	61 96       	adiw	r28, 0x11	; 17
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <Buzzer_init>:
/*
 * Description: A function that initialize the buzzer.
 *
 */
void Buzzer_init(void)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (BUZZER_PORT_ID , BUZZER_PIN_1 , PIN_OUTPUT);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <GPIO_setupPinDirection>


	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_LOW);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
}
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <Buzzer_on>:
/*
 * Description: A function that start the buzzer.
 *
 */
void Buzzer_on(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_HIGH);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <Buzzer_off>:
/*
 * Description: A function that stop the buzzer.
 *
 */
void Buzzer_off(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (BUZZER_PORT_ID , BUZZER_PIN_1 , LOGIC_LOW);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <DcMotor_Init>:




void DcMotor_Init(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	/*Set motor pins as output pins*/
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,PIN_OUTPUT);
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	64 e0       	ldi	r22, 0x04	; 4
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,PIN_OUTPUT);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	65 e0       	ldi	r22, 0x05	; 5
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <GPIO_setupPinDirection>



	/*Stop the motor at first*/
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	64 e0       	ldi	r22, 0x04	; 4
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	65 e0       	ldi	r22, 0x05	; 5
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>

}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <DcMotor_Rotate>:
 * [Description] : Function that responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 *
 * [Returns]: void
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	if (state == STOP)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	88 23       	and	r24, r24
    1ba8:	59 f4       	brne	.+22     	; 0x1bc0 <DcMotor_Rotate+0x28>
	{
		/*Stop the motor*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	65 e0       	ldi	r22, 0x05	; 5
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
    1bbe:	1b c0       	rjmp	.+54     	; 0x1bf6 <DcMotor_Rotate+0x5e>
	}

	else if (state == CLOCKWISE)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	59 f4       	brne	.+22     	; 0x1bdc <DcMotor_Rotate+0x44>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	64 e0       	ldi	r22, 0x04	; 4
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_HIGH);
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	65 e0       	ldi	r22, 0x05	; 5
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
    1bda:	0d c0       	rjmp	.+26     	; 0x1bf6 <DcMotor_Rotate+0x5e>
	}

	else if (state == ANTICLOCKWISE)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	51 f4       	brne	.+20     	; 0x1bf6 <DcMotor_Rotate+0x5e>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_HIGH);
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	64 e0       	ldi	r22, 0x04	; 4
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	65 e0       	ldi	r22, 0x05	; 5
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_writePin>
	}
}
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <EEPROM_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void EEPROM_init(void)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <EEPROM_init+0x6>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	TWI_ConfigType twiConfig = {1 , 400};
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	31 96       	adiw	r30, 0x01	; 1
    1c10:	df 01       	movw	r26, r30
    1c12:	98 2f       	mov	r25, r24
    1c14:	1d 92       	st	X+, r1
    1c16:	9a 95       	dec	r25
    1c18:	e9 f7       	brne	.-6      	; 0x1c14 <EEPROM_init+0x16>
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&twiConfig);
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <TWI_init>
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <EEPROM_writeByte+0x6>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <EEPROM_writeByte+0x8>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c48:	0e 94 23 12 	call	0x2446	; 0x2446 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c4c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1c50:	88 30       	cpi	r24, 0x08	; 8
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <EEPROM_writeByte+0x22>
        return ERROR;
    1c54:	1c 82       	std	Y+4, r1	; 0x04
    1c56:	28 c0       	rjmp	.+80     	; 0x1ca8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	80 70       	andi	r24, 0x00	; 0
    1c5e:	97 70       	andi	r25, 0x07	; 7
    1c60:	88 0f       	add	r24, r24
    1c62:	89 2f       	mov	r24, r25
    1c64:	88 1f       	adc	r24, r24
    1c66:	99 0b       	sbc	r25, r25
    1c68:	91 95       	neg	r25
    1c6a:	80 6a       	ori	r24, 0xA0	; 160
    1c6c:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c70:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1c74:	88 31       	cpi	r24, 0x18	; 24
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <EEPROM_writeByte+0x46>
        return ERROR; 
    1c78:	1c 82       	std	Y+4, r1	; 0x04
    1c7a:	16 c0       	rjmp	.+44     	; 0x1ca8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c82:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1c86:	88 32       	cpi	r24, 0x28	; 40
    1c88:	11 f0       	breq	.+4      	; 0x1c8e <EEPROM_writeByte+0x58>
        return ERROR;
    1c8a:	1c 82       	std	Y+4, r1	; 0x04
    1c8c:	0d c0       	rjmp	.+26     	; 0x1ca8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c94:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1c98:	88 32       	cpi	r24, 0x28	; 40
    1c9a:	11 f0       	breq	.+4      	; 0x1ca0 <EEPROM_writeByte+0x6a>
        return ERROR;
    1c9c:	1c 82       	std	Y+4, r1	; 0x04
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1ca0:	0e 94 33 12 	call	0x2466	; 0x2466 <TWI_stop>
	
    return SUCCESS;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	8c 83       	std	Y+4, r24	; 0x04
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <EEPROM_readByte+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <EEPROM_readByte+0x8>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	7c 83       	std	Y+4, r23	; 0x04
    1ccc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1cce:	0e 94 23 12 	call	0x2446	; 0x2446 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1cd2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1cd6:	88 30       	cpi	r24, 0x08	; 8
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <EEPROM_readByte+0x26>
        return ERROR;
    1cda:	1d 82       	std	Y+5, r1	; 0x05
    1cdc:	44 c0       	rjmp	.+136    	; 0x1d66 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	80 70       	andi	r24, 0x00	; 0
    1ce4:	97 70       	andi	r25, 0x07	; 7
    1ce6:	88 0f       	add	r24, r24
    1ce8:	89 2f       	mov	r24, r25
    1cea:	88 1f       	adc	r24, r24
    1cec:	99 0b       	sbc	r25, r25
    1cee:	91 95       	neg	r25
    1cf0:	80 6a       	ori	r24, 0xA0	; 160
    1cf2:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1cf6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1cfa:	88 31       	cpi	r24, 0x18	; 24
    1cfc:	11 f0       	breq	.+4      	; 0x1d02 <EEPROM_readByte+0x4a>
        return ERROR;
    1cfe:	1d 82       	std	Y+5, r1	; 0x05
    1d00:	32 c0       	rjmp	.+100    	; 0x1d66 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d08:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1d0c:	88 32       	cpi	r24, 0x28	; 40
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <EEPROM_readByte+0x5c>
        return ERROR;
    1d10:	1d 82       	std	Y+5, r1	; 0x05
    1d12:	29 c0       	rjmp	.+82     	; 0x1d66 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1d14:	0e 94 23 12 	call	0x2446	; 0x2446 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1d18:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1d1c:	80 31       	cpi	r24, 0x10	; 16
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <EEPROM_readByte+0x6c>
        return ERROR;
    1d20:	1d 82       	std	Y+5, r1	; 0x05
    1d22:	21 c0       	rjmp	.+66     	; 0x1d66 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	80 70       	andi	r24, 0x00	; 0
    1d2a:	97 70       	andi	r25, 0x07	; 7
    1d2c:	88 0f       	add	r24, r24
    1d2e:	89 2f       	mov	r24, r25
    1d30:	88 1f       	adc	r24, r24
    1d32:	99 0b       	sbc	r25, r25
    1d34:	91 95       	neg	r25
    1d36:	81 6a       	ori	r24, 0xA1	; 161
    1d38:	0e 94 3e 12 	call	0x247c	; 0x247c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d3c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1d40:	80 34       	cpi	r24, 0x40	; 64
    1d42:	11 f0       	breq	.+4      	; 0x1d48 <EEPROM_readByte+0x90>
        return ERROR;
    1d44:	1d 82       	std	Y+5, r1	; 0x05
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1d48:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_readByteWithNACK>
    1d4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d50:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d52:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_getStatus>
    1d56:	88 35       	cpi	r24, 0x58	; 88
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <EEPROM_readByte+0xa6>
        return ERROR;
    1d5a:	1d 82       	std	Y+5, r1	; 0x05
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1d5e:	0e 94 33 12 	call	0x2466	; 0x2466 <TWI_stop>

    return SUCCESS;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <GPIO_setupPinDirection+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <GPIO_setupPinDirection+0x8>
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	6a 83       	std	Y+2, r22	; 0x02
    1d8a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 30       	cpi	r24, 0x08	; 8
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <GPIO_setupPinDirection+0x1c>
    1d92:	d5 c0       	rjmp	.+426    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	84 30       	cpi	r24, 0x04	; 4
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <GPIO_setupPinDirection+0x24>
    1d9a:	d1 c0       	rjmp	.+418    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3d 83       	std	Y+5, r19	; 0x05
    1da4:	2c 83       	std	Y+4, r18	; 0x04
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <GPIO_setupPinDirection+0x3a>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <GPIO_setupPinDirection+0xc0>
    1db2:	2c 81       	ldd	r18, Y+4	; 0x04
    1db4:	3d 81       	ldd	r19, Y+5	; 0x05
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <GPIO_setupPinDirection+0x4e>
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	71 f0       	breq	.+28     	; 0x1de0 <GPIO_setupPinDirection+0x68>
    1dc4:	bc c0       	rjmp	.+376    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <GPIO_setupPinDirection+0x5a>
    1dd0:	5f c0       	rjmp	.+190    	; 0x1e90 <GPIO_setupPinDirection+0x118>
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <GPIO_setupPinDirection+0x66>
    1ddc:	85 c0       	rjmp	.+266    	; 0x1ee8 <GPIO_setupPinDirection+0x170>
    1dde:	af c0       	rjmp	.+350    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	a1 f4       	brne	.+40     	; 0x1e0e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1de6:	aa e3       	ldi	r26, 0x3A	; 58
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ea e3       	ldi	r30, 0x3A	; 58
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 2e       	mov	r0, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <GPIO_setupPinDirection+0x8c>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <GPIO_setupPinDirection+0x88>
    1e08:	84 2b       	or	r24, r20
    1e0a:	8c 93       	st	X, r24
    1e0c:	98 c0       	rjmp	.+304    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e0e:	aa e3       	ldi	r26, 0x3A	; 58
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ea e3       	ldi	r30, 0x3A	; 58
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	48 2f       	mov	r20, r24
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	02 2e       	mov	r0, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <GPIO_setupPinDirection+0xb4>
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	0a 94       	dec	r0
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <GPIO_setupPinDirection+0xb0>
    1e30:	80 95       	com	r24
    1e32:	84 23       	and	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	83 c0       	rjmp	.+262    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	a1 f4       	brne	.+40     	; 0x1e66 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e3e:	a7 e3       	ldi	r26, 0x37	; 55
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e7 e3       	ldi	r30, 0x37	; 55
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <GPIO_setupPinDirection+0xe4>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <GPIO_setupPinDirection+0xe0>
    1e60:	84 2b       	or	r24, r20
    1e62:	8c 93       	st	X, r24
    1e64:	6c c0       	rjmp	.+216    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e66:	a7 e3       	ldi	r26, 0x37	; 55
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e7 e3       	ldi	r30, 0x37	; 55
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	48 2f       	mov	r20, r24
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <GPIO_setupPinDirection+0x10c>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <GPIO_setupPinDirection+0x108>
    1e88:	80 95       	com	r24
    1e8a:	84 23       	and	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	57 c0       	rjmp	.+174    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	a1 f4       	brne	.+40     	; 0x1ebe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e96:	a4 e3       	ldi	r26, 0x34	; 52
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e4 e3       	ldi	r30, 0x34	; 52
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <GPIO_setupPinDirection+0x13c>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <GPIO_setupPinDirection+0x138>
    1eb8:	84 2b       	or	r24, r20
    1eba:	8c 93       	st	X, r24
    1ebc:	40 c0       	rjmp	.+128    	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ebe:	a4 e3       	ldi	r26, 0x34	; 52
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e4 e3       	ldi	r30, 0x34	; 52
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <GPIO_setupPinDirection+0x164>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <GPIO_setupPinDirection+0x160>
    1ee0:	80 95       	com	r24
    1ee2:	84 23       	and	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	2b c0       	rjmp	.+86     	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	a1 f4       	brne	.+40     	; 0x1f16 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1eee:	a1 e3       	ldi	r26, 0x31	; 49
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e1 e3       	ldi	r30, 0x31	; 49
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <GPIO_setupPinDirection+0x194>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <GPIO_setupPinDirection+0x190>
    1f10:	84 2b       	or	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f16:	a1 e3       	ldi	r26, 0x31	; 49
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e1 e3       	ldi	r30, 0x31	; 49
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <GPIO_setupPinDirection+0x1bc>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <GPIO_setupPinDirection+0x1b8>
    1f38:	80 95       	com	r24
    1f3a:	84 23       	and	r24, r20
    1f3c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <GPIO_writePin+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_writePin+0x8>
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
    1f60:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	88 30       	cpi	r24, 0x08	; 8
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <GPIO_writePin+0x1c>
    1f68:	d5 c0       	rjmp	.+426    	; 0x2114 <GPIO_writePin+0x1c6>
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	84 30       	cpi	r24, 0x04	; 4
    1f6e:	08 f0       	brcs	.+2      	; 0x1f72 <GPIO_writePin+0x24>
    1f70:	d1 c0       	rjmp	.+418    	; 0x2114 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3d 83       	std	Y+5, r19	; 0x05
    1f7a:	2c 83       	std	Y+4, r18	; 0x04
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <GPIO_writePin+0x3a>
    1f86:	43 c0       	rjmp	.+134    	; 0x200e <GPIO_writePin+0xc0>
    1f88:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <GPIO_writePin+0x4e>
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	71 f0       	breq	.+28     	; 0x1fb6 <GPIO_writePin+0x68>
    1f9a:	bc c0       	rjmp	.+376    	; 0x2114 <GPIO_writePin+0x1c6>
    1f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <GPIO_writePin+0x5a>
    1fa6:	5f c0       	rjmp	.+190    	; 0x2066 <GPIO_writePin+0x118>
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <GPIO_writePin+0x66>
    1fb2:	85 c0       	rjmp	.+266    	; 0x20be <GPIO_writePin+0x170>
    1fb4:	af c0       	rjmp	.+350    	; 0x2114 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1fbc:	ab e3       	ldi	r26, 0x3B	; 59
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	eb e3       	ldi	r30, 0x3B	; 59
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_writePin+0x8c>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_writePin+0x88>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	98 c0       	rjmp	.+304    	; 0x2114 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1fe4:	ab e3       	ldi	r26, 0x3B	; 59
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	eb e3       	ldi	r30, 0x3B	; 59
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_writePin+0xb4>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_writePin+0xb0>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	83 c0       	rjmp	.+262    	; 0x2114 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	a1 f4       	brne	.+40     	; 0x203c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2014:	a8 e3       	ldi	r26, 0x38	; 56
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e8 e3       	ldi	r30, 0x38	; 56
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_writePin+0xe4>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_writePin+0xe0>
    2036:	84 2b       	or	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	6c c0       	rjmp	.+216    	; 0x2114 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    203c:	a8 e3       	ldi	r26, 0x38	; 56
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e8 e3       	ldi	r30, 0x38	; 56
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <GPIO_writePin+0x10c>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <GPIO_writePin+0x108>
    205e:	80 95       	com	r24
    2060:	84 23       	and	r24, r20
    2062:	8c 93       	st	X, r24
    2064:	57 c0       	rjmp	.+174    	; 0x2114 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	a1 f4       	brne	.+40     	; 0x2094 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    206c:	a5 e3       	ldi	r26, 0x35	; 53
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e3       	ldi	r30, 0x35	; 53
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <GPIO_writePin+0x13c>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <GPIO_writePin+0x138>
    208e:	84 2b       	or	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	40 c0       	rjmp	.+128    	; 0x2114 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2094:	a5 e3       	ldi	r26, 0x35	; 53
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e3       	ldi	r30, 0x35	; 53
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <GPIO_writePin+0x164>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <GPIO_writePin+0x160>
    20b6:	80 95       	com	r24
    20b8:	84 23       	and	r24, r20
    20ba:	8c 93       	st	X, r24
    20bc:	2b c0       	rjmp	.+86     	; 0x2114 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	a1 f4       	brne	.+40     	; 0x20ec <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    20c4:	a2 e3       	ldi	r26, 0x32	; 50
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e2 e3       	ldi	r30, 0x32	; 50
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	48 2f       	mov	r20, r24
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <GPIO_writePin+0x194>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <GPIO_writePin+0x190>
    20e6:	84 2b       	or	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    20ec:	a2 e3       	ldi	r26, 0x32	; 50
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e2 e3       	ldi	r30, 0x32	; 50
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_writePin+0x1bc>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_writePin+0x1b8>
    210e:	80 95       	com	r24
    2110:	84 23       	and	r24, r20
    2112:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <GPIO_readPin+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <GPIO_readPin+0x8>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2136:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	88 30       	cpi	r24, 0x08	; 8
    213c:	08 f0       	brcs	.+2      	; 0x2140 <GPIO_readPin+0x1c>
    213e:	84 c0       	rjmp	.+264    	; 0x2248 <GPIO_readPin+0x124>
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	08 f0       	brcs	.+2      	; 0x2148 <GPIO_readPin+0x24>
    2146:	80 c0       	rjmp	.+256    	; 0x2248 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	3d 83       	std	Y+5, r19	; 0x05
    2150:	2c 83       	std	Y+4, r18	; 0x04
    2152:	4c 81       	ldd	r20, Y+4	; 0x04
    2154:	5d 81       	ldd	r21, Y+5	; 0x05
    2156:	41 30       	cpi	r20, 0x01	; 1
    2158:	51 05       	cpc	r21, r1
    215a:	79 f1       	breq	.+94     	; 0x21ba <GPIO_readPin+0x96>
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	82 30       	cpi	r24, 0x02	; 2
    2162:	91 05       	cpc	r25, r1
    2164:	34 f4       	brge	.+12     	; 0x2172 <GPIO_readPin+0x4e>
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	21 15       	cp	r18, r1
    216c:	31 05       	cpc	r19, r1
    216e:	69 f0       	breq	.+26     	; 0x218a <GPIO_readPin+0x66>
    2170:	6b c0       	rjmp	.+214    	; 0x2248 <GPIO_readPin+0x124>
    2172:	4c 81       	ldd	r20, Y+4	; 0x04
    2174:	5d 81       	ldd	r21, Y+5	; 0x05
    2176:	42 30       	cpi	r20, 0x02	; 2
    2178:	51 05       	cpc	r21, r1
    217a:	b9 f1       	breq	.+110    	; 0x21ea <GPIO_readPin+0xc6>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <GPIO_readPin+0x64>
    2186:	49 c0       	rjmp	.+146    	; 0x221a <GPIO_readPin+0xf6>
    2188:	5f c0       	rjmp	.+190    	; 0x2248 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    218a:	e9 e3       	ldi	r30, 0x39	; 57
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a9 01       	movw	r20, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <GPIO_readPin+0x7e>
    219e:	55 95       	asr	r21
    21a0:	47 95       	ror	r20
    21a2:	8a 95       	dec	r24
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <GPIO_readPin+0x7a>
    21a6:	ca 01       	movw	r24, r20
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	90 70       	andi	r25, 0x00	; 0
    21ac:	88 23       	and	r24, r24
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	49 c0       	rjmp	.+146    	; 0x2248 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21b6:	19 82       	std	Y+1, r1	; 0x01
    21b8:	47 c0       	rjmp	.+142    	; 0x2248 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    21ba:	e6 e3       	ldi	r30, 0x36	; 54
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a9 01       	movw	r20, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <GPIO_readPin+0xae>
    21ce:	55 95       	asr	r21
    21d0:	47 95       	ror	r20
    21d2:	8a 95       	dec	r24
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <GPIO_readPin+0xaa>
    21d6:	ca 01       	movw	r24, r20
    21d8:	81 70       	andi	r24, 0x01	; 1
    21da:	90 70       	andi	r25, 0x00	; 0
    21dc:	88 23       	and	r24, r24
    21de:	19 f0       	breq	.+6      	; 0x21e6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	31 c0       	rjmp	.+98     	; 0x2248 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21e6:	19 82       	std	Y+1, r1	; 0x01
    21e8:	2f c0       	rjmp	.+94     	; 0x2248 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    21ea:	e3 e3       	ldi	r30, 0x33	; 51
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a9 01       	movw	r20, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <GPIO_readPin+0xde>
    21fe:	55 95       	asr	r21
    2200:	47 95       	ror	r20
    2202:	8a 95       	dec	r24
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <GPIO_readPin+0xda>
    2206:	ca 01       	movw	r24, r20
    2208:	81 70       	andi	r24, 0x01	; 1
    220a:	90 70       	andi	r25, 0x00	; 0
    220c:	88 23       	and	r24, r24
    220e:	19 f0       	breq	.+6      	; 0x2216 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	19 c0       	rjmp	.+50     	; 0x2248 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	17 c0       	rjmp	.+46     	; 0x2248 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    221a:	e0 e3       	ldi	r30, 0x30	; 48
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a9 01       	movw	r20, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <GPIO_readPin+0x10e>
    222e:	55 95       	asr	r21
    2230:	47 95       	ror	r20
    2232:	8a 95       	dec	r24
    2234:	e2 f7       	brpl	.-8      	; 0x222e <GPIO_readPin+0x10a>
    2236:	ca 01       	movw	r24, r20
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	90 70       	andi	r25, 0x00	; 0
    223c:	88 23       	and	r24, r24
    223e:	19 f0       	breq	.+6      	; 0x2246 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2246:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <GPIO_setupPortDirection+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <GPIO_setupPortDirection+0x8>
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	90 f5       	brcc	.+100    	; 0x22d4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3c 83       	std	Y+4, r19	; 0x04
    2278:	2b 83       	std	Y+3, r18	; 0x03
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	d1 f0       	breq	.+52     	; 0x22b8 <GPIO_setupPortDirection+0x5e>
    2284:	2b 81       	ldd	r18, Y+3	; 0x03
    2286:	3c 81       	ldd	r19, Y+4	; 0x04
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	2c f4       	brge	.+10     	; 0x2298 <GPIO_setupPortDirection+0x3e>
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	61 f0       	breq	.+24     	; 0x22ae <GPIO_setupPortDirection+0x54>
    2296:	1e c0       	rjmp	.+60     	; 0x22d4 <GPIO_setupPortDirection+0x7a>
    2298:	2b 81       	ldd	r18, Y+3	; 0x03
    229a:	3c 81       	ldd	r19, Y+4	; 0x04
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	81 f0       	breq	.+32     	; 0x22c2 <GPIO_setupPortDirection+0x68>
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	81 f0       	breq	.+32     	; 0x22cc <GPIO_setupPortDirection+0x72>
    22ac:	13 c0       	rjmp	.+38     	; 0x22d4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22ae:	ea e3       	ldi	r30, 0x3A	; 58
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	80 83       	st	Z, r24
    22b6:	0e c0       	rjmp	.+28     	; 0x22d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    22b8:	e7 e3       	ldi	r30, 0x37	; 55
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	80 83       	st	Z, r24
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    22c2:	e4 e3       	ldi	r30, 0x34	; 52
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	80 83       	st	Z, r24
    22ca:	04 c0       	rjmp	.+8      	; 0x22d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    22cc:	e1 e3       	ldi	r30, 0x31	; 49
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <GPIO_writePort+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <GPIO_writePort+0x8>
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	84 30       	cpi	r24, 0x04	; 4
    22f6:	90 f5       	brcc	.+100    	; 0x235c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	3c 83       	std	Y+4, r19	; 0x04
    2300:	2b 83       	std	Y+3, r18	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	91 05       	cpc	r25, r1
    230a:	d1 f0       	breq	.+52     	; 0x2340 <GPIO_writePort+0x5e>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	22 30       	cpi	r18, 0x02	; 2
    2312:	31 05       	cpc	r19, r1
    2314:	2c f4       	brge	.+10     	; 0x2320 <GPIO_writePort+0x3e>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	61 f0       	breq	.+24     	; 0x2336 <GPIO_writePort+0x54>
    231e:	1e c0       	rjmp	.+60     	; 0x235c <GPIO_writePort+0x7a>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	81 f0       	breq	.+32     	; 0x234a <GPIO_writePort+0x68>
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	83 30       	cpi	r24, 0x03	; 3
    2330:	91 05       	cpc	r25, r1
    2332:	81 f0       	breq	.+32     	; 0x2354 <GPIO_writePort+0x72>
    2334:	13 c0       	rjmp	.+38     	; 0x235c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2336:	eb e3       	ldi	r30, 0x3B	; 59
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	80 83       	st	Z, r24
    233e:	0e c0       	rjmp	.+28     	; 0x235c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2340:	e8 e3       	ldi	r30, 0x38	; 56
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 83       	st	Z, r24
    2348:	09 c0       	rjmp	.+18     	; 0x235c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    234a:	e5 e3       	ldi	r30, 0x35	; 53
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	80 83       	st	Z, r24
    2352:	04 c0       	rjmp	.+8      	; 0x235c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 83       	st	Z, r24
			break;
		}
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <GPIO_readPort+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <GPIO_readPort+0x8>
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2378:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	84 30       	cpi	r24, 0x04	; 4
    237e:	90 f5       	brcc	.+100    	; 0x23e4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3c 83       	std	Y+4, r19	; 0x04
    2388:	2b 83       	std	Y+3, r18	; 0x03
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	91 05       	cpc	r25, r1
    2392:	d1 f0       	breq	.+52     	; 0x23c8 <GPIO_readPort+0x5e>
    2394:	2b 81       	ldd	r18, Y+3	; 0x03
    2396:	3c 81       	ldd	r19, Y+4	; 0x04
    2398:	22 30       	cpi	r18, 0x02	; 2
    239a:	31 05       	cpc	r19, r1
    239c:	2c f4       	brge	.+10     	; 0x23a8 <GPIO_readPort+0x3e>
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	61 f0       	breq	.+24     	; 0x23be <GPIO_readPort+0x54>
    23a6:	1e c0       	rjmp	.+60     	; 0x23e4 <GPIO_readPort+0x7a>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <GPIO_readPort+0x68>
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	91 05       	cpc	r25, r1
    23ba:	81 f0       	breq	.+32     	; 0x23dc <GPIO_readPort+0x72>
    23bc:	13 c0       	rjmp	.+38     	; 0x23e4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    23be:	e9 e3       	ldi	r30, 0x39	; 57
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	0e c0       	rjmp	.+28     	; 0x23e4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    23c8:	e6 e3       	ldi	r30, 0x36	; 54
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    23d2:	e3 e3       	ldi	r30, 0x33	; 51
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    23dc:	e0 e3       	ldi	r30, 0x30	; 48
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <TWI_init+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
    TWBR = Config_Ptr->bit_rate;
    2402:	a0 e2       	ldi	r26, 0x20	; 32
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e9 81       	ldd	r30, Y+1	; 0x01
    2408:	fa 81       	ldd	r31, Y+2	; 0x02
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	8c 93       	st	X, r24
    TWSR |= (TWSR & ~ 0X03) ;
    240e:	a1 e2       	ldi	r26, 0x21	; 33
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e1 e2       	ldi	r30, 0x21	; 33
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	98 2f       	mov	r25, r24
    241a:	e1 e2       	ldi	r30, 0x21	; 33
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8c 7f       	andi	r24, 0xFC	; 252
    2422:	89 2b       	or	r24, r25
    2424:	8c 93       	st	X, r24
	
    TWAR = 	  (~0X01 & Config_Ptr->address );
    2426:	a2 e2       	ldi	r26, 0x22	; 34
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	81 81       	ldd	r24, Z+1	; 0x01
    2430:	8e 7f       	andi	r24, 0xFE	; 254
    2432:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2434:	e6 e5       	ldi	r30, 0x56	; 86
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	80 83       	st	Z, r24
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <TWI_start>:

void TWI_start(void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    244e:	e6 e5       	ldi	r30, 0x56	; 86
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	84 ea       	ldi	r24, 0xA4	; 164
    2454:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2456:	e6 e5       	ldi	r30, 0x56	; 86
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	88 23       	and	r24, r24
    245e:	dc f7       	brge	.-10     	; 0x2456 <TWI_start+0x10>
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <TWI_stop>:

void TWI_stop(void)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    246e:	e6 e5       	ldi	r30, 0x56	; 86
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	84 e9       	ldi	r24, 0x94	; 148
    2474:	80 83       	st	Z, r24
}
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2488:	e3 e2       	ldi	r30, 0x23	; 35
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2490:	e6 e5       	ldi	r30, 0x56	; 86
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	84 e8       	ldi	r24, 0x84	; 132
    2496:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2498:	e6 e5       	ldi	r30, 0x56	; 86
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	88 23       	and	r24, r24
    24a0:	dc f7       	brge	.-10     	; 0x2498 <TWI_writeByte+0x1c>
}
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    24b2:	e6 e5       	ldi	r30, 0x56	; 86
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	84 ec       	ldi	r24, 0xC4	; 196
    24b8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    24ba:	e6 e5       	ldi	r30, 0x56	; 86
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	dc f7       	brge	.-10     	; 0x24ba <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    24c4:	e3 e2       	ldi	r30, 0x23	; 35
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
}
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    24d8:	e6 e5       	ldi	r30, 0x56	; 86
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	84 e8       	ldi	r24, 0x84	; 132
    24de:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    24e0:	e6 e5       	ldi	r30, 0x56	; 86
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	dc f7       	brge	.-10     	; 0x24e0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    24ea:	e3 e2       	ldi	r30, 0x23	; 35
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2500:	e1 e2       	ldi	r30, 0x21	; 33
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	88 7f       	andi	r24, 0xF8	; 248
    2508:	89 83       	std	Y+1, r24	; 0x01
    return status;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
}
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <main>:
#include "Control_ECU.h"



int main()
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	start();
    251c:	0e 94 a3 05 	call	0xb46	; 0xb46 <start>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <__vector_9>:
/*******************************************************************************
 *                                ISR                                          *
 *******************************************************************************/
/* Timer1 OVERFLOW mode */
ISR(TIMER1_OVF_vect)
{
    252a:	1f 92       	push	r1
    252c:	0f 92       	push	r0
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	0f 92       	push	r0
    2532:	11 24       	eor	r1, r1
    2534:	2f 93       	push	r18
    2536:	3f 93       	push	r19
    2538:	4f 93       	push	r20
    253a:	5f 93       	push	r21
    253c:	6f 93       	push	r22
    253e:	7f 93       	push	r23
    2540:	8f 93       	push	r24
    2542:	9f 93       	push	r25
    2544:	af 93       	push	r26
    2546:	bf 93       	push	r27
    2548:	ef 93       	push	r30
    254a:	ff 93       	push	r31
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    2554:	80 91 72 00 	lds	r24, 0x0072
    2558:	90 91 73 00 	lds	r25, 0x0073
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	29 f0       	breq	.+10     	; 0x256a <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
    2560:	e0 91 72 00 	lds	r30, 0x0072
    2564:	f0 91 73 00 	lds	r31, 0x0073
    2568:	09 95       	icall
	}
}
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	bf 91       	pop	r27
    2574:	af 91       	pop	r26
    2576:	9f 91       	pop	r25
    2578:	8f 91       	pop	r24
    257a:	7f 91       	pop	r23
    257c:	6f 91       	pop	r22
    257e:	5f 91       	pop	r21
    2580:	4f 91       	pop	r20
    2582:	3f 91       	pop	r19
    2584:	2f 91       	pop	r18
    2586:	0f 90       	pop	r0
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	0f 90       	pop	r0
    258c:	1f 90       	pop	r1
    258e:	18 95       	reti

00002590 <__vector_7>:

/* Timer1 COMPARE mode */
ISR(TIMER1_COMPA_vect)
{
    2590:	1f 92       	push	r1
    2592:	0f 92       	push	r0
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	0f 92       	push	r0
    2598:	11 24       	eor	r1, r1
    259a:	2f 93       	push	r18
    259c:	3f 93       	push	r19
    259e:	4f 93       	push	r20
    25a0:	5f 93       	push	r21
    25a2:	6f 93       	push	r22
    25a4:	7f 93       	push	r23
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	af 93       	push	r26
    25ac:	bf 93       	push	r27
    25ae:	ef 93       	push	r30
    25b0:	ff 93       	push	r31
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    25ba:	80 91 72 00 	lds	r24, 0x0072
    25be:	90 91 73 00 	lds	r25, 0x0073
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <__vector_7+0x40>
	{
		(*g_Timer1CallBackPtr)();
    25c6:	e0 91 72 00 	lds	r30, 0x0072
    25ca:	f0 91 73 00 	lds	r31, 0x0073
    25ce:	09 95       	icall
	}
}
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	7f 91       	pop	r23
    25e2:	6f 91       	pop	r22
    25e4:	5f 91       	pop	r21
    25e6:	4f 91       	pop	r20
    25e8:	3f 91       	pop	r19
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <Timer1_init>:
/*
 * Description: A function that initialize a timer1 with dynamic configurations.
 *
 */
void Timer1_init(const Timer1_Configtype * Config_Ptr)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <Timer1_init+0x6>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
        TCCR1A =0;
    2604:	ef e4       	ldi	r30, 0x4F	; 79
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    260a:	af e4       	ldi	r26, 0x4F	; 79
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ef e4       	ldi	r30, 0x4F	; 79
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	88 60       	ori	r24, 0x08	; 8
    2616:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2618:	af e4       	ldi	r26, 0x4F	; 79
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ef e4       	ldi	r30, 0x4F	; 79
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	84 60       	ori	r24, 0x04	; 4
    2624:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->prescale;
    2626:	ae e4       	ldi	r26, 0x4E	; 78
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e9 81       	ldd	r30, Y+1	; 0x01
    262c:	fa 81       	ldd	r31, Y+2	; 0x02
    262e:	85 81       	ldd	r24, Z+5	; 0x05
    2630:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initialvalue;
    2632:	ac e4       	ldi	r26, 0x4C	; 76
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e9 81       	ldd	r30, Y+1	; 0x01
    2638:	fa 81       	ldd	r31, Y+2	; 0x02
    263a:	81 81       	ldd	r24, Z+1	; 0x01
    263c:	92 81       	ldd	r25, Z+2	; 0x02
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24

		if( (Config_Ptr -> mode) == NORMAL )
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	79 f4       	brne	.+30     	; 0x266c <Timer1_init+0x76>
		{
			/* Enable interrupts for overflow mode */
			SET_BIT(TIMSK,TOIE1);
    264e:	a9 e5       	ldi	r26, 0x59	; 89
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e9 e5       	ldi	r30, 0x59	; 89
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	84 60       	ori	r24, 0x04	; 4
    265a:	8c 93       	st	X, r24
			/* Enable overflow flag */
			SET_BIT(TIFR,TOV1);
    265c:	a8 e5       	ldi	r26, 0x58	; 88
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e8 e5       	ldi	r30, 0x58	; 88
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	84 60       	ori	r24, 0x04	; 4
    2668:	8c 93       	st	X, r24
    266a:	23 c0       	rjmp	.+70     	; 0x26b2 <Timer1_init+0xbc>
		}
		else if ( (Config_Ptr -> mode) == COMPARE )
    266c:	e9 81       	ldd	r30, Y+1	; 0x01
    266e:	fa 81       	ldd	r31, Y+2	; 0x02
    2670:	80 81       	ld	r24, Z
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	f1 f4       	brne	.+60     	; 0x26b2 <Timer1_init+0xbc>
		{
			SET_BIT(TCCR1B,WGM12);
    2676:	ae e4       	ldi	r26, 0x4E	; 78
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ee e4       	ldi	r30, 0x4E	; 78
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	88 60       	ori	r24, 0x08	; 8
    2682:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> comparevalue;
    2684:	aa e4       	ldi	r26, 0x4A	; 74
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e9 81       	ldd	r30, Y+1	; 0x01
    268a:	fa 81       	ldd	r31, Y+2	; 0x02
    268c:	83 81       	ldd	r24, Z+3	; 0x03
    268e:	94 81       	ldd	r25, Z+4	; 0x04
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	9c 93       	st	X, r25
    2694:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
    2696:	a9 e5       	ldi	r26, 0x59	; 89
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e9 e5       	ldi	r30, 0x59	; 89
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 61       	ori	r24, 0x10	; 16
    26a2:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    26a4:	a8 e5       	ldi	r26, 0x58	; 88
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	80 61       	ori	r24, 0x10	; 16
    26b0:	8c 93       	st	X, r24
		}
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <Timer1_deInit>:
/*
 * Description: A function that Deinitialize a timer1 with dynamic configurations.
 *
 */
void Timer1_deInit(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
    26c4:	ef e4       	ldi	r30, 0x4F	; 79
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	10 82       	st	Z, r1
	TCCR1B = 0; /* disable clock */
    26ca:	ee e4       	ldi	r30, 0x4E	; 78
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	10 82       	st	Z, r1
	TCNT1 = 0;
    26d0:	ec e4       	ldi	r30, 0x4C	; 76
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	11 82       	std	Z+1, r1	; 0x01
    26d6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    26d8:	a9 e5       	ldi	r26, 0x59	; 89
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e9 e5       	ldi	r30, 0x59	; 89
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	8b 7f       	andi	r24, 0xFB	; 251
    26e4:	8c 93       	st	X, r24
	OCR1A = 0;  /* clear compare value for CTC mode */
    26e6:	ea e4       	ldi	r30, 0x4A	; 74
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	11 82       	std	Z+1, r1	; 0x01
    26ec:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    26ee:	a9 e5       	ldi	r26, 0x59	; 89
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e9 e5       	ldi	r30, 0x59	; 89
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	8f 7e       	andi	r24, 0xEF	; 239
    26fa:	8c 93       	st	X, r24
	g_Timer1CallBackPtr = NULL_PTR;
    26fc:	10 92 73 00 	sts	0x0073, r1
    2700:	10 92 72 00 	sts	0x0072, r1
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <Timer1_setCallBack>:
/*
 * Description: A function that Call Back A Function.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <Timer1_setCallBack+0x6>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	90 93 73 00 	sts	0x0073, r25
    2720:	80 93 72 00 	sts	0x0072, r24
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <Timer1_setValue>:
/*
 * Description: A function that set a new value.
 *
 */
void Timer1_setValue (uint8 newValue)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	0f 92       	push	r0
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = newValue;
    273a:	ec e4       	ldi	r30, 0x4C	; 76
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
}
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <Timer1_clearValue>:
/*
 * Description: A function that clear the value.
 *
 */
void Timer1_clearValue(void)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2758:	ec e4       	ldi	r30, 0x4C	; 76
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	11 82       	std	Z+1, r1	; 0x01
    275e:	10 82       	st	Z, r1
}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <UART_init+0x6>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2774:	aa e2       	ldi	r26, 0x2A	; 42
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ea e2       	ldi	r30, 0x2A	; 42
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	88 61       	ori	r24, 0x18	; 24
    2780:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
    2782:	a0 e4       	ldi	r26, 0x40	; 64
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e0 e4       	ldi	r30, 0x40	; 64
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	80 68       	ori	r24, 0x80	; 128
    278e:	8c 93       	st	X, r24
    UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2790:	a0 e4       	ldi	r26, 0x40	; 64
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e0 e4       	ldi	r30, 0x40	; 64
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	86 60       	ori	r24, 0x06	; 6
    279c:	8c 93       	st	X, r24

    UCSRC |= ((Config_Ptr->parity) << 4); //Choose Parity Bits
    279e:	a0 e4       	ldi	r26, 0x40	; 64
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e0 e4       	ldi	r30, 0x40	; 64
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	28 2f       	mov	r18, r24
    27aa:	e9 81       	ldd	r30, Y+1	; 0x01
    27ac:	fa 81       	ldd	r31, Y+2	; 0x02
    27ae:	81 81       	ldd	r24, Z+1	; 0x01
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	82 95       	swap	r24
    27b6:	92 95       	swap	r25
    27b8:	90 7f       	andi	r25, 0xF0	; 240
    27ba:	98 27       	eor	r25, r24
    27bc:	80 7f       	andi	r24, 0xF0	; 240
    27be:	98 27       	eor	r25, r24
    27c0:	82 2b       	or	r24, r18
    27c2:	8c 93       	st	X, r24


    if(Config_Ptr->bit_data)
    27c4:	e9 81       	ldd	r30, Y+1	; 0x01
    27c6:	fa 81       	ldd	r31, Y+2	; 0x02
    27c8:	80 81       	ld	r24, Z
    27ca:	88 23       	and	r24, r24
    27cc:	29 f1       	breq	.+74     	; 0x2818 <UART_init+0xb2>
    {
    	UCSRC |= ((Config_Ptr->bit_data) << 6);
    27ce:	a0 e4       	ldi	r26, 0x40	; 64
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e0 e4       	ldi	r30, 0x40	; 64
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	28 2f       	mov	r18, r24
    27da:	e9 81       	ldd	r30, Y+1	; 0x01
    27dc:	fa 81       	ldd	r31, Y+2	; 0x02
    27de:	80 81       	ld	r24, Z
    27e0:	88 2f       	mov	r24, r24
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	00 24       	eor	r0, r0
    27e6:	96 95       	lsr	r25
    27e8:	87 95       	ror	r24
    27ea:	07 94       	ror	r0
    27ec:	96 95       	lsr	r25
    27ee:	87 95       	ror	r24
    27f0:	07 94       	ror	r0
    27f2:	98 2f       	mov	r25, r24
    27f4:	80 2d       	mov	r24, r0
    27f6:	82 2b       	or	r24, r18
    27f8:	8c 93       	st	X, r24

    	UCSRC |= (1<<UCPOL);
    27fa:	a0 e4       	ldi	r26, 0x40	; 64
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e0 e4       	ldi	r30, 0x40	; 64
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	81 60       	ori	r24, 0x01	; 1
    2806:	8c 93       	st	X, r24

    	UBRRH = (Asynchronous_Normal >> 8);
    2808:	e0 e4       	ldi	r30, 0x40	; 64
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	10 82       	st	Z, r1
    	UBRRL = Asynchronous_Normal;
    280e:	e9 e2       	ldi	r30, 0x29	; 41
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	87 e6       	ldi	r24, 0x67	; 103
    2814:	80 83       	st	Z, r24
    2816:	25 c0       	rjmp	.+74     	; 0x2862 <UART_init+0xfc>
    }
	
    else
    {
    	UCSRC &= ~((Config_Ptr->bit_data) << 6);
    2818:	a0 e4       	ldi	r26, 0x40	; 64
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e0 e4       	ldi	r30, 0x40	; 64
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	80 81       	ld	r24, Z
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	00 24       	eor	r0, r0
    2830:	96 95       	lsr	r25
    2832:	87 95       	ror	r24
    2834:	07 94       	ror	r0
    2836:	96 95       	lsr	r25
    2838:	87 95       	ror	r24
    283a:	07 94       	ror	r0
    283c:	98 2f       	mov	r25, r24
    283e:	80 2d       	mov	r24, r0
    2840:	80 95       	com	r24
    2842:	82 23       	and	r24, r18
    2844:	8c 93       	st	X, r24
    	UCSRA |= (1<<U2X);
    2846:	ab e2       	ldi	r26, 0x2B	; 43
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	eb e2       	ldi	r30, 0x2B	; 43
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	82 60       	ori	r24, 0x02	; 2
    2852:	8c 93       	st	X, r24
    	UBRRH = (Asynchronous_doubleSpeed >> 8);
    2854:	e0 e4       	ldi	r30, 0x40	; 64
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	10 82       	st	Z, r1
    	UBRRL =Asynchronous_doubleSpeed;
    285a:	e9 e2       	ldi	r30, 0x29	; 41
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	83 e3       	ldi	r24, 0x33	; 51
    2860:	80 83       	st	Z, r24
    }
}
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2878:	eb e2       	ldi	r30, 0x2B	; 43
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	80 72       	andi	r24, 0x20	; 32
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	b9 f3       	breq	.-18     	; 0x2878 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    288a:	ec e2       	ldi	r30, 0x2C	; 44
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    28a2:	eb e2       	ldi	r30, 0x2B	; 43
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	88 23       	and	r24, r24
    28aa:	dc f7       	brge	.-10     	; 0x28a2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    28ac:	ec e2       	ldi	r30, 0x2C	; 44
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
}
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <UART_sendString+0x6>
    28be:	0f 92       	push	r0
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9b 83       	std	Y+3, r25	; 0x03
    28c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28c8:	19 82       	std	Y+1, r1	; 0x01
    28ca:	0e c0       	rjmp	.+28     	; 0x28e8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	9b 81       	ldd	r25, Y+3	; 0x03
    28d6:	fc 01       	movw	r30, r24
    28d8:	e2 0f       	add	r30, r18
    28da:	f3 1f       	adc	r31, r19
    28dc:	80 81       	ld	r24, Z
    28de:	0e 94 36 14 	call	0x286c	; 0x286c <UART_sendByte>
		i++;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	9b 81       	ldd	r25, Y+3	; 0x03
    28f2:	fc 01       	movw	r30, r24
    28f4:	e2 0f       	add	r30, r18
    28f6:	f3 1f       	adc	r31, r19
    28f8:	80 81       	ld	r24, Z
    28fa:	88 23       	and	r24, r24
    28fc:	39 f7       	brne	.-50     	; 0x28cc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <UART_receiveString+0xa>
    2914:	0f 92       	push	r0
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	9b 83       	std	Y+3, r25	; 0x03
    291c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    291e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	9b 81       	ldd	r25, Y+3	; 0x03
    292a:	8c 01       	movw	r16, r24
    292c:	02 0f       	add	r16, r18
    292e:	13 1f       	adc	r17, r19
    2930:	0e 94 4d 14 	call	0x289a	; 0x289a <UART_recieveByte>
    2934:	f8 01       	movw	r30, r16
    2936:	80 83       	st	Z, r24
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	9b 81       	ldd	r25, Y+3	; 0x03
    294a:	8c 01       	movw	r16, r24
    294c:	02 0f       	add	r16, r18
    294e:	13 1f       	adc	r17, r19
    2950:	0e 94 4d 14 	call	0x289a	; 0x289a <UART_recieveByte>
    2954:	f8 01       	movw	r30, r16
    2956:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	9b 81       	ldd	r25, Y+3	; 0x03
    2962:	fc 01       	movw	r30, r24
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	80 81       	ld	r24, Z
    296a:	83 32       	cpi	r24, 0x23	; 35
    296c:	31 f7       	brne	.-52     	; 0x293a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	10 82       	st	Z, r1
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <__prologue_saves__>:
    2990:	2f 92       	push	r2
    2992:	3f 92       	push	r3
    2994:	4f 92       	push	r4
    2996:	5f 92       	push	r5
    2998:	6f 92       	push	r6
    299a:	7f 92       	push	r7
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	ca 1b       	sub	r28, r26
    29ba:	db 0b       	sbc	r29, r27
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	09 94       	ijmp

000029c8 <__epilogue_restores__>:
    29c8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ca:	39 88       	ldd	r3, Y+17	; 0x11
    29cc:	48 88       	ldd	r4, Y+16	; 0x10
    29ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29da:	b9 84       	ldd	r11, Y+9	; 0x09
    29dc:	c8 84       	ldd	r12, Y+8	; 0x08
    29de:	df 80       	ldd	r13, Y+7	; 0x07
    29e0:	ee 80       	ldd	r14, Y+6	; 0x06
    29e2:	fd 80       	ldd	r15, Y+5	; 0x05
    29e4:	0c 81       	ldd	r16, Y+4	; 0x04
    29e6:	1b 81       	ldd	r17, Y+3	; 0x03
    29e8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ea:	b9 81       	ldd	r27, Y+1	; 0x01
    29ec:	ce 0f       	add	r28, r30
    29ee:	d1 1d       	adc	r29, r1
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	ed 01       	movw	r28, r26
    29fc:	08 95       	ret

000029fe <_exit>:
    29fe:	f8 94       	cli

00002a00 <__stop_program>:
    2a00:	ff cf       	rjmp	.-2      	; 0x2a00 <__stop_program>
