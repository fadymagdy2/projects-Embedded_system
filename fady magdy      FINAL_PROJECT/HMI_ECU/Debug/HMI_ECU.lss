
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00003e46  00003eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800146  00800146  00003fc0  2**0
                  ALLOC
  3 .stab         00003540  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011d1  00000000  00000000  00007500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000086d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 1c 	call	0x38ce	; 0x38ce <main>
      8a:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e3       	ldi	r26, 0x35	; 53
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 1e 	jmp	0x3d9a	; 0x3d9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <start>:
int counter;

Timer1_Configtype timerConfig = {COMPARE,0,7813,Prescale_1024};
UART_ConfigType uartConfig = {Asynchronous,Even,one};

void start(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ce 5e       	subi	r28, 0xEE	; 238
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24

	LCD_init();
     b6e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_init>
	UART_init(&uartConfig);
     b72:	83 e4       	ldi	r24, 0x43	; 67
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <UART_init>



	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;

	Timer1_setCallBack(timerHandler);
     b7a:	8e ef       	ldi	r24, 0xFE	; 254
     b7c:	92 e1       	ldi	r25, 0x12	; 18
     b7e:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <Timer1_setCallBack>
     b82:	ba c3       	rjmp	.+1908   	; 0x12f8 <start+0x7b2>

	while(passwordVerified == 0)
	{
		LCD_clearScreen();
     b84:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
		LCD_displayString("Plz enter pass");
     b88:	80 e6       	ldi	r24, 0x60	; 96
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>


		enterPassword(password);
     b90:	ce 01       	movw	r24, r28
     b92:	8b 51       	subi	r24, 0x1B	; 27
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
     b9a:	fe 01       	movw	r30, r28
     b9c:	e3 52       	subi	r30, 0x23	; 35
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a8 e4       	ldi	r26, 0x48	; 72
     ba6:	b2 e4       	ldi	r27, 0x42	; 66
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	a2 83       	std	Z+2, r26	; 0x02
     bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	8e 01       	movw	r16, r28
     bb2:	07 52       	subi	r16, 0x27	; 39
     bb4:	1f 4f       	sbci	r17, 0xFF	; 255
     bb6:	fe 01       	movw	r30, r28
     bb8:	e3 52       	subi	r30, 0x23	; 35
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	60 81       	ld	r22, Z
     bbe:	71 81       	ldd	r23, Z+1	; 0x01
     bc0:	82 81       	ldd	r24, Z+2	; 0x02
     bc2:	93 81       	ldd	r25, Z+3	; 0x03
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a ef       	ldi	r20, 0xFA	; 250
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	f8 01       	movw	r30, r16
     bd6:	80 83       	st	Z, r24
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	a2 83       	std	Z+2, r26	; 0x02
     bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bde:	fe 01       	movw	r30, r28
     be0:	e7 52       	subi	r30, 0x27	; 39
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	44 f4       	brge	.+16     	; 0xc0c <start+0xc6>
		__ticks = 1;
     bfc:	fe 01       	movw	r30, r28
     bfe:	e9 52       	subi	r30, 0x29	; 41
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	91 83       	std	Z+1, r25	; 0x01
     c08:	80 83       	st	Z, r24
     c0a:	64 c0       	rjmp	.+200    	; 0xcd4 <start+0x18e>
	else if (__tmp > 65535)
     c0c:	fe 01       	movw	r30, r28
     c0e:	e7 52       	subi	r30, 0x27	; 39
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	0c f0       	brlt	.+2      	; 0xc2c <start+0xe6>
     c2a:	43 c0       	rjmp	.+134    	; 0xcb2 <start+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2c:	fe 01       	movw	r30, r28
     c2e:	e3 52       	subi	r30, 0x23	; 35
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	8e 01       	movw	r16, r28
     c4c:	09 52       	subi	r16, 0x29	; 41
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	f8 01       	movw	r30, r16
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	80 83       	st	Z, r24
     c62:	1f c0       	rjmp	.+62     	; 0xca2 <start+0x15c>
     c64:	fe 01       	movw	r30, r28
     c66:	eb 52       	subi	r30, 0x2B	; 43
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	88 ec       	ldi	r24, 0xC8	; 200
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c72:	fe 01       	movw	r30, r28
     c74:	eb 52       	subi	r30, 0x2B	; 43
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <start+0x136>
     c80:	fe 01       	movw	r30, r28
     c82:	eb 52       	subi	r30, 0x2B	; 43
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8a:	de 01       	movw	r26, r28
     c8c:	a9 52       	subi	r26, 0x29	; 41
     c8e:	bf 4f       	sbci	r27, 0xFF	; 255
     c90:	fe 01       	movw	r30, r28
     c92:	e9 52       	subi	r30, 0x29	; 41
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	fe 01       	movw	r30, r28
     ca4:	e9 52       	subi	r30, 0x29	; 41
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	91 81       	ldd	r25, Z+1	; 0x01
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	d1 f6       	brne	.-76     	; 0xc64 <start+0x11e>
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <start+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	8e 01       	movw	r16, r28
     cb4:	09 52       	subi	r16, 0x29	; 41
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e7 52       	subi	r30, 0x27	; 39
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	f8 01       	movw	r30, r16
     cd0:	91 83       	std	Z+1, r25	; 0x01
     cd2:	80 83       	st	Z, r24
     cd4:	de 01       	movw	r26, r28
     cd6:	ad 52       	subi	r26, 0x2D	; 45
     cd8:	bf 4f       	sbci	r27, 0xFF	; 255
     cda:	fe 01       	movw	r30, r28
     cdc:	e9 52       	subi	r30, 0x29	; 41
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	8d 93       	st	X+, r24
     ce6:	9c 93       	st	X, r25
     ce8:	fe 01       	movw	r30, r28
     cea:	ed 52       	subi	r30, 0x2D	; 45
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <start+0x1ac>
     cf6:	fe 01       	movw	r30, r28
     cf8:	ed 52       	subi	r30, 0x2D	; 45
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword(password);
     d00:	ce 01       	movw	r24, r28
     d02:	8b 51       	subi	r24, 0x1B	; 27
     d04:	9f 4f       	sbci	r25, 0xFF	; 255
     d06:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>

		LCD_clearScreen();
     d0a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
		LCD_displayString("Confirm Pass");
     d0e:	8f e6       	ldi	r24, 0x6F	; 111
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
		enterPassword( confirmPassword );
     d16:	ce 01       	movw	r24, r28
     d18:	86 51       	subi	r24, 0x16	; 22
     d1a:	9f 4f       	sbci	r25, 0xFF	; 255
     d1c:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
     d20:	fe 01       	movw	r30, r28
     d22:	e1 53       	subi	r30, 0x31	; 49
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a8 e4       	ldi	r26, 0x48	; 72
     d2c:	b2 e4       	ldi	r27, 0x42	; 66
     d2e:	80 83       	st	Z, r24
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	a2 83       	std	Z+2, r26	; 0x02
     d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d36:	8e 01       	movw	r16, r28
     d38:	05 53       	subi	r16, 0x35	; 53
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	fe 01       	movw	r30, r28
     d3e:	e1 53       	subi	r30, 0x31	; 49
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	60 81       	ld	r22, Z
     d44:	71 81       	ldd	r23, Z+1	; 0x01
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	93 81       	ldd	r25, Z+3	; 0x03
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	4a ef       	ldi	r20, 0xFA	; 250
     d50:	54 e4       	ldi	r21, 0x44	; 68
     d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	f8 01       	movw	r30, r16
     d5c:	80 83       	st	Z, r24
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	a2 83       	std	Z+2, r26	; 0x02
     d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d64:	fe 01       	movw	r30, r28
     d66:	e5 53       	subi	r30, 0x35	; 53
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	93 81       	ldd	r25, Z+3	; 0x03
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	44 f4       	brge	.+16     	; 0xd92 <start+0x24c>
		__ticks = 1;
     d82:	fe 01       	movw	r30, r28
     d84:	e7 53       	subi	r30, 0x37	; 55
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
     d90:	64 c0       	rjmp	.+200    	; 0xe5a <start+0x314>
	else if (__tmp > 65535)
     d92:	fe 01       	movw	r30, r28
     d94:	e5 53       	subi	r30, 0x35	; 53
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	3f ef       	ldi	r19, 0xFF	; 255
     da4:	4f e7       	ldi	r20, 0x7F	; 127
     da6:	57 e4       	ldi	r21, 0x47	; 71
     da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dac:	18 16       	cp	r1, r24
     dae:	0c f0       	brlt	.+2      	; 0xdb2 <start+0x26c>
     db0:	43 c0       	rjmp	.+134    	; 0xe38 <start+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	fe 01       	movw	r30, r28
     db4:	e1 53       	subi	r30, 0x31	; 49
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	8e 01       	movw	r16, r28
     dd2:	07 53       	subi	r16, 0x37	; 55
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	f8 01       	movw	r30, r16
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	1f c0       	rjmp	.+62     	; 0xe28 <start+0x2e2>
     dea:	fe 01       	movw	r30, r28
     dec:	e9 53       	subi	r30, 0x39	; 57
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
     df8:	fe 01       	movw	r30, r28
     dfa:	e9 53       	subi	r30, 0x39	; 57
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <start+0x2bc>
     e06:	fe 01       	movw	r30, r28
     e08:	e9 53       	subi	r30, 0x39	; 57
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	de 01       	movw	r26, r28
     e12:	a7 53       	subi	r26, 0x37	; 55
     e14:	bf 4f       	sbci	r27, 0xFF	; 255
     e16:	fe 01       	movw	r30, r28
     e18:	e7 53       	subi	r30, 0x37	; 55
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	9c 93       	st	X, r25
     e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	fe 01       	movw	r30, r28
     e2a:	e7 53       	subi	r30, 0x37	; 55
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	d1 f6       	brne	.-76     	; 0xdea <start+0x2a4>
     e36:	27 c0       	rjmp	.+78     	; 0xe86 <start+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e38:	8e 01       	movw	r16, r28
     e3a:	07 53       	subi	r16, 0x37	; 55
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	fe 01       	movw	r30, r28
     e40:	e5 53       	subi	r30, 0x35	; 53
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	60 81       	ld	r22, Z
     e46:	71 81       	ldd	r23, Z+1	; 0x01
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	f8 01       	movw	r30, r16
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	80 83       	st	Z, r24
     e5a:	de 01       	movw	r26, r28
     e5c:	ab 53       	subi	r26, 0x3B	; 59
     e5e:	bf 4f       	sbci	r27, 0xFF	; 255
     e60:	fe 01       	movw	r30, r28
     e62:	e7 53       	subi	r30, 0x37	; 55
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	8d 93       	st	X+, r24
     e6c:	9c 93       	st	X, r25
     e6e:	fe 01       	movw	r30, r28
     e70:	eb 53       	subi	r30, 0x3B	; 59
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <start+0x332>
     e7c:	fe 01       	movw	r30, r28
     e7e:	eb 53       	subi	r30, 0x3B	; 59
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		sendPassword( confirmPassword );
     e86:	ce 01       	movw	r24, r28
     e88:	86 51       	subi	r24, 0x16	; 22
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>
     e90:	fe 01       	movw	r30, r28
     e92:	ef 53       	subi	r30, 0x3F	; 63
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a8 e4       	ldi	r26, 0x48	; 72
     e9c:	b2 e4       	ldi	r27, 0x42	; 66
     e9e:	80 83       	st	Z, r24
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	a2 83       	std	Z+2, r26	; 0x02
     ea4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea6:	8e 01       	movw	r16, r28
     ea8:	03 54       	subi	r16, 0x43	; 67
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	fe 01       	movw	r30, r28
     eae:	ef 53       	subi	r30, 0x3F	; 63
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	4a ef       	ldi	r20, 0xFA	; 250
     ec0:	54 e4       	ldi	r21, 0x44	; 68
     ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	a2 83       	std	Z+2, r26	; 0x02
     ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ed4:	fe 01       	movw	r30, r28
     ed6:	e3 54       	subi	r30, 0x43	; 67
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eee:	88 23       	and	r24, r24
     ef0:	44 f4       	brge	.+16     	; 0xf02 <start+0x3bc>
		__ticks = 1;
     ef2:	fe 01       	movw	r30, r28
     ef4:	e5 54       	subi	r30, 0x45	; 69
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	80 83       	st	Z, r24
     f00:	64 c0       	rjmp	.+200    	; 0xfca <start+0x484>
	else if (__tmp > 65535)
     f02:	fe 01       	movw	r30, r28
     f04:	e3 54       	subi	r30, 0x43	; 67
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	0c f0       	brlt	.+2      	; 0xf22 <start+0x3dc>
     f20:	43 c0       	rjmp	.+134    	; 0xfa8 <start+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	fe 01       	movw	r30, r28
     f24:	ef 53       	subi	r30, 0x3F	; 63
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8e 01       	movw	r16, r28
     f42:	05 54       	subi	r16, 0x45	; 69
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	f8 01       	movw	r30, r16
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
     f58:	1f c0       	rjmp	.+62     	; 0xf98 <start+0x452>
     f5a:	fe 01       	movw	r30, r28
     f5c:	e7 54       	subi	r30, 0x47	; 71
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	88 ec       	ldi	r24, 0xC8	; 200
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	fe 01       	movw	r30, r28
     f6a:	e7 54       	subi	r30, 0x47	; 71
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <start+0x42c>
     f76:	fe 01       	movw	r30, r28
     f78:	e7 54       	subi	r30, 0x47	; 71
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	de 01       	movw	r26, r28
     f82:	a5 54       	subi	r26, 0x45	; 69
     f84:	bf 4f       	sbci	r27, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	e5 54       	subi	r30, 0x45	; 69
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	11 96       	adiw	r26, 0x01	; 1
     f94:	9c 93       	st	X, r25
     f96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	fe 01       	movw	r30, r28
     f9a:	e5 54       	subi	r30, 0x45	; 69
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	d1 f6       	brne	.-76     	; 0xf5a <start+0x414>
     fa6:	27 c0       	rjmp	.+78     	; 0xff6 <start+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	8e 01       	movw	r16, r28
     faa:	05 54       	subi	r16, 0x45	; 69
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	fe 01       	movw	r30, r28
     fb0:	e3 54       	subi	r30, 0x43	; 67
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	f8 01       	movw	r30, r16
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
     fca:	de 01       	movw	r26, r28
     fcc:	a9 54       	subi	r26, 0x49	; 73
     fce:	bf 4f       	sbci	r27, 0xFF	; 255
     fd0:	fe 01       	movw	r30, r28
     fd2:	e5 54       	subi	r30, 0x45	; 69
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	8d 93       	st	X+, r24
     fdc:	9c 93       	st	X, r25
     fde:	fe 01       	movw	r30, r28
     fe0:	e9 54       	subi	r30, 0x49	; 73
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <start+0x4a2>
     fec:	fe 01       	movw	r30, r28
     fee:	e9 54       	subi	r30, 0x49	; 73
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		passwordVerified = UART_recieveByte();
     ff6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
     ffa:	fe 01       	movw	r30, r28
     ffc:	ec 51       	subi	r30, 0x1C	; 28
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 83       	st	Z, r24
    1002:	fe 01       	movw	r30, r28
    1004:	ed 54       	subi	r30, 0x4D	; 77
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a8 e4       	ldi	r26, 0x48	; 72
    100e:	b2 e4       	ldi	r27, 0x42	; 66
    1010:	80 83       	st	Z, r24
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	a2 83       	std	Z+2, r26	; 0x02
    1016:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1018:	8e 01       	movw	r16, r28
    101a:	01 55       	subi	r16, 0x51	; 81
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	ed 54       	subi	r30, 0x4D	; 77
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a ef       	ldi	r20, 0xFA	; 250
    1032:	54 e4       	ldi	r21, 0x44	; 68
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	f8 01       	movw	r30, r16
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	a2 83       	std	Z+2, r26	; 0x02
    1044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1046:	fe 01       	movw	r30, r28
    1048:	e1 55       	subi	r30, 0x51	; 81
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	44 f4       	brge	.+16     	; 0x1074 <start+0x52e>
		__ticks = 1;
    1064:	fe 01       	movw	r30, r28
    1066:	e3 55       	subi	r30, 0x53	; 83
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	64 c0       	rjmp	.+200    	; 0x113c <start+0x5f6>
	else if (__tmp > 65535)
    1074:	fe 01       	movw	r30, r28
    1076:	e1 55       	subi	r30, 0x51	; 81
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	0c f0       	brlt	.+2      	; 0x1094 <start+0x54e>
    1092:	43 c0       	rjmp	.+134    	; 0x111a <start+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	fe 01       	movw	r30, r28
    1096:	ed 54       	subi	r30, 0x4D	; 77
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8e 01       	movw	r16, r28
    10b4:	03 55       	subi	r16, 0x53	; 83
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	1f c0       	rjmp	.+62     	; 0x110a <start+0x5c4>
    10cc:	fe 01       	movw	r30, r28
    10ce:	e5 55       	subi	r30, 0x55	; 85
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    10da:	fe 01       	movw	r30, r28
    10dc:	e5 55       	subi	r30, 0x55	; 85
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <start+0x59e>
    10e8:	fe 01       	movw	r30, r28
    10ea:	e5 55       	subi	r30, 0x55	; 85
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	de 01       	movw	r26, r28
    10f4:	a3 55       	subi	r26, 0x53	; 83
    10f6:	bf 4f       	sbci	r27, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e3 55       	subi	r30, 0x53	; 83
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	fe 01       	movw	r30, r28
    110c:	e3 55       	subi	r30, 0x53	; 83
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	d1 f6       	brne	.-76     	; 0x10cc <start+0x586>
    1118:	28 c0       	rjmp	.+80     	; 0x116a <start+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	8e 01       	movw	r16, r28
    111c:	03 55       	subi	r16, 0x53	; 83
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	fe 01       	movw	r30, r28
    1122:	e1 55       	subi	r30, 0x51	; 81
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	f8 01       	movw	r30, r16
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	de 01       	movw	r26, r28
    113e:	a7 55       	subi	r26, 0x57	; 87
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	fe 01       	movw	r30, r28
    1144:	e3 55       	subi	r30, 0x53	; 83
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	9c 93       	st	X, r25
    1150:	8e 93       	st	-X, r24
    1152:	fe 01       	movw	r30, r28
    1154:	e7 55       	subi	r30, 0x57	; 87
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <start+0x616>
    1160:	fe 01       	movw	r30, r28
    1162:	e7 55       	subi	r30, 0x57	; 87
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);

		if(passwordVerified)
    116a:	fe 01       	movw	r30, r28
    116c:	ec 51       	subi	r30, 0x1C	; 28
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	39 f0       	breq	.+14     	; 0x1184 <start+0x63e>
		{
			LCD_clearScreen();
    1176:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
			LCD_displayString("Right Password");
    117a:	8c e7       	ldi	r24, 0x7C	; 124
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <start+0x64a>
		}

		else
		{
			LCD_clearScreen();
    1184:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1188:	8b e8       	ldi	r24, 0x8B	; 139
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    1190:	fe 01       	movw	r30, r28
    1192:	eb 55       	subi	r30, 0x5B	; 91
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e8       	ldi	r25, 0x80	; 128
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b5 e4       	ldi	r27, 0x45	; 69
    119e:	80 83       	st	Z, r24
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	a2 83       	std	Z+2, r26	; 0x02
    11a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	8e 01       	movw	r16, r28
    11a8:	0f 55       	subi	r16, 0x5F	; 95
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	fe 01       	movw	r30, r28
    11ae:	eb 55       	subi	r30, 0x5B	; 91
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a ef       	ldi	r20, 0xFA	; 250
    11c0:	54 e4       	ldi	r21, 0x44	; 68
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 83       	st	Z, r24
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	a2 83       	std	Z+2, r26	; 0x02
    11d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d4:	fe 01       	movw	r30, r28
    11d6:	ef 55       	subi	r30, 0x5F	; 95
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	44 f4       	brge	.+16     	; 0x1202 <start+0x6bc>
		__ticks = 1;
    11f2:	fe 01       	movw	r30, r28
    11f4:	e1 56       	subi	r30, 0x61	; 97
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	64 c0       	rjmp	.+200    	; 0x12ca <start+0x784>
	else if (__tmp > 65535)
    1202:	fe 01       	movw	r30, r28
    1204:	ef 55       	subi	r30, 0x5F	; 95
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	0c f0       	brlt	.+2      	; 0x1222 <start+0x6dc>
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <start+0x762>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	fe 01       	movw	r30, r28
    1224:	eb 55       	subi	r30, 0x5B	; 91
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8e 01       	movw	r16, r28
    1242:	01 56       	subi	r16, 0x61	; 97
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    1258:	1f c0       	rjmp	.+62     	; 0x1298 <start+0x752>
    125a:	fe 01       	movw	r30, r28
    125c:	e3 56       	subi	r30, 0x63	; 99
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	88 ec       	ldi	r24, 0xC8	; 200
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	fe 01       	movw	r30, r28
    126a:	e3 56       	subi	r30, 0x63	; 99
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <start+0x72c>
    1276:	fe 01       	movw	r30, r28
    1278:	e3 56       	subi	r30, 0x63	; 99
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	de 01       	movw	r26, r28
    1282:	a1 56       	subi	r26, 0x61	; 97
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	e1 56       	subi	r30, 0x61	; 97
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	11 96       	adiw	r26, 0x01	; 1
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	fe 01       	movw	r30, r28
    129a:	e1 56       	subi	r30, 0x61	; 97
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	d1 f6       	brne	.-76     	; 0x125a <start+0x714>
    12a6:	28 c0       	rjmp	.+80     	; 0x12f8 <start+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	8e 01       	movw	r16, r28
    12aa:	01 56       	subi	r16, 0x61	; 97
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	fe 01       	movw	r30, r28
    12b0:	ef 55       	subi	r30, 0x5F	; 95
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	f8 01       	movw	r30, r16
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    12ca:	de 01       	movw	r26, r28
    12cc:	a5 56       	subi	r26, 0x65	; 101
    12ce:	bf 4f       	sbci	r27, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	e1 56       	subi	r30, 0x61	; 97
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	9c 93       	st	X, r25
    12de:	8e 93       	st	-X, r24
    12e0:	fe 01       	movw	r30, r28
    12e2:	e5 56       	subi	r30, 0x65	; 101
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <start+0x7a4>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e5 56       	subi	r30, 0x65	; 101
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24

	uint8 password[5] , confirmPassword[5] , passwordVerified , command ;

	Timer1_setCallBack(timerHandler);

	while(passwordVerified == 0)
    12f8:	fe 01       	movw	r30, r28
    12fa:	ec 51       	subi	r30, 0x1C	; 28
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <start+0x7c0>
    1304:	3f cc       	rjmp	.-1922   	; 0xb84 <start+0x3e>

	}

	while(1)
	{
		optionsDisplay();
    1306:	0e 94 89 12 	call	0x2512	; 0x2512 <optionsDisplay>
		command = KEYPAD_getPressedKey();
    130a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <KEYPAD_getPressedKey>
    130e:	fe 01       	movw	r30, r28
    1310:	ed 51       	subi	r30, 0x1D	; 29
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 83       	st	Z, r24
    1316:	fe 01       	movw	r30, r28
    1318:	e9 56       	subi	r30, 0x69	; 105
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	aa ef       	ldi	r26, 0xFA	; 250
    1322:	b3 e4       	ldi	r27, 0x43	; 67
    1324:	80 83       	st	Z, r24
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	a2 83       	std	Z+2, r26	; 0x02
    132a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	8e 01       	movw	r16, r28
    132e:	0d 56       	subi	r16, 0x6D	; 109
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	fe 01       	movw	r30, r28
    1334:	e9 56       	subi	r30, 0x69	; 105
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	4a ef       	ldi	r20, 0xFA	; 250
    1346:	54 e4       	ldi	r21, 0x44	; 68
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	f8 01       	movw	r30, r16
    1352:	80 83       	st	Z, r24
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	a2 83       	std	Z+2, r26	; 0x02
    1358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    135a:	fe 01       	movw	r30, r28
    135c:	ed 56       	subi	r30, 0x6D	; 109
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	44 f4       	brge	.+16     	; 0x1388 <start+0x842>
		__ticks = 1;
    1378:	fe 01       	movw	r30, r28
    137a:	ef 56       	subi	r30, 0x6F	; 111
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	64 c0       	rjmp	.+200    	; 0x1450 <start+0x90a>
	else if (__tmp > 65535)
    1388:	fe 01       	movw	r30, r28
    138a:	ed 56       	subi	r30, 0x6D	; 109
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	0c f0       	brlt	.+2      	; 0x13a8 <start+0x862>
    13a6:	43 c0       	rjmp	.+134    	; 0x142e <start+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	fe 01       	movw	r30, r28
    13aa:	e9 56       	subi	r30, 0x69	; 105
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e2       	ldi	r20, 0x20	; 32
    13bc:	51 e4       	ldi	r21, 0x41	; 65
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8e 01       	movw	r16, r28
    13c8:	0f 56       	subi	r16, 0x6F	; 111
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	f8 01       	movw	r30, r16
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
    13de:	1f c0       	rjmp	.+62     	; 0x141e <start+0x8d8>
    13e0:	fe 01       	movw	r30, r28
    13e2:	e1 57       	subi	r30, 0x71	; 113
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	88 ec       	ldi	r24, 0xC8	; 200
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    13ee:	fe 01       	movw	r30, r28
    13f0:	e1 57       	subi	r30, 0x71	; 113
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <start+0x8b2>
    13fc:	fe 01       	movw	r30, r28
    13fe:	e1 57       	subi	r30, 0x71	; 113
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	de 01       	movw	r26, r28
    1408:	af 56       	subi	r26, 0x6F	; 111
    140a:	bf 4f       	sbci	r27, 0xFF	; 255
    140c:	fe 01       	movw	r30, r28
    140e:	ef 56       	subi	r30, 0x6F	; 111
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	9c 93       	st	X, r25
    141c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141e:	fe 01       	movw	r30, r28
    1420:	ef 56       	subi	r30, 0x6F	; 111
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	d1 f6       	brne	.-76     	; 0x13e0 <start+0x89a>
    142c:	27 c0       	rjmp	.+78     	; 0x147c <start+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	8e 01       	movw	r16, r28
    1430:	0f 56       	subi	r16, 0x6F	; 111
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	fe 01       	movw	r30, r28
    1436:	ed 56       	subi	r30, 0x6D	; 109
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	f8 01       	movw	r30, r16
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	de 01       	movw	r26, r28
    1452:	a3 57       	subi	r26, 0x73	; 115
    1454:	bf 4f       	sbci	r27, 0xFF	; 255
    1456:	fe 01       	movw	r30, r28
    1458:	ef 56       	subi	r30, 0x6F	; 111
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
    1460:	8d 93       	st	X+, r24
    1462:	9c 93       	st	X, r25
    1464:	fe 01       	movw	r30, r28
    1466:	e3 57       	subi	r30, 0x73	; 115
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <start+0x928>
    1472:	fe 01       	movw	r30, r28
    1474:	e3 57       	subi	r30, 0x73	; 115
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(command);
    147c:	fe 01       	movw	r30, r28
    147e:	ed 51       	subi	r30, 0x1D	; 29
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <UART_sendByte>
    1488:	fe 01       	movw	r30, r28
    148a:	e7 57       	subi	r30, 0x77	; 119
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a8 e4       	ldi	r26, 0x48	; 72
    1494:	b2 e4       	ldi	r27, 0x42	; 66
    1496:	80 83       	st	Z, r24
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a2 83       	std	Z+2, r26	; 0x02
    149c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	8e 01       	movw	r16, r28
    14a0:	0b 57       	subi	r16, 0x7B	; 123
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	fe 01       	movw	r30, r28
    14a6:	e7 57       	subi	r30, 0x77	; 119
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a ef       	ldi	r20, 0xFA	; 250
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	80 83       	st	Z, r24
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	a2 83       	std	Z+2, r26	; 0x02
    14ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14cc:	fe 01       	movw	r30, r28
    14ce:	eb 57       	subi	r30, 0x7B	; 123
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	44 f4       	brge	.+16     	; 0x14fa <start+0x9b4>
		__ticks = 1;
    14ea:	fe 01       	movw	r30, r28
    14ec:	ed 57       	subi	r30, 0x7D	; 125
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	80 83       	st	Z, r24
    14f8:	64 c0       	rjmp	.+200    	; 0x15c2 <start+0xa7c>
	else if (__tmp > 65535)
    14fa:	fe 01       	movw	r30, r28
    14fc:	eb 57       	subi	r30, 0x7B	; 123
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	4f e7       	ldi	r20, 0x7F	; 127
    150e:	57 e4       	ldi	r21, 0x47	; 71
    1510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1514:	18 16       	cp	r1, r24
    1516:	0c f0       	brlt	.+2      	; 0x151a <start+0x9d4>
    1518:	43 c0       	rjmp	.+134    	; 0x15a0 <start+0xa5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	fe 01       	movw	r30, r28
    151c:	e7 57       	subi	r30, 0x77	; 119
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8e 01       	movw	r16, r28
    153a:	0d 57       	subi	r16, 0x7D	; 125
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	f8 01       	movw	r30, r16
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
    1550:	1f c0       	rjmp	.+62     	; 0x1590 <start+0xa4a>
    1552:	fe 01       	movw	r30, r28
    1554:	ef 57       	subi	r30, 0x7F	; 127
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
    1560:	fe 01       	movw	r30, r28
    1562:	ef 57       	subi	r30, 0x7F	; 127
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <start+0xa24>
    156e:	fe 01       	movw	r30, r28
    1570:	ef 57       	subi	r30, 0x7F	; 127
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	de 01       	movw	r26, r28
    157a:	ad 57       	subi	r26, 0x7D	; 125
    157c:	bf 4f       	sbci	r27, 0xFF	; 255
    157e:	fe 01       	movw	r30, r28
    1580:	ed 57       	subi	r30, 0x7D	; 125
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	9c 93       	st	X, r25
    158e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	fe 01       	movw	r30, r28
    1592:	ed 57       	subi	r30, 0x7D	; 125
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	d1 f6       	brne	.-76     	; 0x1552 <start+0xa0c>
    159e:	28 c0       	rjmp	.+80     	; 0x15f0 <start+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a0:	8e 01       	movw	r16, r28
    15a2:	0d 57       	subi	r16, 0x7D	; 125
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	fe 01       	movw	r30, r28
    15a8:	eb 57       	subi	r30, 0x7B	; 123
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	f8 01       	movw	r30, r16
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	80 83       	st	Z, r24
    15c2:	de 01       	movw	r26, r28
    15c4:	a1 58       	subi	r26, 0x81	; 129
    15c6:	bf 4f       	sbci	r27, 0xFF	; 255
    15c8:	fe 01       	movw	r30, r28
    15ca:	ed 57       	subi	r30, 0x7D	; 125
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
    15d8:	fe 01       	movw	r30, r28
    15da:	e1 58       	subi	r30, 0x81	; 129
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <start+0xa9c>
    15e6:	fe 01       	movw	r30, r28
    15e8:	e1 58       	subi	r30, 0x81	; 129
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
		_delay_ms(UART_DELAY);
		if(command == '+')
    15f0:	fe 01       	movw	r30, r28
    15f2:	ed 51       	subi	r30, 0x1D	; 29
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	8b 32       	cpi	r24, 0x2B	; 43
    15fa:	09 f0       	breq	.+2      	; 0x15fe <start+0xab8>
    15fc:	a0 c1       	rjmp	.+832    	; 0x193e <start+0xdf8>
		{
			LCD_clearScreen();
    15fe:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
			LCD_displayString("Plz enter pass");
    1602:	80 e6       	ldi	r24, 0x60	; 96
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
			enterPassword(password);
    160a:	ce 01       	movw	r24, r28
    160c:	8b 51       	subi	r24, 0x1B	; 27
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
    1614:	fe 01       	movw	r30, r28
    1616:	e5 58       	subi	r30, 0x85	; 133
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a8 e4       	ldi	r26, 0x48	; 72
    1620:	b2 e4       	ldi	r27, 0x42	; 66
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	8e 01       	movw	r16, r28
    162c:	09 58       	subi	r16, 0x89	; 137
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fe 01       	movw	r30, r28
    1632:	e5 58       	subi	r30, 0x85	; 133
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	4a ef       	ldi	r20, 0xFA	; 250
    1644:	54 e4       	ldi	r21, 0x44	; 68
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	a2 83       	std	Z+2, r26	; 0x02
    1656:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1658:	fe 01       	movw	r30, r28
    165a:	e9 58       	subi	r30, 0x89	; 137
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	44 f4       	brge	.+16     	; 0x1686 <start+0xb40>
		__ticks = 1;
    1676:	fe 01       	movw	r30, r28
    1678:	eb 58       	subi	r30, 0x8B	; 139
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
    1684:	64 c0       	rjmp	.+200    	; 0x174e <start+0xc08>
	else if (__tmp > 65535)
    1686:	fe 01       	movw	r30, r28
    1688:	e9 58       	subi	r30, 0x89	; 137
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <start+0xb60>
    16a4:	43 c0       	rjmp	.+134    	; 0x172c <start+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	fe 01       	movw	r30, r28
    16a8:	e5 58       	subi	r30, 0x85	; 133
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8e 01       	movw	r16, r28
    16c6:	0b 58       	subi	r16, 0x8B	; 139
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	f8 01       	movw	r30, r16
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	1f c0       	rjmp	.+62     	; 0x171c <start+0xbd6>
    16de:	fe 01       	movw	r30, r28
    16e0:	ed 58       	subi	r30, 0x8D	; 141
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	88 ec       	ldi	r24, 0xC8	; 200
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	ed 58       	subi	r30, 0x8D	; 141
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <start+0xbb0>
    16fa:	fe 01       	movw	r30, r28
    16fc:	ed 58       	subi	r30, 0x8D	; 141
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	de 01       	movw	r26, r28
    1706:	ab 58       	subi	r26, 0x8B	; 139
    1708:	bf 4f       	sbci	r27, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	eb 58       	subi	r30, 0x8B	; 139
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	fe 01       	movw	r30, r28
    171e:	eb 58       	subi	r30, 0x8B	; 139
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	d1 f6       	brne	.-76     	; 0x16de <start+0xb98>
    172a:	27 c0       	rjmp	.+78     	; 0x177a <start+0xc34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	8e 01       	movw	r16, r28
    172e:	0b 58       	subi	r16, 0x8B	; 139
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	e9 58       	subi	r30, 0x89	; 137
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	f8 01       	movw	r30, r16
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	de 01       	movw	r26, r28
    1750:	af 58       	subi	r26, 0x8F	; 143
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	eb 58       	subi	r30, 0x8B	; 139
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	8d 93       	st	X+, r24
    1760:	9c 93       	st	X, r25
    1762:	fe 01       	movw	r30, r28
    1764:	ef 58       	subi	r30, 0x8F	; 143
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <start+0xc26>
    1770:	fe 01       	movw	r30, r28
    1772:	ef 58       	subi	r30, 0x8F	; 143
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    177a:	ce 01       	movw	r24, r28
    177c:	8b 51       	subi	r24, 0x1B	; 27
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>
			passwordVerified = 0;
    1784:	fe 01       	movw	r30, r28
    1786:	ec 51       	subi	r30, 0x1C	; 28
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    178c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    1790:	fe 01       	movw	r30, r28
    1792:	ec 51       	subi	r30, 0x1C	; 28
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 83       	st	Z, r24
			if(passwordVerified)
    1798:	fe 01       	movw	r30, r28
    179a:	ec 51       	subi	r30, 0x1C	; 28
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <start+0xc64>
			{
				openDoor();
    17a4:	0e 94 a0 12 	call	0x2540	; 0x2540 <openDoor>
    17a8:	ae cd       	rjmp	.-1188   	; 0x1306 <start+0x7c0>
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    17aa:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    17ae:	fe 01       	movw	r30, r28
    17b0:	ee 51       	subi	r30, 0x1E	; 30
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    17b6:	fe 01       	movw	r30, r28
    17b8:	ee 51       	subi	r30, 0x1E	; 30
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	18 f0       	brcs	.+6      	; 0x17c8 <start+0xc82>
				{
					securityAlarm();
    17c2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <securityAlarm>
    17c6:	9f cd       	rjmp	.-1218   	; 0x1306 <start+0x7c0>
				}

				else
				{
					LCD_clearScreen();
    17c8:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    17cc:	8b e8       	ldi	r24, 0x8B	; 139
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e3 59       	subi	r30, 0x93	; 147
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e4       	ldi	r25, 0x40	; 64
    17de:	ac e1       	ldi	r26, 0x1C	; 28
    17e0:	b5 e4       	ldi	r27, 0x45	; 69
    17e2:	80 83       	st	Z, r24
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	a2 83       	std	Z+2, r26	; 0x02
    17e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	8e 01       	movw	r16, r28
    17ec:	07 59       	subi	r16, 0x97	; 151
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	fe 01       	movw	r30, r28
    17f2:	e3 59       	subi	r30, 0x93	; 147
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4a ef       	ldi	r20, 0xFA	; 250
    1804:	54 e4       	ldi	r21, 0x44	; 68
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	f8 01       	movw	r30, r16
    1810:	80 83       	st	Z, r24
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	a2 83       	std	Z+2, r26	; 0x02
    1816:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1818:	fe 01       	movw	r30, r28
    181a:	e7 59       	subi	r30, 0x97	; 151
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	44 f4       	brge	.+16     	; 0x1846 <start+0xd00>
		__ticks = 1;
    1836:	fe 01       	movw	r30, r28
    1838:	e9 59       	subi	r30, 0x99	; 153
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    1844:	64 c0       	rjmp	.+200    	; 0x190e <start+0xdc8>
	else if (__tmp > 65535)
    1846:	fe 01       	movw	r30, r28
    1848:	e7 59       	subi	r30, 0x97	; 151
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	0c f0       	brlt	.+2      	; 0x1866 <start+0xd20>
    1864:	43 c0       	rjmp	.+134    	; 0x18ec <start+0xda6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	fe 01       	movw	r30, r28
    1868:	e3 59       	subi	r30, 0x93	; 147
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8e 01       	movw	r16, r28
    1886:	09 59       	subi	r16, 0x99	; 153
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	f8 01       	movw	r30, r16
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	1f c0       	rjmp	.+62     	; 0x18dc <start+0xd96>
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 59       	subi	r30, 0x9B	; 155
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	88 ec       	ldi	r24, 0xC8	; 200
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	fe 01       	movw	r30, r28
    18ae:	eb 59       	subi	r30, 0x9B	; 155
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	91 81       	ldd	r25, Z+1	; 0x01
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <start+0xd70>
    18ba:	fe 01       	movw	r30, r28
    18bc:	eb 59       	subi	r30, 0x9B	; 155
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	de 01       	movw	r26, r28
    18c6:	a9 59       	subi	r26, 0x99	; 153
    18c8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ca:	fe 01       	movw	r30, r28
    18cc:	e9 59       	subi	r30, 0x99	; 153
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	9c 93       	st	X, r25
    18da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 59       	subi	r30, 0x99	; 153
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	d1 f6       	brne	.-76     	; 0x189e <start+0xd58>
    18ea:	0d cd       	rjmp	.-1510   	; 0x1306 <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	8e 01       	movw	r16, r28
    18ee:	09 59       	subi	r16, 0x99	; 153
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	fe 01       	movw	r30, r28
    18f4:	e7 59       	subi	r30, 0x97	; 151
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	f8 01       	movw	r30, r16
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	de 01       	movw	r26, r28
    1910:	ad 59       	subi	r26, 0x9D	; 157
    1912:	bf 4f       	sbci	r27, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e9 59       	subi	r30, 0x99	; 153
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
    1924:	fe 01       	movw	r30, r28
    1926:	ed 59       	subi	r30, 0x9D	; 157
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <start+0xde8>
    1932:	fe 01       	movw	r30, r28
    1934:	ed 59       	subi	r30, 0x9D	; 157
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	e4 cc       	rjmp	.-1592   	; 0x1306 <start+0x7c0>

			}

		}

		else if(command == '-')
    193e:	fe 01       	movw	r30, r28
    1940:	ed 51       	subi	r30, 0x1D	; 29
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	8d 32       	cpi	r24, 0x2D	; 45
    1948:	09 f0       	breq	.+2      	; 0x194c <start+0xe06>
    194a:	dd cc       	rjmp	.-1606   	; 0x1306 <start+0x7c0>
		{
			LCD_clearScreen();
    194c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
			LCD_displayString("Enter old pass");
    1950:	8a e9       	ldi	r24, 0x9A	; 154
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>


			enterPassword(password);
    1958:	ce 01       	movw	r24, r28
    195a:	8b 51       	subi	r24, 0x1B	; 27
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
    1962:	fe 01       	movw	r30, r28
    1964:	e1 5a       	subi	r30, 0xA1	; 161
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a8 e4       	ldi	r26, 0x48	; 72
    196e:	b2 e4       	ldi	r27, 0x42	; 66
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	8e 01       	movw	r16, r28
    197a:	05 5a       	subi	r16, 0xA5	; 165
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e1 5a       	subi	r30, 0xA1	; 161
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e5 5a       	subi	r30, 0xA5	; 165
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	44 f4       	brge	.+16     	; 0x19d4 <start+0xe8e>
		__ticks = 1;
    19c4:	fe 01       	movw	r30, r28
    19c6:	e7 5a       	subi	r30, 0xA7	; 167
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	64 c0       	rjmp	.+200    	; 0x1a9c <start+0xf56>
	else if (__tmp > 65535)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e5 5a       	subi	r30, 0xA5	; 165
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <start+0xeae>
    19f2:	43 c0       	rjmp	.+134    	; 0x1a7a <start+0xf34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	fe 01       	movw	r30, r28
    19f6:	e1 5a       	subi	r30, 0xA1	; 161
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8e 01       	movw	r16, r28
    1a14:	07 5a       	subi	r16, 0xA7	; 167
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	1f c0       	rjmp	.+62     	; 0x1a6a <start+0xf24>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e9 5a       	subi	r30, 0xA9	; 169
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e9 5a       	subi	r30, 0xA9	; 169
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <start+0xefe>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e9 5a       	subi	r30, 0xA9	; 169
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	de 01       	movw	r26, r28
    1a54:	a7 5a       	subi	r26, 0xA7	; 167
    1a56:	bf 4f       	sbci	r27, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e7 5a       	subi	r30, 0xA7	; 167
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e7 5a       	subi	r30, 0xA7	; 167
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	d1 f6       	brne	.-76     	; 0x1a2c <start+0xee6>
    1a78:	27 c0       	rjmp	.+78     	; 0x1ac8 <start+0xf82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	07 5a       	subi	r16, 0xA7	; 167
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	e5 5a       	subi	r30, 0xA5	; 165
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	de 01       	movw	r26, r28
    1a9e:	ab 5a       	subi	r26, 0xAB	; 171
    1aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e7 5a       	subi	r30, 0xA7	; 167
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	8d 93       	st	X+, r24
    1aae:	9c 93       	st	X, r25
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	eb 5a       	subi	r30, 0xAB	; 171
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <start+0xf74>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	eb 5a       	subi	r30, 0xAB	; 171
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
			_delay_ms(UART_DELAY);
			sendPassword(password);
    1ac8:	ce 01       	movw	r24, r28
    1aca:	8b 51       	subi	r24, 0x1B	; 27
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>

			passwordVerified = 0;
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ec 51       	subi	r30, 0x1C	; 28
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	10 82       	st	Z, r1
			passwordVerified = UART_recieveByte();
    1ada:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ec 51       	subi	r30, 0x1C	; 28
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24


			if(passwordVerified)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ec 51       	subi	r30, 0x1C	; 28
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <start+0xfae>
    1af2:	cd c2       	rjmp	.+1434   	; 0x208e <start+0x1548>
			{
				LCD_clearScreen();
    1af4:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
				LCD_displayString("Enter New pass");
    1af8:	89 ea       	ldi	r24, 0xA9	; 169
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

				enterPassword(password);
    1b00:	ce 01       	movw	r24, r28
    1b02:	8b 51       	subi	r24, 0x1B	; 27
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ef 5a       	subi	r30, 0xAF	; 175
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a8 e4       	ldi	r26, 0x48	; 72
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	8e 01       	movw	r16, r28
    1b22:	03 5b       	subi	r16, 0xB3	; 179
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	ef 5a       	subi	r30, 0xAF	; 175
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e3 5b       	subi	r30, 0xB3	; 179
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	44 f4       	brge	.+16     	; 0x1b7c <start+0x1036>
		__ticks = 1;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e5 5b       	subi	r30, 0xB5	; 181
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	64 c0       	rjmp	.+200    	; 0x1c44 <start+0x10fe>
	else if (__tmp > 65535)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 5b       	subi	r30, 0xB3	; 179
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <start+0x1056>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <start+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ef 5a       	subi	r30, 0xAF	; 175
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8e 01       	movw	r16, r28
    1bbc:	05 5b       	subi	r16, 0xB5	; 181
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <start+0x10cc>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e7 5b       	subi	r30, 0xB7	; 183
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	88 ec       	ldi	r24, 0xC8	; 200
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 5b       	subi	r30, 0xB7	; 183
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <start+0x10a6>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e7 5b       	subi	r30, 0xB7	; 183
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	de 01       	movw	r26, r28
    1bfc:	a5 5b       	subi	r26, 0xB5	; 181
    1bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1c00:	fe 01       	movw	r30, r28
    1c02:	e5 5b       	subi	r30, 0xB5	; 181
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	9c 93       	st	X, r25
    1c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e5 5b       	subi	r30, 0xB5	; 181
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	d1 f6       	brne	.-76     	; 0x1bd4 <start+0x108e>
    1c20:	27 c0       	rjmp	.+78     	; 0x1c70 <start+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	8e 01       	movw	r16, r28
    1c24:	05 5b       	subi	r16, 0xB5	; 181
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e3 5b       	subi	r30, 0xB3	; 179
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	de 01       	movw	r26, r28
    1c46:	a9 5b       	subi	r26, 0xB9	; 185
    1c48:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 5b       	subi	r30, 0xB5	; 181
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	8d 93       	st	X+, r24
    1c56:	9c 93       	st	X, r25
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e9 5b       	subi	r30, 0xB9	; 185
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <start+0x111c>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 5b       	subi	r30, 0xB9	; 185
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
				_delay_ms(UART_DELAY);
				sendPassword(password);
    1c70:	ce 01       	movw	r24, r28
    1c72:	8b 51       	subi	r24, 0x1B	; 27
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>

				LCD_clearScreen();
    1c7a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
				LCD_displayString("Confirm New pass");
    1c7e:	88 eb       	ldi	r24, 0xB8	; 184
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

				enterPassword( confirmPassword );
    1c86:	ce 01       	movw	r24, r28
    1c88:	86 51       	subi	r24, 0x16	; 22
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	0e 94 cf 10 	call	0x219e	; 0x219e <enterPassword>
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 5b       	subi	r30, 0xBD	; 189
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a8 e4       	ldi	r26, 0x48	; 72
    1c9c:	b2 e4       	ldi	r27, 0x42	; 66
    1c9e:	80 83       	st	Z, r24
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	a2 83       	std	Z+2, r26	; 0x02
    1ca4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	01 5c       	subi	r16, 0xC1	; 193
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5b       	subi	r30, 0xBD	; 189
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	80 83       	st	Z, r24
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	a2 83       	std	Z+2, r26	; 0x02
    1cd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ff 96       	adiw	r30, 0x3f	; 63
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <start+0x11b4>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9e af       	std	Y+62, r25	; 0x3e
    1cf6:	8d af       	std	Y+61, r24	; 0x3d
    1cf8:	46 c0       	rjmp	.+140    	; 0x1d86 <start+0x1240>
	else if (__tmp > 65535)
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ff 96       	adiw	r30, 0x3f	; 63
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	64 f5       	brge	.+88     	; 0x1d6e <start+0x1228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	fe 01       	movw	r30, r28
    1d18:	ed 5b       	subi	r30, 0xBD	; 189
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e af       	std	Y+62, r25	; 0x3e
    1d42:	8d af       	std	Y+61, r24	; 0x3d
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <start+0x121e>
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c af       	std	Y+60, r25	; 0x3c
    1d4c:	8b af       	std	Y+59, r24	; 0x3b
    1d4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d50:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <start+0x120c>
    1d56:	9c af       	std	Y+60, r25	; 0x3c
    1d58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9e af       	std	Y+62, r25	; 0x3e
    1d62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <start+0x1200>
    1d6c:	16 c0       	rjmp	.+44     	; 0x1d9a <start+0x1254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ff 96       	adiw	r30, 0x3f	; 63
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9e af       	std	Y+62, r25	; 0x3e
    1d84:	8d af       	std	Y+61, r24	; 0x3d
    1d86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d8a:	9a af       	std	Y+58, r25	; 0x3a
    1d8c:	89 af       	std	Y+57, r24	; 0x39
    1d8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <start+0x124c>
    1d96:	9a af       	std	Y+58, r25	; 0x3a
    1d98:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(UART_DELAY);
				sendPassword( confirmPassword );
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	86 51       	subi	r24, 0x16	; 22
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	0e 94 ef 11 	call	0x23de	; 0x23de <sendPassword>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a8 e4       	ldi	r26, 0x48	; 72
    1daa:	b2 e4       	ldi	r27, 0x42	; 66
    1dac:	8d ab       	std	Y+53, r24	; 0x35
    1dae:	9e ab       	std	Y+54, r25	; 0x36
    1db0:	af ab       	std	Y+55, r26	; 0x37
    1db2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6d a9       	ldd	r22, Y+53	; 0x35
    1db6:	7e a9       	ldd	r23, Y+54	; 0x36
    1db8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dba:	98 ad       	ldd	r25, Y+56	; 0x38
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	89 ab       	std	Y+49, r24	; 0x31
    1dce:	9a ab       	std	Y+50, r25	; 0x32
    1dd0:	ab ab       	std	Y+51, r26	; 0x33
    1dd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dda:	9c a9       	ldd	r25, Y+52	; 0x34
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <start+0x12b0>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <start+0x132e>
	else if (__tmp > 65535)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <start+0x131a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e10:	7e a9       	ldd	r23, Y+54	; 0x36
    1e12:	8f a9       	ldd	r24, Y+55	; 0x37
    1e14:	98 ad       	ldd	r25, Y+56	; 0x38
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	98 ab       	std	Y+48, r25	; 0x30
    1e34:	8f a7       	std	Y+47, r24	; 0x2f
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <start+0x1310>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9e a7       	std	Y+46, r25	; 0x2e
    1e3e:	8d a7       	std	Y+45, r24	; 0x2d
    1e40:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e42:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <start+0x12fe>
    1e48:	9e a7       	std	Y+46, r25	; 0x2e
    1e4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	98 ab       	std	Y+48, r25	; 0x30
    1e54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <start+0x12f2>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <start+0x1342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	69 a9       	ldd	r22, Y+49	; 0x31
    1e62:	7a a9       	ldd	r23, Y+50	; 0x32
    1e64:	8b a9       	ldd	r24, Y+51	; 0x33
    1e66:	9c a9       	ldd	r25, Y+52	; 0x34
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	98 ab       	std	Y+48, r25	; 0x30
    1e72:	8f a7       	std	Y+47, r24	; 0x2f
    1e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e76:	98 a9       	ldd	r25, Y+48	; 0x30
    1e78:	9c a7       	std	Y+44, r25	; 0x2c
    1e7a:	8b a7       	std	Y+43, r24	; 0x2b
    1e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <start+0x133a>
    1e84:	9c a7       	std	Y+44, r25	; 0x2c
    1e86:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(UART_DELAY);

				passwordVerified = 0;
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ec 51       	subi	r30, 0x1C	; 28
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	10 82       	st	Z, r1
				passwordVerified = UART_recieveByte();
    1e90:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    1e94:	fe 01       	movw	r30, r28
    1e96:	ec 51       	subi	r30, 0x1C	; 28
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	80 83       	st	Z, r24

				if(passwordVerified)
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ec 51       	subi	r30, 0x1C	; 28
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 23       	and	r24, r24
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <start+0x1364>
    1ea8:	79 c0       	rjmp	.+242    	; 0x1f9c <start+0x1456>
				{
					LCD_clearScreen();
    1eaa:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
					LCD_displayString("Password Changed");
    1eae:	89 ec       	ldi	r24, 0xC9	; 201
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e8       	ldi	r25, 0x80	; 128
    1eba:	ab e3       	ldi	r26, 0x3B	; 59
    1ebc:	b5 e4       	ldi	r27, 0x45	; 69
    1ebe:	8f a3       	std	Y+39, r24	; 0x27
    1ec0:	98 a7       	std	Y+40, r25	; 0x28
    1ec2:	a9 a7       	std	Y+41, r26	; 0x29
    1ec4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a ef       	ldi	r20, 0xFA	; 250
    1ed4:	54 e4       	ldi	r21, 0x44	; 68
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	8b a3       	std	Y+35, r24	; 0x23
    1ee0:	9c a3       	std	Y+36, r25	; 0x24
    1ee2:	ad a3       	std	Y+37, r26	; 0x25
    1ee4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <start+0x13c2>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <start+0x1440>
	else if (__tmp > 65535)
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <start+0x142c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6f a1       	ldd	r22, Y+39	; 0x27
    1f22:	78 a5       	ldd	r23, Y+40	; 0x28
    1f24:	89 a5       	ldd	r24, Y+41	; 0x29
    1f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9a a3       	std	Y+34, r25	; 0x22
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <start+0x1422>
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	98 a3       	std	Y+32, r25	; 0x20
    1f50:	8f 8f       	std	Y+31, r24	; 0x1f
    1f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f54:	98 a1       	ldd	r25, Y+32	; 0x20
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <start+0x1410>
    1f5a:	98 a3       	std	Y+32, r25	; 0x20
    1f5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f60:	9a a1       	ldd	r25, Y+34	; 0x22
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <start+0x1404>
    1f70:	ca c9       	rjmp	.-3180   	; 0x1306 <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	6b a1       	ldd	r22, Y+35	; 0x23
    1f74:	7c a1       	ldd	r23, Y+36	; 0x24
    1f76:	8d a1       	ldd	r24, Y+37	; 0x25
    1f78:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9a a3       	std	Y+34, r25	; 0x22
    1f84:	89 a3       	std	Y+33, r24	; 0x21
    1f86:	89 a1       	ldd	r24, Y+33	; 0x21
    1f88:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <start+0x144c>
    1f96:	9e 8f       	std	Y+30, r25	; 0x1e
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9a:	b5 c9       	rjmp	.-3222   	; 0x1306 <start+0x7c0>
					_delay_ms(3000);
				}

				else
				{
					LCD_clearScreen();
    1f9c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1fa0:	8b e8       	ldi	r24, 0x8B	; 139
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e4       	ldi	r25, 0x40	; 64
    1fac:	ac e1       	ldi	r26, 0x1C	; 28
    1fae:	b5 e4       	ldi	r27, 0x45	; 69
    1fb0:	89 8f       	std	Y+25, r24	; 0x19
    1fb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8d 8b       	std	Y+21, r24	; 0x15
    1fd2:	9e 8b       	std	Y+22, r25	; 0x16
    1fd4:	af 8b       	std	Y+23, r26	; 0x17
    1fd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <start+0x14b4>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <start+0x1532>
	else if (__tmp > 65535)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <start+0x151e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	69 8d       	ldd	r22, Y+25	; 0x19
    2014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	0f c0       	rjmp	.+30     	; 0x205a <start+0x1514>
    203c:	88 ec       	ldi	r24, 0xC8	; 200
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9a 8b       	std	Y+18, r25	; 0x12
    2042:	89 8b       	std	Y+17, r24	; 0x11
    2044:	89 89       	ldd	r24, Y+17	; 0x11
    2046:	9a 89       	ldd	r25, Y+18	; 0x12
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <start+0x1502>
    204c:	9a 8b       	std	Y+18, r25	; 0x12
    204e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9c 8b       	std	Y+20, r25	; 0x14
    2058:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <start+0x14f6>
    2062:	51 c9       	rjmp	.-3422   	; 0x1306 <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	98 8b       	std	Y+16, r25	; 0x10
    207e:	8f 87       	std	Y+15, r24	; 0x0f
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	98 89       	ldd	r25, Y+16	; 0x10
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <start+0x153e>
    2088:	98 8b       	std	Y+16, r25	; 0x10
    208a:	8f 87       	std	Y+15, r24	; 0x0f
    208c:	3c c9       	rjmp	.-3464   	; 0x1306 <start+0x7c0>
				}
			}

			else
			{
				uint8 falsePasswordCounter = UART_recieveByte();
    208e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    2092:	fe 01       	movw	r30, r28
    2094:	ef 51       	subi	r30, 0x1F	; 31
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3)
    209a:	fe 01       	movw	r30, r28
    209c:	ef 51       	subi	r30, 0x1F	; 31
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	18 f0       	brcs	.+6      	; 0x20ac <start+0x1566>
				{
					securityAlarm();
    20a6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <securityAlarm>
    20aa:	2d c9       	rjmp	.-3494   	; 0x1306 <start+0x7c0>
				}

				else
				{
					LCD_clearScreen();
    20ac:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    20b0:	8b e8       	ldi	r24, 0x8B	; 139
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e4       	ldi	r25, 0x40	; 64
    20bc:	ac e1       	ldi	r26, 0x1C	; 28
    20be:	b5 e4       	ldi	r27, 0x45	; 69
    20c0:	8b 87       	std	Y+11, r24	; 0x0b
    20c2:	9c 87       	std	Y+12, r25	; 0x0c
    20c4:	ad 87       	std	Y+13, r26	; 0x0d
    20c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a ef       	ldi	r20, 0xFA	; 250
    20d6:	54 e4       	ldi	r21, 0x44	; 68
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8f 83       	std	Y+7, r24	; 0x07
    20e2:	98 87       	std	Y+8, r25	; 0x08
    20e4:	a9 87       	std	Y+9, r26	; 0x09
    20e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <start+0x15c4>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <start+0x1642>
	else if (__tmp > 65535)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <start+0x162e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	0f c0       	rjmp	.+30     	; 0x216a <start+0x1624>
    214c:	88 ec       	ldi	r24, 0xC8	; 200
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <start+0x1612>
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <start+0x1606>
    2172:	c9 c8       	rjmp	.-3694   	; 0x1306 <start+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <start+0x164e>
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	b4 c8       	rjmp	.-3736   	; 0x1306 <start+0x7c0>

0000219e <enterPassword>:
		}
	}
}

void enterPassword (uint8 password[])
{
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	6f 97       	sbiw	r28, 0x1f	; 31
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	9f 8f       	std	Y+31, r25	; 0x1f
    21b8:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	LCD_moveCursor(1, 5);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	65 e0       	ldi	r22, 0x05	; 5
    21be:	0e 94 df 1b 	call	0x37be	; 0x37be <LCD_moveCursor>

	for (i=0 ; i<6 ;++i)
    21c2:	1d 8e       	std	Y+29, r1	; 0x1d
    21c4:	8b c0       	rjmp	.+278    	; 0x22dc <enterPassword+0x13e>
	{
		while ((KEYPAD_getPressedKey() != 13) && (i == 5));
    21c6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <KEYPAD_getPressedKey>
    21ca:	8d 30       	cpi	r24, 0x0D	; 13
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <enterPassword+0x36>
    21ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d0:	85 30       	cpi	r24, 0x05	; 5
    21d2:	c9 f3       	breq	.-14     	; 0x21c6 <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    21d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21de:	8c 01       	movw	r16, r24
    21e0:	02 0f       	add	r16, r18
    21e2:	13 1f       	adc	r17, r19
    21e4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <KEYPAD_getPressedKey>
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 83       	st	Z, r24
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	aa ef       	ldi	r26, 0xFA	; 250
    21f2:	b3 e4       	ldi	r27, 0x43	; 67
    21f4:	89 8f       	std	Y+25, r24	; 0x19
    21f6:	9a 8f       	std	Y+26, r25	; 0x1a
    21f8:	ab 8f       	std	Y+27, r26	; 0x1b
    21fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	69 8d       	ldd	r22, Y+25	; 0x19
    21fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a ef       	ldi	r20, 0xFA	; 250
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8d 8b       	std	Y+21, r24	; 0x15
    2216:	9e 8b       	std	Y+22, r25	; 0x16
    2218:	af 8b       	std	Y+23, r26	; 0x17
    221a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    221c:	6d 89       	ldd	r22, Y+21	; 0x15
    221e:	7e 89       	ldd	r23, Y+22	; 0x16
    2220:	8f 89       	ldd	r24, Y+23	; 0x17
    2222:	98 8d       	ldd	r25, Y+24	; 0x18
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <enterPassword+0xa0>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9c 8b       	std	Y+20, r25	; 0x14
    223a:	8b 8b       	std	Y+19, r24	; 0x13
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <enterPassword+0x11e>
	else if (__tmp > 65535)
    223e:	6d 89       	ldd	r22, Y+21	; 0x15
    2240:	7e 89       	ldd	r23, Y+22	; 0x16
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	98 8d       	ldd	r25, Y+24	; 0x18
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	69 8d       	ldd	r22, Y+25	; 0x19
    2258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9c 8b       	std	Y+20, r25	; 0x14
    227c:	8b 8b       	std	Y+19, r24	; 0x13
    227e:	0f c0       	rjmp	.+30     	; 0x229e <enterPassword+0x100>
    2280:	88 ec       	ldi	r24, 0xC8	; 200
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9a 8b       	std	Y+18, r25	; 0x12
    2286:	89 8b       	std	Y+17, r24	; 0x11
    2288:	89 89       	ldd	r24, Y+17	; 0x11
    228a:	9a 89       	ldd	r25, Y+18	; 0x12
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <enterPassword+0xee>
    2290:	9a 8b       	std	Y+18, r25	; 0x12
    2292:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8b 89       	ldd	r24, Y+19	; 0x13
    22a0:	9c 89       	ldd	r25, Y+20	; 0x14
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <enterPassword+0xe2>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6d 89       	ldd	r22, Y+21	; 0x15
    22aa:	7e 89       	ldd	r23, Y+22	; 0x16
    22ac:	8f 89       	ldd	r24, Y+23	; 0x17
    22ae:	98 8d       	ldd	r25, Y+24	; 0x18
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	98 8b       	std	Y+16, r25	; 0x10
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
    22c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c6:	98 89       	ldd	r25, Y+16	; 0x10
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <enterPassword+0x12a>
    22cc:	98 8b       	std	Y+16, r25	; 0x10
    22ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
    22d0:	8a e2       	ldi	r24, 0x2A	; 42
    22d2:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_displayCharacter>
void enterPassword (uint8 password[])
{
	uint8 i;
	LCD_moveCursor(1, 5);

	for (i=0 ; i<6 ;++i)
    22d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	8d 8f       	std	Y+29, r24	; 0x1d
    22dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22de:	86 30       	cpi	r24, 0x06	; 6
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <enterPassword+0x146>
    22e2:	71 cf       	rjmp	.-286    	; 0x21c6 <enterPassword+0x28>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	aa ef       	ldi	r26, 0xFA	; 250
    22ea:	b3 e4       	ldi	r27, 0x43	; 67
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <enterPassword+0x198>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <enterPassword+0x216>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <enterPassword+0x1f8>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <enterPassword+0x1e6>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <enterPassword+0x1da>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <enterPassword+0x222>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (KEYPAD_DELAY);
		LCD_displayCharacter('*');
	}

	_delay_ms (KEYPAD_DELAY);
}
    23c8:	6f 96       	adiw	r28, 0x1f	; 31
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	08 95       	ret

000023de <sendPassword>:

void sendPassword (uint8 password[])
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	61 97       	sbiw	r28, 0x11	; 17
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	99 8b       	std	Y+17, r25	; 0x11
    23f4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    23f6:	1f 86       	std	Y+15, r1	; 0x0f
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    23fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	88 89       	ldd	r24, Y+16	; 0x10
    2402:	99 89       	ldd	r25, Y+17	; 0x11
    2404:	fc 01       	movw	r30, r24
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	80 81       	ld	r24, Z
    240c:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <UART_sendByte>

void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    2410:	8f 85       	ldd	r24, Y+15	; 0x0f
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	8f 87       	std	Y+15, r24	; 0x0f
    2416:	8f 85       	ldd	r24, Y+15	; 0x0f
    2418:	85 30       	cpi	r24, 0x05	; 5
    241a:	78 f3       	brcs	.-34     	; 0x23fa <sendPassword+0x1c>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a8 e4       	ldi	r26, 0x48	; 72
    2422:	b2 e4       	ldi	r27, 0x42	; 66
    2424:	8b 87       	std	Y+11, r24	; 0x0b
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	ad 87       	std	Y+13, r26	; 0x0d
    242a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	6b 85       	ldd	r22, Y+11	; 0x0b
    242e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a ef       	ldi	r20, 0xFA	; 250
    243a:	54 e4       	ldi	r21, 0x44	; 68
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8f 83       	std	Y+7, r24	; 0x07
    2446:	98 87       	std	Y+8, r25	; 0x08
    2448:	a9 87       	std	Y+9, r26	; 0x09
    244a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <sendPassword+0x90>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <sendPassword+0x10e>
	else if (__tmp > 65535)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <sendPassword+0xf0>
    24b0:	88 ec       	ldi	r24, 0xC8	; 200
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <sendPassword+0xde>
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <sendPassword+0xd2>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <sendPassword+0x11a>
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (UART_DELAY);
}
    2500:	61 96       	adiw	r28, 0x11	; 17
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <optionsDisplay>:

void optionsDisplay (void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    251a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "- :Change PW");
    251e:	2a ed       	ldi	r18, 0xDA	; 218
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	a9 01       	movw	r20, r18
    2528:	0e 94 21 1c 	call	0x3842	; 0x3842 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    252c:	27 ee       	ldi	r18, 0xE7	; 231
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	a9 01       	movw	r20, r18
    2536:	0e 94 21 1c 	call	0x3842	; 0x3842 <LCD_displayStringRowColumn>
}
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <openDoor>:

void openDoor (void)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    2548:	8d e3       	ldi	r24, 0x3D	; 61
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Timer1_init>

	LCD_clearScreen();
    2550:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
	LCD_displayString("Opening Door....");
    2554:	84 ef       	ldi	r24, 0xF4	; 244
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

	while (counter < 15);
    255c:	80 91 48 01 	lds	r24, 0x0148
    2560:	90 91 49 01 	lds	r25, 0x0149
    2564:	8f 30       	cpi	r24, 0x0F	; 15
    2566:	91 05       	cpc	r25, r1
    2568:	cc f3       	brlt	.-14     	; 0x255c <openDoor+0x1c>
	counter = 0;
    256a:	10 92 49 01 	sts	0x0149, r1
    256e:	10 92 48 01 	sts	0x0148, r1

	LCD_clearScreen();
    2572:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
	LCD_displayString("Door Opened");
    2576:	85 e0       	ldi	r24, 0x05	; 5
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

	while (counter < 3);
    257e:	80 91 48 01 	lds	r24, 0x0148
    2582:	90 91 49 01 	lds	r25, 0x0149
    2586:	83 30       	cpi	r24, 0x03	; 3
    2588:	91 05       	cpc	r25, r1
    258a:	cc f3       	brlt	.-14     	; 0x257e <openDoor+0x3e>
	counter = 0;
    258c:	10 92 49 01 	sts	0x0149, r1
    2590:	10 92 48 01 	sts	0x0148, r1

	LCD_clearScreen();
    2594:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
	LCD_displayString("Closing Door....");
    2598:	81 e1       	ldi	r24, 0x11	; 17
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

	while (counter < 15);
    25a0:	80 91 48 01 	lds	r24, 0x0148
    25a4:	90 91 49 01 	lds	r25, 0x0149
    25a8:	8f 30       	cpi	r24, 0x0F	; 15
    25aa:	91 05       	cpc	r25, r1
    25ac:	cc f3       	brlt	.-14     	; 0x25a0 <openDoor+0x60>
	counter = 0;
    25ae:	10 92 49 01 	sts	0x0149, r1
    25b2:	10 92 48 01 	sts	0x0148, r1

	Timer1_deInit();
    25b6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <Timer1_deInit>
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <securityAlarm>:


void securityAlarm (void)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    25c8:	8d e3       	ldi	r24, 0x3D	; 61
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Timer1_init>

	LCD_clearScreen();
    25d0:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <LCD_clearScreen>
	LCD_displayString("Security Alarm....");
    25d4:	82 e2       	ldi	r24, 0x22	; 34
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>

	while (counter < 60);
    25dc:	80 91 48 01 	lds	r24, 0x0148
    25e0:	90 91 49 01 	lds	r25, 0x0149
    25e4:	8c 33       	cpi	r24, 0x3C	; 60
    25e6:	91 05       	cpc	r25, r1
    25e8:	cc f3       	brlt	.-14     	; 0x25dc <securityAlarm+0x1c>
	counter = 0;
    25ea:	10 92 49 01 	sts	0x0149, r1
    25ee:	10 92 48 01 	sts	0x0148, r1

	Timer1_deInit();
    25f2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <Timer1_deInit>
}
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <timerHandler>:


void timerHandler (void)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	counter++;
    2604:	80 91 48 01 	lds	r24, 0x0148
    2608:	90 91 49 01 	lds	r25, 0x0149
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	90 93 49 01 	sts	0x0149, r25
    2612:	80 93 48 01 	sts	0x0148, r24
}
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <GPIO_setupPinDirection>:
#include "common_macros.h"
#include "avr/io.h" /* To use the IO Ports Registers */


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <GPIO_setupPinDirection+0x6>
    2622:	00 d0       	rcall	.+0      	; 0x2624 <GPIO_setupPinDirection+0x8>
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
    262e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 30       	cpi	r24, 0x08	; 8
    2634:	08 f0       	brcs	.+2      	; 0x2638 <GPIO_setupPinDirection+0x1c>
    2636:	d5 c0       	rjmp	.+426    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	08 f0       	brcs	.+2      	; 0x2640 <GPIO_setupPinDirection+0x24>
    263e:	d1 c0       	rjmp	.+418    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3d 83       	std	Y+5, r19	; 0x05
    2648:	2c 83       	std	Y+4, r18	; 0x04
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <GPIO_setupPinDirection+0x3a>
    2654:	43 c0       	rjmp	.+134    	; 0x26dc <GPIO_setupPinDirection+0xc0>
    2656:	2c 81       	ldd	r18, Y+4	; 0x04
    2658:	3d 81       	ldd	r19, Y+5	; 0x05
    265a:	22 30       	cpi	r18, 0x02	; 2
    265c:	31 05       	cpc	r19, r1
    265e:	2c f4       	brge	.+10     	; 0x266a <GPIO_setupPinDirection+0x4e>
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	9d 81       	ldd	r25, Y+5	; 0x05
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	71 f0       	breq	.+28     	; 0x2684 <GPIO_setupPinDirection+0x68>
    2668:	bc c0       	rjmp	.+376    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
    266a:	2c 81       	ldd	r18, Y+4	; 0x04
    266c:	3d 81       	ldd	r19, Y+5	; 0x05
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	09 f4       	brne	.+2      	; 0x2676 <GPIO_setupPinDirection+0x5a>
    2674:	5f c0       	rjmp	.+190    	; 0x2734 <GPIO_setupPinDirection+0x118>
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	9d 81       	ldd	r25, Y+5	; 0x05
    267a:	83 30       	cpi	r24, 0x03	; 3
    267c:	91 05       	cpc	r25, r1
    267e:	09 f4       	brne	.+2      	; 0x2682 <GPIO_setupPinDirection+0x66>
    2680:	85 c0       	rjmp	.+266    	; 0x278c <GPIO_setupPinDirection+0x170>
    2682:	af c0       	rjmp	.+350    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	a1 f4       	brne	.+40     	; 0x26b2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    268a:	aa e3       	ldi	r26, 0x3A	; 58
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ea e3       	ldi	r30, 0x3A	; 58
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	48 2f       	mov	r20, r24
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 2e       	mov	r0, r18
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <GPIO_setupPinDirection+0x8c>
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	0a 94       	dec	r0
    26aa:	e2 f7       	brpl	.-8      	; 0x26a4 <GPIO_setupPinDirection+0x88>
    26ac:	84 2b       	or	r24, r20
    26ae:	8c 93       	st	X, r24
    26b0:	98 c0       	rjmp	.+304    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    26b2:	aa e3       	ldi	r26, 0x3A	; 58
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ea e3       	ldi	r30, 0x3A	; 58
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	48 2f       	mov	r20, r24
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	02 2e       	mov	r0, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <GPIO_setupPinDirection+0xb4>
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	0a 94       	dec	r0
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <GPIO_setupPinDirection+0xb0>
    26d4:	80 95       	com	r24
    26d6:	84 23       	and	r24, r20
    26d8:	8c 93       	st	X, r24
    26da:	83 c0       	rjmp	.+262    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	a1 f4       	brne	.+40     	; 0x270a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    26e2:	a7 e3       	ldi	r26, 0x37	; 55
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e7 e3       	ldi	r30, 0x37	; 55
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	48 2f       	mov	r20, r24
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 2e       	mov	r0, r18
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <GPIO_setupPinDirection+0xe4>
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <GPIO_setupPinDirection+0xe0>
    2704:	84 2b       	or	r24, r20
    2706:	8c 93       	st	X, r24
    2708:	6c c0       	rjmp	.+216    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    270a:	a7 e3       	ldi	r26, 0x37	; 55
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e7 e3       	ldi	r30, 0x37	; 55
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <GPIO_setupPinDirection+0x10c>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <GPIO_setupPinDirection+0x108>
    272c:	80 95       	com	r24
    272e:	84 23       	and	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	57 c0       	rjmp	.+174    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	a1 f4       	brne	.+40     	; 0x2762 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    273a:	a4 e3       	ldi	r26, 0x34	; 52
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e4 e3       	ldi	r30, 0x34	; 52
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	02 2e       	mov	r0, r18
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <GPIO_setupPinDirection+0x13c>
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	0a 94       	dec	r0
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <GPIO_setupPinDirection+0x138>
    275c:	84 2b       	or	r24, r20
    275e:	8c 93       	st	X, r24
    2760:	40 c0       	rjmp	.+128    	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2762:	a4 e3       	ldi	r26, 0x34	; 52
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e4 e3       	ldi	r30, 0x34	; 52
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	48 2f       	mov	r20, r24
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	02 2e       	mov	r0, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <GPIO_setupPinDirection+0x164>
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	0a 94       	dec	r0
    2782:	e2 f7       	brpl	.-8      	; 0x277c <GPIO_setupPinDirection+0x160>
    2784:	80 95       	com	r24
    2786:	84 23       	and	r24, r20
    2788:	8c 93       	st	X, r24
    278a:	2b c0       	rjmp	.+86     	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	a1 f4       	brne	.+40     	; 0x27ba <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2792:	a1 e3       	ldi	r26, 0x31	; 49
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e1 e3       	ldi	r30, 0x31	; 49
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	48 2f       	mov	r20, r24
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 2e       	mov	r0, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <GPIO_setupPinDirection+0x194>
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <GPIO_setupPinDirection+0x190>
    27b4:	84 2b       	or	r24, r20
    27b6:	8c 93       	st	X, r24
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    27ba:	a1 e3       	ldi	r26, 0x31	; 49
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e1 e3       	ldi	r30, 0x31	; 49
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	48 2f       	mov	r20, r24
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	02 2e       	mov	r0, r18
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <GPIO_setupPinDirection+0x1bc>
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	0a 94       	dec	r0
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <GPIO_setupPinDirection+0x1b8>
    27dc:	80 95       	com	r24
    27de:	84 23       	and	r24, r20
    27e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <GPIO_writePin+0x6>
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <GPIO_writePin+0x8>
    27fa:	0f 92       	push	r0
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	6a 83       	std	Y+2, r22	; 0x02
    2804:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	88 30       	cpi	r24, 0x08	; 8
    280a:	08 f0       	brcs	.+2      	; 0x280e <GPIO_writePin+0x1c>
    280c:	d5 c0       	rjmp	.+426    	; 0x29b8 <GPIO_writePin+0x1c6>
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	84 30       	cpi	r24, 0x04	; 4
    2812:	08 f0       	brcs	.+2      	; 0x2816 <GPIO_writePin+0x24>
    2814:	d1 c0       	rjmp	.+418    	; 0x29b8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	3d 83       	std	Y+5, r19	; 0x05
    281e:	2c 83       	std	Y+4, r18	; 0x04
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	9d 81       	ldd	r25, Y+5	; 0x05
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	91 05       	cpc	r25, r1
    2828:	09 f4       	brne	.+2      	; 0x282c <GPIO_writePin+0x3a>
    282a:	43 c0       	rjmp	.+134    	; 0x28b2 <GPIO_writePin+0xc0>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	2c f4       	brge	.+10     	; 0x2840 <GPIO_writePin+0x4e>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	71 f0       	breq	.+28     	; 0x285a <GPIO_writePin+0x68>
    283e:	bc c0       	rjmp	.+376    	; 0x29b8 <GPIO_writePin+0x1c6>
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <GPIO_writePin+0x5a>
    284a:	5f c0       	rjmp	.+190    	; 0x290a <GPIO_writePin+0x118>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <GPIO_writePin+0x66>
    2856:	85 c0       	rjmp	.+266    	; 0x2962 <GPIO_writePin+0x170>
    2858:	af c0       	rjmp	.+350    	; 0x29b8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	a1 f4       	brne	.+40     	; 0x2888 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2860:	ab e3       	ldi	r26, 0x3B	; 59
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	eb e3       	ldi	r30, 0x3B	; 59
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	02 2e       	mov	r0, r18
    2878:	02 c0       	rjmp	.+4      	; 0x287e <GPIO_writePin+0x8c>
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	0a 94       	dec	r0
    2880:	e2 f7       	brpl	.-8      	; 0x287a <GPIO_writePin+0x88>
    2882:	84 2b       	or	r24, r20
    2884:	8c 93       	st	X, r24
    2886:	98 c0       	rjmp	.+304    	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2888:	ab e3       	ldi	r26, 0x3B	; 59
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	eb e3       	ldi	r30, 0x3B	; 59
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	48 2f       	mov	r20, r24
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	02 2e       	mov	r0, r18
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <GPIO_writePin+0xb4>
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	0a 94       	dec	r0
    28a8:	e2 f7       	brpl	.-8      	; 0x28a2 <GPIO_writePin+0xb0>
    28aa:	80 95       	com	r24
    28ac:	84 23       	and	r24, r20
    28ae:	8c 93       	st	X, r24
    28b0:	83 c0       	rjmp	.+262    	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	a1 f4       	brne	.+40     	; 0x28e0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    28b8:	a8 e3       	ldi	r26, 0x38	; 56
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e8 e3       	ldi	r30, 0x38	; 56
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	48 2f       	mov	r20, r24
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	02 2e       	mov	r0, r18
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <GPIO_writePin+0xe4>
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	0a 94       	dec	r0
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <GPIO_writePin+0xe0>
    28da:	84 2b       	or	r24, r20
    28dc:	8c 93       	st	X, r24
    28de:	6c c0       	rjmp	.+216    	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    28e0:	a8 e3       	ldi	r26, 0x38	; 56
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e8 e3       	ldi	r30, 0x38	; 56
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	48 2f       	mov	r20, r24
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	02 2e       	mov	r0, r18
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <GPIO_writePin+0x10c>
    28fa:	88 0f       	add	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	0a 94       	dec	r0
    2900:	e2 f7       	brpl	.-8      	; 0x28fa <GPIO_writePin+0x108>
    2902:	80 95       	com	r24
    2904:	84 23       	and	r24, r20
    2906:	8c 93       	st	X, r24
    2908:	57 c0       	rjmp	.+174    	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	a1 f4       	brne	.+40     	; 0x2938 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2910:	a5 e3       	ldi	r26, 0x35	; 53
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e5 e3       	ldi	r30, 0x35	; 53
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	48 2f       	mov	r20, r24
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	02 2e       	mov	r0, r18
    2928:	02 c0       	rjmp	.+4      	; 0x292e <GPIO_writePin+0x13c>
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <GPIO_writePin+0x138>
    2932:	84 2b       	or	r24, r20
    2934:	8c 93       	st	X, r24
    2936:	40 c0       	rjmp	.+128    	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2938:	a5 e3       	ldi	r26, 0x35	; 53
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e5 e3       	ldi	r30, 0x35	; 53
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	48 2f       	mov	r20, r24
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	02 2e       	mov	r0, r18
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <GPIO_writePin+0x164>
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	0a 94       	dec	r0
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <GPIO_writePin+0x160>
    295a:	80 95       	com	r24
    295c:	84 23       	and	r24, r20
    295e:	8c 93       	st	X, r24
    2960:	2b c0       	rjmp	.+86     	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	a1 f4       	brne	.+40     	; 0x2990 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2968:	a2 e3       	ldi	r26, 0x32	; 50
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e2 e3       	ldi	r30, 0x32	; 50
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <GPIO_writePin+0x194>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <GPIO_writePin+0x190>
    298a:	84 2b       	or	r24, r20
    298c:	8c 93       	st	X, r24
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2990:	a2 e3       	ldi	r26, 0x32	; 50
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e2 e3       	ldi	r30, 0x32	; 50
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	48 2f       	mov	r20, r24
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <GPIO_writePin+0x1bc>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <GPIO_writePin+0x1b8>
    29b2:	80 95       	com	r24
    29b4:	84 23       	and	r24, r20
    29b6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <GPIO_readPin+0x6>
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <GPIO_readPin+0x8>
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	8a 83       	std	Y+2, r24	; 0x02
    29d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    29da:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	88 30       	cpi	r24, 0x08	; 8
    29e0:	08 f0       	brcs	.+2      	; 0x29e4 <GPIO_readPin+0x1c>
    29e2:	84 c0       	rjmp	.+264    	; 0x2aec <GPIO_readPin+0x124>
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	84 30       	cpi	r24, 0x04	; 4
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <GPIO_readPin+0x24>
    29ea:	80 c0       	rjmp	.+256    	; 0x2aec <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	3d 83       	std	Y+5, r19	; 0x05
    29f4:	2c 83       	std	Y+4, r18	; 0x04
    29f6:	4c 81       	ldd	r20, Y+4	; 0x04
    29f8:	5d 81       	ldd	r21, Y+5	; 0x05
    29fa:	41 30       	cpi	r20, 0x01	; 1
    29fc:	51 05       	cpc	r21, r1
    29fe:	79 f1       	breq	.+94     	; 0x2a5e <GPIO_readPin+0x96>
    2a00:	8c 81       	ldd	r24, Y+4	; 0x04
    2a02:	9d 81       	ldd	r25, Y+5	; 0x05
    2a04:	82 30       	cpi	r24, 0x02	; 2
    2a06:	91 05       	cpc	r25, r1
    2a08:	34 f4       	brge	.+12     	; 0x2a16 <GPIO_readPin+0x4e>
    2a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0e:	21 15       	cp	r18, r1
    2a10:	31 05       	cpc	r19, r1
    2a12:	69 f0       	breq	.+26     	; 0x2a2e <GPIO_readPin+0x66>
    2a14:	6b c0       	rjmp	.+214    	; 0x2aec <GPIO_readPin+0x124>
    2a16:	4c 81       	ldd	r20, Y+4	; 0x04
    2a18:	5d 81       	ldd	r21, Y+5	; 0x05
    2a1a:	42 30       	cpi	r20, 0x02	; 2
    2a1c:	51 05       	cpc	r21, r1
    2a1e:	b9 f1       	breq	.+110    	; 0x2a8e <GPIO_readPin+0xc6>
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	91 05       	cpc	r25, r1
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <GPIO_readPin+0x64>
    2a2a:	49 c0       	rjmp	.+146    	; 0x2abe <GPIO_readPin+0xf6>
    2a2c:	5f c0       	rjmp	.+190    	; 0x2aec <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2a2e:	e9 e3       	ldi	r30, 0x39	; 57
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a9 01       	movw	r20, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <GPIO_readPin+0x7e>
    2a42:	55 95       	asr	r21
    2a44:	47 95       	ror	r20
    2a46:	8a 95       	dec	r24
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <GPIO_readPin+0x7a>
    2a4a:	ca 01       	movw	r24, r20
    2a4c:	81 70       	andi	r24, 0x01	; 1
    2a4e:	90 70       	andi	r25, 0x00	; 0
    2a50:	88 23       	and	r24, r24
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	49 c0       	rjmp	.+146    	; 0x2aec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a5a:	19 82       	std	Y+1, r1	; 0x01
    2a5c:	47 c0       	rjmp	.+142    	; 0x2aec <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2a5e:	e6 e3       	ldi	r30, 0x36	; 54
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a9 01       	movw	r20, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <GPIO_readPin+0xae>
    2a72:	55 95       	asr	r21
    2a74:	47 95       	ror	r20
    2a76:	8a 95       	dec	r24
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <GPIO_readPin+0xaa>
    2a7a:	ca 01       	movw	r24, r20
    2a7c:	81 70       	andi	r24, 0x01	; 1
    2a7e:	90 70       	andi	r25, 0x00	; 0
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	31 c0       	rjmp	.+98     	; 0x2aec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a8a:	19 82       	std	Y+1, r1	; 0x01
    2a8c:	2f c0       	rjmp	.+94     	; 0x2aec <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2a8e:	e3 e3       	ldi	r30, 0x33	; 51
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <GPIO_readPin+0xde>
    2aa2:	55 95       	asr	r21
    2aa4:	47 95       	ror	r20
    2aa6:	8a 95       	dec	r24
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <GPIO_readPin+0xda>
    2aaa:	ca 01       	movw	r24, r20
    2aac:	81 70       	andi	r24, 0x01	; 1
    2aae:	90 70       	andi	r25, 0x00	; 0
    2ab0:	88 23       	and	r24, r24
    2ab2:	19 f0       	breq	.+6      	; 0x2aba <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	19 c0       	rjmp	.+50     	; 0x2aec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2aba:	19 82       	std	Y+1, r1	; 0x01
    2abc:	17 c0       	rjmp	.+46     	; 0x2aec <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2abe:	e0 e3       	ldi	r30, 0x30	; 48
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a9 01       	movw	r20, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <GPIO_readPin+0x10e>
    2ad2:	55 95       	asr	r21
    2ad4:	47 95       	ror	r20
    2ad6:	8a 95       	dec	r24
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <GPIO_readPin+0x10a>
    2ada:	ca 01       	movw	r24, r20
    2adc:	81 70       	andi	r24, 0x01	; 1
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	88 23       	and	r24, r24
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2aea:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <GPIO_setupPortDirection+0x6>
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <GPIO_setupPortDirection+0x8>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	84 30       	cpi	r24, 0x04	; 4
    2b12:	90 f5       	brcc	.+100    	; 0x2b78 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3c 83       	std	Y+4, r19	; 0x04
    2b1c:	2b 83       	std	Y+3, r18	; 0x03
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	91 05       	cpc	r25, r1
    2b26:	d1 f0       	breq	.+52     	; 0x2b5c <GPIO_setupPortDirection+0x5e>
    2b28:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2c:	22 30       	cpi	r18, 0x02	; 2
    2b2e:	31 05       	cpc	r19, r1
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <GPIO_setupPortDirection+0x3e>
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	61 f0       	breq	.+24     	; 0x2b52 <GPIO_setupPortDirection+0x54>
    2b3a:	1e c0       	rjmp	.+60     	; 0x2b78 <GPIO_setupPortDirection+0x7a>
    2b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b40:	22 30       	cpi	r18, 0x02	; 2
    2b42:	31 05       	cpc	r19, r1
    2b44:	81 f0       	breq	.+32     	; 0x2b66 <GPIO_setupPortDirection+0x68>
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4a:	83 30       	cpi	r24, 0x03	; 3
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	81 f0       	breq	.+32     	; 0x2b70 <GPIO_setupPortDirection+0x72>
    2b50:	13 c0       	rjmp	.+38     	; 0x2b78 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2b52:	ea e3       	ldi	r30, 0x3A	; 58
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	80 83       	st	Z, r24
    2b5a:	0e c0       	rjmp	.+28     	; 0x2b78 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2b5c:	e7 e3       	ldi	r30, 0x37	; 55
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	80 83       	st	Z, r24
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2b66:	e4 e3       	ldi	r30, 0x34	; 52
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	80 83       	st	Z, r24
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2b70:	e1 e3       	ldi	r30, 0x31	; 49
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <GPIO_writePort+0x6>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <GPIO_writePort+0x8>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	84 30       	cpi	r24, 0x04	; 4
    2b9a:	90 f5       	brcc	.+100    	; 0x2c00 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	3c 83       	std	Y+4, r19	; 0x04
    2ba4:	2b 83       	std	Y+3, r18	; 0x03
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	91 05       	cpc	r25, r1
    2bae:	d1 f0       	breq	.+52     	; 0x2be4 <GPIO_writePort+0x5e>
    2bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb4:	22 30       	cpi	r18, 0x02	; 2
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <GPIO_writePort+0x3e>
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	61 f0       	breq	.+24     	; 0x2bda <GPIO_writePort+0x54>
    2bc2:	1e c0       	rjmp	.+60     	; 0x2c00 <GPIO_writePort+0x7a>
    2bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc8:	22 30       	cpi	r18, 0x02	; 2
    2bca:	31 05       	cpc	r19, r1
    2bcc:	81 f0       	breq	.+32     	; 0x2bee <GPIO_writePort+0x68>
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	83 30       	cpi	r24, 0x03	; 3
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	81 f0       	breq	.+32     	; 0x2bf8 <GPIO_writePort+0x72>
    2bd8:	13 c0       	rjmp	.+38     	; 0x2c00 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2bda:	eb e3       	ldi	r30, 0x3B	; 59
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	80 83       	st	Z, r24
    2be2:	0e c0       	rjmp	.+28     	; 0x2c00 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2be4:	e8 e3       	ldi	r30, 0x38	; 56
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	80 83       	st	Z, r24
    2bec:	09 c0       	rjmp	.+18     	; 0x2c00 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2bee:	e5 e3       	ldi	r30, 0x35	; 53
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	80 83       	st	Z, r24
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2bf8:	e2 e3       	ldi	r30, 0x32	; 50
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	80 83       	st	Z, r24
			break;
		}
	}
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <GPIO_readPort+0x6>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <GPIO_readPort+0x8>
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2c1c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	84 30       	cpi	r24, 0x04	; 4
    2c22:	90 f5       	brcc	.+100    	; 0x2c88 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	3c 83       	std	Y+4, r19	; 0x04
    2c2c:	2b 83       	std	Y+3, r18	; 0x03
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	91 05       	cpc	r25, r1
    2c36:	d1 f0       	breq	.+52     	; 0x2c6c <GPIO_readPort+0x5e>
    2c38:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c3c:	22 30       	cpi	r18, 0x02	; 2
    2c3e:	31 05       	cpc	r19, r1
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <GPIO_readPort+0x3e>
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	61 f0       	breq	.+24     	; 0x2c62 <GPIO_readPort+0x54>
    2c4a:	1e c0       	rjmp	.+60     	; 0x2c88 <GPIO_readPort+0x7a>
    2c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c50:	22 30       	cpi	r18, 0x02	; 2
    2c52:	31 05       	cpc	r19, r1
    2c54:	81 f0       	breq	.+32     	; 0x2c76 <GPIO_readPort+0x68>
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	83 30       	cpi	r24, 0x03	; 3
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	81 f0       	breq	.+32     	; 0x2c80 <GPIO_readPort+0x72>
    2c60:	13 c0       	rjmp	.+38     	; 0x2c88 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2c62:	e9 e3       	ldi	r30, 0x39	; 57
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	0e c0       	rjmp	.+28     	; 0x2c88 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2c6c:	e6 e3       	ldi	r30, 0x36	; 54
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	09 c0       	rjmp	.+18     	; 0x2c88 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2c76:	e3 e3       	ldi	r30, 0x33	; 51
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2c80:	e0 e3       	ldi	r30, 0x30	; 48
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <KEYPAD_getPressedKey+0x6>
    2c9e:	0f 92       	push	r0
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2ca4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2ca6:	1b 82       	std	Y+3, r1	; 0x03
    2ca8:	43 c0       	rjmp	.+134    	; 0x2d30 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	0e 94 7f 15 	call	0x2afe	; 0x2afe <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	9c 5f       	subi	r25, 0xFC	; 252
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	69 2f       	mov	r22, r25
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	0e 94 0e 13 	call	0x261c	; 0x261c <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9c 01       	movw	r18, r24
    2cca:	2c 5f       	subi	r18, 0xFC	; 252
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <KEYPAD_getPressedKey+0x40>
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	2a 95       	dec	r18
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <KEYPAD_getPressedKey+0x3c>
    2cdc:	80 95       	com	r24
    2cde:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	69 81       	ldd	r22, Y+1	; 0x01
    2ce4:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2ce8:	1a 82       	std	Y+2, r1	; 0x02
    2cea:	1c c0       	rjmp	.+56     	; 0x2d24 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <GPIO_readPin>
    2cf4:	88 23       	and	r24, r24
    2cf6:	99 f4       	brne	.+38     	; 0x2d1e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	98 2f       	mov	r25, r24
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	89 0f       	add	r24, r25
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	84 30       	cpi	r24, 0x04	; 4
    2d28:	08 f3       	brcs	.-62     	; 0x2cec <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	08 f4       	brcc	.+2      	; 0x2d38 <KEYPAD_getPressedKey+0xa0>
    2d36:	b9 cf       	rjmp	.-142    	; 0x2caa <KEYPAD_getPressedKey+0x12>
    2d38:	b6 cf       	rjmp	.-148    	; 0x2ca6 <KEYPAD_getPressedKey+0xe>

00002d3a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2d48:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	3c 83       	std	Y+4, r19	; 0x04
    2d52:	2b 83       	std	Y+3, r18	; 0x03
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	9c 81       	ldd	r25, Y+4	; 0x04
    2d58:	88 30       	cpi	r24, 0x08	; 8
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2d5e:	70 c0       	rjmp	.+224    	; 0x2e40 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2d60:	2b 81       	ldd	r18, Y+3	; 0x03
    2d62:	3c 81       	ldd	r19, Y+4	; 0x04
    2d64:	29 30       	cpi	r18, 0x09	; 9
    2d66:	31 05       	cpc	r19, r1
    2d68:	5c f5       	brge	.+86     	; 0x2dc0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	84 30       	cpi	r24, 0x04	; 4
    2d70:	91 05       	cpc	r25, r1
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2d74:	59 c0       	rjmp	.+178    	; 0x2e28 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2d76:	2b 81       	ldd	r18, Y+3	; 0x03
    2d78:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7a:	25 30       	cpi	r18, 0x05	; 5
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	9c f4       	brge	.+38     	; 0x2da6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	91 05       	cpc	r25, r1
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <KEYPAD_4x4_adjustKeyNumber+0x52>
    2d8a:	48 c0       	rjmp	.+144    	; 0x2e1c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d90:	23 30       	cpi	r18, 0x03	; 3
    2d92:	31 05       	cpc	r19, r1
    2d94:	0c f0       	brlt	.+2      	; 0x2d98 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2d96:	45 c0       	rjmp	.+138    	; 0x2e22 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	91 05       	cpc	r25, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2da2:	39 c0       	rjmp	.+114    	; 0x2e16 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2da4:	67 c0       	rjmp	.+206    	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2da6:	2b 81       	ldd	r18, Y+3	; 0x03
    2da8:	3c 81       	ldd	r19, Y+4	; 0x04
    2daa:	26 30       	cpi	r18, 0x06	; 6
    2dac:	31 05       	cpc	r19, r1
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2db0:	41 c0       	rjmp	.+130    	; 0x2e34 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	87 30       	cpi	r24, 0x07	; 7
    2db8:	91 05       	cpc	r25, r1
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <KEYPAD_4x4_adjustKeyNumber+0x84>
    2dbc:	3e c0       	rjmp	.+124    	; 0x2e3a <KEYPAD_4x4_adjustKeyNumber+0x100>
    2dbe:	37 c0       	rjmp	.+110    	; 0x2e2e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc4:	2c 30       	cpi	r18, 0x0C	; 12
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <KEYPAD_4x4_adjustKeyNumber+0x92>
    2dca:	46 c0       	rjmp	.+140    	; 0x2e58 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	8d 30       	cpi	r24, 0x0D	; 13
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	5c f4       	brge	.+22     	; 0x2dec <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dda:	2a 30       	cpi	r18, 0x0A	; 10
    2ddc:	31 05       	cpc	r19, r1
    2dde:	b1 f1       	breq	.+108    	; 0x2e4c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	8b 30       	cpi	r24, 0x0B	; 11
    2de6:	91 05       	cpc	r25, r1
    2de8:	a4 f5       	brge	.+104    	; 0x2e52 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2dea:	2d c0       	rjmp	.+90     	; 0x2e46 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2dec:	2b 81       	ldd	r18, Y+3	; 0x03
    2dee:	3c 81       	ldd	r19, Y+4	; 0x04
    2df0:	2e 30       	cpi	r18, 0x0E	; 14
    2df2:	31 05       	cpc	r19, r1
    2df4:	b9 f1       	breq	.+110    	; 0x2e64 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfa:	8e 30       	cpi	r24, 0x0E	; 14
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	7c f1       	brlt	.+94     	; 0x2e5e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2e00:	2b 81       	ldd	r18, Y+3	; 0x03
    2e02:	3c 81       	ldd	r19, Y+4	; 0x04
    2e04:	2f 30       	cpi	r18, 0x0F	; 15
    2e06:	31 05       	cpc	r19, r1
    2e08:	79 f1       	breq	.+94     	; 0x2e68 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0e:	80 31       	cpi	r24, 0x10	; 16
    2e10:	91 05       	cpc	r25, r1
    2e12:	69 f1       	breq	.+90     	; 0x2e6e <KEYPAD_4x4_adjustKeyNumber+0x134>
    2e14:	2f c0       	rjmp	.+94     	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2e16:	87 e0       	ldi	r24, 0x07	; 7
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	2e c0       	rjmp	.+92     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2e1c:	88 e0       	ldi	r24, 0x08	; 8
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	2b c0       	rjmp	.+86     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2e22:	89 e0       	ldi	r24, 0x09	; 9
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	28 c0       	rjmp	.+80     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2e28:	85 e2       	ldi	r24, 0x25	; 37
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	25 c0       	rjmp	.+74     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	22 c0       	rjmp	.+68     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2e34:	85 e0       	ldi	r24, 0x05	; 5
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	1f c0       	rjmp	.+62     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2e3a:	86 e0       	ldi	r24, 0x06	; 6
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	1c c0       	rjmp	.+56     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2e40:	8a e2       	ldi	r24, 0x2A	; 42
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	19 c0       	rjmp	.+50     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	16 c0       	rjmp	.+44     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	13 c0       	rjmp	.+38     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	10 c0       	rjmp	.+32     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2e58:	8d e2       	ldi	r24, 0x2D	; 45
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	0d c0       	rjmp	.+26     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2e5e:	8d e0       	ldi	r24, 0x0D	; 13
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	0a c0       	rjmp	.+20     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2e64:	19 82       	std	Y+1, r1	; 0x01
    2e66:	08 c0       	rjmp	.+16     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2e68:	8d e3       	ldi	r24, 0x3D	; 61
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	05 c0       	rjmp	.+10     	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2e6e:	8b e2       	ldi	r24, 0x2B	; 43
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	2e 97       	sbiw	r28, 0x0e	; 14
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	41 e0       	ldi	r20, 0x01	; 1
    2ea2:	0e 94 0e 13 	call	0x261c	; 0x261c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	61 e0       	ldi	r22, 0x01	; 1
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 0e 13 	call	0x261c	; 0x261c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	62 e0       	ldi	r22, 0x02	; 2
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	0e 94 0e 13 	call	0x261c	; 0x261c <GPIO_setupPinDirection>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 ea       	ldi	r26, 0xA0	; 160
    2ec0:	b1 e4       	ldi	r27, 0x41	; 65
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <LCD_init+0x84>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <LCD_init+0x102>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <LCD_init+0xe4>
    2f4e:	88 ec       	ldi	r24, 0xC8	; 200
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_init+0xd2>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <LCD_init+0xc6>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_init+0x10e>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	6f ef       	ldi	r22, 0xFF	; 255
    2fa2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2fa6:	88 e3       	ldi	r24, 0x38	; 56
    2fa8:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2fac:	8c e0       	ldi	r24, 0x0C	; 12
    2fae:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_sendCommand>
}
    2fb8:	2e 96       	adiw	r28, 0x0e	; 14
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	e9 97       	sbiw	r28, 0x39	; 57
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e8       	ldi	r26, 0x80	; 128
    2ff0:	bf e3       	ldi	r27, 0x3F	; 63
    2ff2:	8d ab       	std	Y+53, r24	; 0x35
    2ff4:	9e ab       	std	Y+54, r25	; 0x36
    2ff6:	af ab       	std	Y+55, r26	; 0x37
    2ff8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6d a9       	ldd	r22, Y+53	; 0x35
    2ffc:	7e a9       	ldd	r23, Y+54	; 0x36
    2ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    3000:	98 ad       	ldd	r25, Y+56	; 0x38
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	89 ab       	std	Y+49, r24	; 0x31
    3014:	9a ab       	std	Y+50, r25	; 0x32
    3016:	ab ab       	std	Y+51, r26	; 0x33
    3018:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    301a:	69 a9       	ldd	r22, Y+49	; 0x31
    301c:	7a a9       	ldd	r23, Y+50	; 0x32
    301e:	8b a9       	ldd	r24, Y+51	; 0x33
    3020:	9c a9       	ldd	r25, Y+52	; 0x34
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <LCD_sendCommand+0x72>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	98 ab       	std	Y+48, r25	; 0x30
    3038:	8f a7       	std	Y+47, r24	; 0x2f
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    303c:	69 a9       	ldd	r22, Y+49	; 0x31
    303e:	7a a9       	ldd	r23, Y+50	; 0x32
    3040:	8b a9       	ldd	r24, Y+51	; 0x33
    3042:	9c a9       	ldd	r25, Y+52	; 0x34
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6d a9       	ldd	r22, Y+53	; 0x35
    3056:	7e a9       	ldd	r23, Y+54	; 0x36
    3058:	8f a9       	ldd	r24, Y+55	; 0x37
    305a:	98 ad       	ldd	r25, Y+56	; 0x38
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	98 ab       	std	Y+48, r25	; 0x30
    307a:	8f a7       	std	Y+47, r24	; 0x2f
    307c:	0f c0       	rjmp	.+30     	; 0x309c <LCD_sendCommand+0xd2>
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9e a7       	std	Y+46, r25	; 0x2e
    3084:	8d a7       	std	Y+45, r24	; 0x2d
    3086:	8d a5       	ldd	r24, Y+45	; 0x2d
    3088:	9e a5       	ldd	r25, Y+46	; 0x2e
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <LCD_sendCommand+0xc0>
    308e:	9e a7       	std	Y+46, r25	; 0x2e
    3090:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	8f a5       	ldd	r24, Y+47	; 0x2f
    3094:	98 a9       	ldd	r25, Y+48	; 0x30
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <LCD_sendCommand+0xb4>
    30a4:	14 c0       	rjmp	.+40     	; 0x30ce <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	69 a9       	ldd	r22, Y+49	; 0x31
    30a8:	7a a9       	ldd	r23, Y+50	; 0x32
    30aa:	8b a9       	ldd	r24, Y+51	; 0x33
    30ac:	9c a9       	ldd	r25, Y+52	; 0x34
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	98 ab       	std	Y+48, r25	; 0x30
    30b8:	8f a7       	std	Y+47, r24	; 0x2f
    30ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    30bc:	98 a9       	ldd	r25, Y+48	; 0x30
    30be:	9c a7       	std	Y+44, r25	; 0x2c
    30c0:	8b a7       	std	Y+43, r24	; 0x2b
    30c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <LCD_sendCommand+0xfc>
    30ca:	9c a7       	std	Y+44, r25	; 0x2c
    30cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	62 e0       	ldi	r22, 0x02	; 2
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e8       	ldi	r26, 0x80	; 128
    30de:	bf e3       	ldi	r27, 0x3F	; 63
    30e0:	8f a3       	std	Y+39, r24	; 0x27
    30e2:	98 a7       	std	Y+40, r25	; 0x28
    30e4:	a9 a7       	std	Y+41, r26	; 0x29
    30e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ea:	78 a5       	ldd	r23, Y+40	; 0x28
    30ec:	89 a5       	ldd	r24, Y+41	; 0x29
    30ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a ef       	ldi	r20, 0xFA	; 250
    30f6:	54 e4       	ldi	r21, 0x44	; 68
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8b a3       	std	Y+35, r24	; 0x23
    3102:	9c a3       	std	Y+36, r25	; 0x24
    3104:	ad a3       	std	Y+37, r26	; 0x25
    3106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3108:	6b a1       	ldd	r22, Y+35	; 0x23
    310a:	7c a1       	ldd	r23, Y+36	; 0x24
    310c:	8d a1       	ldd	r24, Y+37	; 0x25
    310e:	9e a1       	ldd	r25, Y+38	; 0x26
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <LCD_sendCommand+0x160>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9a a3       	std	Y+34, r25	; 0x22
    3126:	89 a3       	std	Y+33, r24	; 0x21
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    312a:	6b a1       	ldd	r22, Y+35	; 0x23
    312c:	7c a1       	ldd	r23, Y+36	; 0x24
    312e:	8d a1       	ldd	r24, Y+37	; 0x25
    3130:	9e a1       	ldd	r25, Y+38	; 0x26
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	6f a1       	ldd	r22, Y+39	; 0x27
    3144:	78 a5       	ldd	r23, Y+40	; 0x28
    3146:	89 a5       	ldd	r24, Y+41	; 0x29
    3148:	9a a5       	ldd	r25, Y+42	; 0x2a
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9a a3       	std	Y+34, r25	; 0x22
    3168:	89 a3       	std	Y+33, r24	; 0x21
    316a:	0f c0       	rjmp	.+30     	; 0x318a <LCD_sendCommand+0x1c0>
    316c:	88 ec       	ldi	r24, 0xC8	; 200
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	98 a3       	std	Y+32, r25	; 0x20
    3172:	8f 8f       	std	Y+31, r24	; 0x1f
    3174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3176:	98 a1       	ldd	r25, Y+32	; 0x20
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <LCD_sendCommand+0x1ae>
    317c:	98 a3       	std	Y+32, r25	; 0x20
    317e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	89 a1       	ldd	r24, Y+33	; 0x21
    3182:	9a a1       	ldd	r25, Y+34	; 0x22
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	9a a3       	std	Y+34, r25	; 0x22
    3188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	89 a1       	ldd	r24, Y+33	; 0x21
    318c:	9a a1       	ldd	r25, Y+34	; 0x22
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <LCD_sendCommand+0x1a2>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	6b a1       	ldd	r22, Y+35	; 0x23
    3196:	7c a1       	ldd	r23, Y+36	; 0x24
    3198:	8d a1       	ldd	r24, Y+37	; 0x25
    319a:	9e a1       	ldd	r25, Y+38	; 0x26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	89 a1       	ldd	r24, Y+33	; 0x21
    31aa:	9a a1       	ldd	r25, Y+34	; 0x22
    31ac:	9e 8f       	std	Y+30, r25	; 0x1e
    31ae:	8d 8f       	std	Y+29, r24	; 0x1d
    31b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <LCD_sendCommand+0x1ea>
    31b8:	9e 8f       	std	Y+30, r25	; 0x1e
    31ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	69 ad       	ldd	r22, Y+57	; 0x39
    31c0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <GPIO_writePort>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 e8       	ldi	r26, 0x80	; 128
    31ca:	bf e3       	ldi	r27, 0x3F	; 63
    31cc:	89 8f       	std	Y+25, r24	; 0x19
    31ce:	9a 8f       	std	Y+26, r25	; 0x1a
    31d0:	ab 8f       	std	Y+27, r26	; 0x1b
    31d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	69 8d       	ldd	r22, Y+25	; 0x19
    31d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a ef       	ldi	r20, 0xFA	; 250
    31e2:	54 e4       	ldi	r21, 0x44	; 68
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8d 8b       	std	Y+21, r24	; 0x15
    31ee:	9e 8b       	std	Y+22, r25	; 0x16
    31f0:	af 8b       	std	Y+23, r26	; 0x17
    31f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f4:	6d 89       	ldd	r22, Y+21	; 0x15
    31f6:	7e 89       	ldd	r23, Y+22	; 0x16
    31f8:	8f 89       	ldd	r24, Y+23	; 0x17
    31fa:	98 8d       	ldd	r25, Y+24	; 0x18
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <LCD_sendCommand+0x24c>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	69 8d       	ldd	r22, Y+25	; 0x19
    3230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <LCD_sendCommand+0x2ac>
    3258:	88 ec       	ldi	r24, 0xC8	; 200
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9a 8b       	std	Y+18, r25	; 0x12
    325e:	89 8b       	std	Y+17, r24	; 0x11
    3260:	89 89       	ldd	r24, Y+17	; 0x11
    3262:	9a 89       	ldd	r25, Y+18	; 0x12
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <LCD_sendCommand+0x29a>
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <LCD_sendCommand+0x28e>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	8b 89       	ldd	r24, Y+19	; 0x13
    3296:	9c 89       	ldd	r25, Y+20	; 0x14
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
    329c:	8f 85       	ldd	r24, Y+15	; 0x0f
    329e:	98 89       	ldd	r25, Y+16	; 0x10
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <LCD_sendCommand+0x2d6>
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	62 e0       	ldi	r22, 0x02	; 2
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a0 e8       	ldi	r26, 0x80	; 128
    32b8:	bf e3       	ldi	r27, 0x3F	; 63
    32ba:	8b 87       	std	Y+11, r24	; 0x0b
    32bc:	9c 87       	std	Y+12, r25	; 0x0c
    32be:	ad 87       	std	Y+13, r26	; 0x0d
    32c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4a ef       	ldi	r20, 0xFA	; 250
    32d0:	54 e4       	ldi	r21, 0x44	; 68
    32d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8f 83       	std	Y+7, r24	; 0x07
    32dc:	98 87       	std	Y+8, r25	; 0x08
    32de:	a9 87       	std	Y+9, r26	; 0x09
    32e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e2:	6f 81       	ldd	r22, Y+7	; 0x07
    32e4:	78 85       	ldd	r23, Y+8	; 0x08
    32e6:	89 85       	ldd	r24, Y+9	; 0x09
    32e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e8       	ldi	r20, 0x80	; 128
    32f0:	5f e3       	ldi	r21, 0x3F	; 63
    32f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f6:	88 23       	and	r24, r24
    32f8:	2c f4       	brge	.+10     	; 0x3304 <LCD_sendCommand+0x33a>
		__ticks = 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
    3302:	3f c0       	rjmp	.+126    	; 0x3382 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3304:	6f 81       	ldd	r22, Y+7	; 0x07
    3306:	78 85       	ldd	r23, Y+8	; 0x08
    3308:	89 85       	ldd	r24, Y+9	; 0x09
    330a:	9a 85       	ldd	r25, Y+10	; 0x0a
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	3f ef       	ldi	r19, 0xFF	; 255
    3310:	4f e7       	ldi	r20, 0x7F	; 127
    3312:	57 e4       	ldi	r21, 0x47	; 71
    3314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3318:	18 16       	cp	r1, r24
    331a:	4c f5       	brge	.+82     	; 0x336e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331c:	6b 85       	ldd	r22, Y+11	; 0x0b
    331e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3320:	8d 85       	ldd	r24, Y+13	; 0x0d
    3322:	9e 85       	ldd	r25, Y+14	; 0x0e
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e2       	ldi	r20, 0x20	; 32
    332a:	51 e4       	ldi	r21, 0x41	; 65
    332c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_sendCommand+0x39a>
    3346:	88 ec       	ldi	r24, 0xC8	; 200
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9c 83       	std	Y+4, r25	; 0x04
    334c:	8b 83       	std	Y+3, r24	; 0x03
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_sendCommand+0x388>
    3356:	9c 83       	std	Y+4, r25	; 0x04
    3358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	69 f7       	brne	.-38     	; 0x3346 <LCD_sendCommand+0x37c>
    336c:	14 c0       	rjmp	.+40     	; 0x3396 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	6f 81       	ldd	r22, Y+7	; 0x07
    3370:	78 85       	ldd	r23, Y+8	; 0x08
    3372:	89 85       	ldd	r24, Y+9	; 0x09
    3374:	9a 85       	ldd	r25, Y+10	; 0x0a
    3376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <LCD_sendCommand+0x3c4>
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3396:	e9 96       	adiw	r28, 0x39	; 57
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	e9 97       	sbiw	r28, 0x39	; 57
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	a0 e8       	ldi	r26, 0x80	; 128
    33ce:	bf e3       	ldi	r27, 0x3F	; 63
    33d0:	8d ab       	std	Y+53, r24	; 0x35
    33d2:	9e ab       	std	Y+54, r25	; 0x36
    33d4:	af ab       	std	Y+55, r26	; 0x37
    33d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d8:	6d a9       	ldd	r22, Y+53	; 0x35
    33da:	7e a9       	ldd	r23, Y+54	; 0x36
    33dc:	8f a9       	ldd	r24, Y+55	; 0x37
    33de:	98 ad       	ldd	r25, Y+56	; 0x38
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	4a ef       	ldi	r20, 0xFA	; 250
    33e6:	54 e4       	ldi	r21, 0x44	; 68
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	89 ab       	std	Y+49, r24	; 0x31
    33f2:	9a ab       	std	Y+50, r25	; 0x32
    33f4:	ab ab       	std	Y+51, r26	; 0x33
    33f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33f8:	69 a9       	ldd	r22, Y+49	; 0x31
    33fa:	7a a9       	ldd	r23, Y+50	; 0x32
    33fc:	8b a9       	ldd	r24, Y+51	; 0x33
    33fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e8       	ldi	r20, 0x80	; 128
    3406:	5f e3       	ldi	r21, 0x3F	; 63
    3408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340c:	88 23       	and	r24, r24
    340e:	2c f4       	brge	.+10     	; 0x341a <LCD_displayCharacter+0x72>
		__ticks = 1;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	98 ab       	std	Y+48, r25	; 0x30
    3416:	8f a7       	std	Y+47, r24	; 0x2f
    3418:	3f c0       	rjmp	.+126    	; 0x3498 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    341a:	69 a9       	ldd	r22, Y+49	; 0x31
    341c:	7a a9       	ldd	r23, Y+50	; 0x32
    341e:	8b a9       	ldd	r24, Y+51	; 0x33
    3420:	9c a9       	ldd	r25, Y+52	; 0x34
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	3f ef       	ldi	r19, 0xFF	; 255
    3426:	4f e7       	ldi	r20, 0x7F	; 127
    3428:	57 e4       	ldi	r21, 0x47	; 71
    342a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342e:	18 16       	cp	r1, r24
    3430:	4c f5       	brge	.+82     	; 0x3484 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3432:	6d a9       	ldd	r22, Y+53	; 0x35
    3434:	7e a9       	ldd	r23, Y+54	; 0x36
    3436:	8f a9       	ldd	r24, Y+55	; 0x37
    3438:	98 ad       	ldd	r25, Y+56	; 0x38
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e2       	ldi	r20, 0x20	; 32
    3440:	51 e4       	ldi	r21, 0x41	; 65
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	98 ab       	std	Y+48, r25	; 0x30
    3458:	8f a7       	std	Y+47, r24	; 0x2f
    345a:	0f c0       	rjmp	.+30     	; 0x347a <LCD_displayCharacter+0xd2>
    345c:	88 ec       	ldi	r24, 0xC8	; 200
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9e a7       	std	Y+46, r25	; 0x2e
    3462:	8d a7       	std	Y+45, r24	; 0x2d
    3464:	8d a5       	ldd	r24, Y+45	; 0x2d
    3466:	9e a5       	ldd	r25, Y+46	; 0x2e
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LCD_displayCharacter+0xc0>
    346c:	9e a7       	std	Y+46, r25	; 0x2e
    346e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3470:	8f a5       	ldd	r24, Y+47	; 0x2f
    3472:	98 a9       	ldd	r25, Y+48	; 0x30
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	98 ab       	std	Y+48, r25	; 0x30
    3478:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347a:	8f a5       	ldd	r24, Y+47	; 0x2f
    347c:	98 a9       	ldd	r25, Y+48	; 0x30
    347e:	00 97       	sbiw	r24, 0x00	; 0
    3480:	69 f7       	brne	.-38     	; 0x345c <LCD_displayCharacter+0xb4>
    3482:	14 c0       	rjmp	.+40     	; 0x34ac <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3484:	69 a9       	ldd	r22, Y+49	; 0x31
    3486:	7a a9       	ldd	r23, Y+50	; 0x32
    3488:	8b a9       	ldd	r24, Y+51	; 0x33
    348a:	9c a9       	ldd	r25, Y+52	; 0x34
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	98 ab       	std	Y+48, r25	; 0x30
    3496:	8f a7       	std	Y+47, r24	; 0x2f
    3498:	8f a5       	ldd	r24, Y+47	; 0x2f
    349a:	98 a9       	ldd	r25, Y+48	; 0x30
    349c:	9c a7       	std	Y+44, r25	; 0x2c
    349e:	8b a7       	std	Y+43, r24	; 0x2b
    34a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <LCD_displayCharacter+0xfc>
    34a8:	9c a7       	std	Y+44, r25	; 0x2c
    34aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e8       	ldi	r26, 0x80	; 128
    34bc:	bf e3       	ldi	r27, 0x3F	; 63
    34be:	8f a3       	std	Y+39, r24	; 0x27
    34c0:	98 a7       	std	Y+40, r25	; 0x28
    34c2:	a9 a7       	std	Y+41, r26	; 0x29
    34c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c6:	6f a1       	ldd	r22, Y+39	; 0x27
    34c8:	78 a5       	ldd	r23, Y+40	; 0x28
    34ca:	89 a5       	ldd	r24, Y+41	; 0x29
    34cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4a ef       	ldi	r20, 0xFA	; 250
    34d4:	54 e4       	ldi	r21, 0x44	; 68
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	8b a3       	std	Y+35, r24	; 0x23
    34e0:	9c a3       	std	Y+36, r25	; 0x24
    34e2:	ad a3       	std	Y+37, r26	; 0x25
    34e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34e6:	6b a1       	ldd	r22, Y+35	; 0x23
    34e8:	7c a1       	ldd	r23, Y+36	; 0x24
    34ea:	8d a1       	ldd	r24, Y+37	; 0x25
    34ec:	9e a1       	ldd	r25, Y+38	; 0x26
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e8       	ldi	r20, 0x80	; 128
    34f4:	5f e3       	ldi	r21, 0x3F	; 63
    34f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	2c f4       	brge	.+10     	; 0x3508 <LCD_displayCharacter+0x160>
		__ticks = 1;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	9a a3       	std	Y+34, r25	; 0x22
    3504:	89 a3       	std	Y+33, r24	; 0x21
    3506:	3f c0       	rjmp	.+126    	; 0x3586 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3508:	6b a1       	ldd	r22, Y+35	; 0x23
    350a:	7c a1       	ldd	r23, Y+36	; 0x24
    350c:	8d a1       	ldd	r24, Y+37	; 0x25
    350e:	9e a1       	ldd	r25, Y+38	; 0x26
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351c:	18 16       	cp	r1, r24
    351e:	4c f5       	brge	.+82     	; 0x3572 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3520:	6f a1       	ldd	r22, Y+39	; 0x27
    3522:	78 a5       	ldd	r23, Y+40	; 0x28
    3524:	89 a5       	ldd	r24, Y+41	; 0x29
    3526:	9a a5       	ldd	r25, Y+42	; 0x2a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9a a3       	std	Y+34, r25	; 0x22
    3546:	89 a3       	std	Y+33, r24	; 0x21
    3548:	0f c0       	rjmp	.+30     	; 0x3568 <LCD_displayCharacter+0x1c0>
    354a:	88 ec       	ldi	r24, 0xC8	; 200
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	98 a3       	std	Y+32, r25	; 0x20
    3550:	8f 8f       	std	Y+31, r24	; 0x1f
    3552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3554:	98 a1       	ldd	r25, Y+32	; 0x20
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	f1 f7       	brne	.-4      	; 0x3556 <LCD_displayCharacter+0x1ae>
    355a:	98 a3       	std	Y+32, r25	; 0x20
    355c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355e:	89 a1       	ldd	r24, Y+33	; 0x21
    3560:	9a a1       	ldd	r25, Y+34	; 0x22
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	9a a3       	std	Y+34, r25	; 0x22
    3566:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3568:	89 a1       	ldd	r24, Y+33	; 0x21
    356a:	9a a1       	ldd	r25, Y+34	; 0x22
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	69 f7       	brne	.-38     	; 0x354a <LCD_displayCharacter+0x1a2>
    3570:	14 c0       	rjmp	.+40     	; 0x359a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3572:	6b a1       	ldd	r22, Y+35	; 0x23
    3574:	7c a1       	ldd	r23, Y+36	; 0x24
    3576:	8d a1       	ldd	r24, Y+37	; 0x25
    3578:	9e a1       	ldd	r25, Y+38	; 0x26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9a a3       	std	Y+34, r25	; 0x22
    3584:	89 a3       	std	Y+33, r24	; 0x21
    3586:	89 a1       	ldd	r24, Y+33	; 0x21
    3588:	9a a1       	ldd	r25, Y+34	; 0x22
    358a:	9e 8f       	std	Y+30, r25	; 0x1e
    358c:	8d 8f       	std	Y+29, r24	; 0x1d
    358e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_displayCharacter+0x1ea>
    3596:	9e 8f       	std	Y+30, r25	; 0x1e
    3598:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	69 ad       	ldd	r22, Y+57	; 0x39
    359e:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <GPIO_writePort>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	a0 e8       	ldi	r26, 0x80	; 128
    35a8:	bf e3       	ldi	r27, 0x3F	; 63
    35aa:	89 8f       	std	Y+25, r24	; 0x19
    35ac:	9a 8f       	std	Y+26, r25	; 0x1a
    35ae:	ab 8f       	std	Y+27, r26	; 0x1b
    35b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b2:	69 8d       	ldd	r22, Y+25	; 0x19
    35b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a ef       	ldi	r20, 0xFA	; 250
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	8d 8b       	std	Y+21, r24	; 0x15
    35cc:	9e 8b       	std	Y+22, r25	; 0x16
    35ce:	af 8b       	std	Y+23, r26	; 0x17
    35d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35d2:	6d 89       	ldd	r22, Y+21	; 0x15
    35d4:	7e 89       	ldd	r23, Y+22	; 0x16
    35d6:	8f 89       	ldd	r24, Y+23	; 0x17
    35d8:	98 8d       	ldd	r25, Y+24	; 0x18
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e8       	ldi	r20, 0x80	; 128
    35e0:	5f e3       	ldi	r21, 0x3F	; 63
    35e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	2c f4       	brge	.+10     	; 0x35f4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
    35f2:	3f c0       	rjmp	.+126    	; 0x3672 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    35f4:	6d 89       	ldd	r22, Y+21	; 0x15
    35f6:	7e 89       	ldd	r23, Y+22	; 0x16
    35f8:	8f 89       	ldd	r24, Y+23	; 0x17
    35fa:	98 8d       	ldd	r25, Y+24	; 0x18
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	3f ef       	ldi	r19, 0xFF	; 255
    3600:	4f e7       	ldi	r20, 0x7F	; 127
    3602:	57 e4       	ldi	r21, 0x47	; 71
    3604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3608:	18 16       	cp	r1, r24
    360a:	4c f5       	brge	.+82     	; 0x365e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360c:	69 8d       	ldd	r22, Y+25	; 0x19
    360e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e2       	ldi	r20, 0x20	; 32
    361a:	51 e4       	ldi	r21, 0x41	; 65
    361c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	9c 8b       	std	Y+20, r25	; 0x14
    3632:	8b 8b       	std	Y+19, r24	; 0x13
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <LCD_displayCharacter+0x2ac>
    3636:	88 ec       	ldi	r24, 0xC8	; 200
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9a 8b       	std	Y+18, r25	; 0x12
    363c:	89 8b       	std	Y+17, r24	; 0x11
    363e:	89 89       	ldd	r24, Y+17	; 0x11
    3640:	9a 89       	ldd	r25, Y+18	; 0x12
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <LCD_displayCharacter+0x29a>
    3646:	9a 8b       	std	Y+18, r25	; 0x12
    3648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364a:	8b 89       	ldd	r24, Y+19	; 0x13
    364c:	9c 89       	ldd	r25, Y+20	; 0x14
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	9c 8b       	std	Y+20, r25	; 0x14
    3652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	69 f7       	brne	.-38     	; 0x3636 <LCD_displayCharacter+0x28e>
    365c:	14 c0       	rjmp	.+40     	; 0x3686 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365e:	6d 89       	ldd	r22, Y+21	; 0x15
    3660:	7e 89       	ldd	r23, Y+22	; 0x16
    3662:	8f 89       	ldd	r24, Y+23	; 0x17
    3664:	98 8d       	ldd	r25, Y+24	; 0x18
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9c 8b       	std	Y+20, r25	; 0x14
    3670:	8b 8b       	std	Y+19, r24	; 0x13
    3672:	8b 89       	ldd	r24, Y+19	; 0x13
    3674:	9c 89       	ldd	r25, Y+20	; 0x14
    3676:	98 8b       	std	Y+16, r25	; 0x10
    3678:	8f 87       	std	Y+15, r24	; 0x0f
    367a:	8f 85       	ldd	r24, Y+15	; 0x0f
    367c:	98 89       	ldd	r25, Y+16	; 0x10
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <LCD_displayCharacter+0x2d6>
    3682:	98 8b       	std	Y+16, r25	; 0x10
    3684:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	62 e0       	ldi	r22, 0x02	; 2
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <GPIO_writePin>
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	a0 e8       	ldi	r26, 0x80	; 128
    3696:	bf e3       	ldi	r27, 0x3F	; 63
    3698:	8b 87       	std	Y+11, r24	; 0x0b
    369a:	9c 87       	std	Y+12, r25	; 0x0c
    369c:	ad 87       	std	Y+13, r26	; 0x0d
    369e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	4a ef       	ldi	r20, 0xFA	; 250
    36ae:	54 e4       	ldi	r21, 0x44	; 68
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8f 83       	std	Y+7, r24	; 0x07
    36ba:	98 87       	std	Y+8, r25	; 0x08
    36bc:	a9 87       	std	Y+9, r26	; 0x09
    36be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c0:	6f 81       	ldd	r22, Y+7	; 0x07
    36c2:	78 85       	ldd	r23, Y+8	; 0x08
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e8       	ldi	r20, 0x80	; 128
    36ce:	5f e3       	ldi	r21, 0x3F	; 63
    36d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d4:	88 23       	and	r24, r24
    36d6:	2c f4       	brge	.+10     	; 0x36e2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
    36e0:	3f c0       	rjmp	.+126    	; 0x3760 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    36e2:	6f 81       	ldd	r22, Y+7	; 0x07
    36e4:	78 85       	ldd	r23, Y+8	; 0x08
    36e6:	89 85       	ldd	r24, Y+9	; 0x09
    36e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	3f ef       	ldi	r19, 0xFF	; 255
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	57 e4       	ldi	r21, 0x47	; 71
    36f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	4c f5       	brge	.+82     	; 0x374c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3700:	9e 85       	ldd	r25, Y+14	; 0x0e
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e2       	ldi	r20, 0x20	; 32
    3708:	51 e4       	ldi	r21, 0x41	; 65
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <LCD_displayCharacter+0x39a>
    3724:	88 ec       	ldi	r24, 0xC8	; 200
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	9c 83       	std	Y+4, r25	; 0x04
    372a:	8b 83       	std	Y+3, r24	; 0x03
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	9c 81       	ldd	r25, Y+4	; 0x04
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <LCD_displayCharacter+0x388>
    3734:	9c 83       	std	Y+4, r25	; 0x04
    3736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	8d 81       	ldd	r24, Y+5	; 0x05
    3744:	9e 81       	ldd	r25, Y+6	; 0x06
    3746:	00 97       	sbiw	r24, 0x00	; 0
    3748:	69 f7       	brne	.-38     	; 0x3724 <LCD_displayCharacter+0x37c>
    374a:	14 c0       	rjmp	.+40     	; 0x3774 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	9e 83       	std	Y+6, r25	; 0x06
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	8d 81       	ldd	r24, Y+5	; 0x05
    3762:	9e 81       	ldd	r25, Y+6	; 0x06
    3764:	9a 83       	std	Y+2, r25	; 0x02
    3766:	89 83       	std	Y+1, r24	; 0x01
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	9a 81       	ldd	r25, Y+2	; 0x02
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <LCD_displayCharacter+0x3c4>
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3774:	e9 96       	adiw	r28, 0x39	; 57
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	00 d0       	rcall	.+0      	; 0x378c <LCD_displayString+0x6>
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	9a 83       	std	Y+2, r25	; 0x02
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	0a c0       	rjmp	.+20     	; 0x37aa <LCD_displayString+0x24>


	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    3796:	e9 81       	ldd	r30, Y+1	; 0x01
    3798:	fa 81       	ldd	r31, Y+2	; 0x02
    379a:	80 81       	ld	r24, Z
    379c:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_displayCharacter>
		Str++;
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	9a 83       	std	Y+2, r25	; 0x02
    37a8:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{


	while((*Str) != '\0')
    37aa:	e9 81       	ldd	r30, Y+1	; 0x01
    37ac:	fa 81       	ldd	r31, Y+2	; 0x02
    37ae:	80 81       	ld	r24, Z
    37b0:	88 23       	and	r24, r24
    37b2:	89 f7       	brne	.-30     	; 0x3796 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}

}
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <LCD_moveCursor+0x6>
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <LCD_moveCursor+0x8>
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	8a 83       	std	Y+2, r24	; 0x02
    37ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	3d 83       	std	Y+5, r19	; 0x05
    37d8:	2c 83       	std	Y+4, r18	; 0x04
    37da:	8c 81       	ldd	r24, Y+4	; 0x04
    37dc:	9d 81       	ldd	r25, Y+5	; 0x05
    37de:	81 30       	cpi	r24, 0x01	; 1
    37e0:	91 05       	cpc	r25, r1
    37e2:	c1 f0       	breq	.+48     	; 0x3814 <LCD_moveCursor+0x56>
    37e4:	2c 81       	ldd	r18, Y+4	; 0x04
    37e6:	3d 81       	ldd	r19, Y+5	; 0x05
    37e8:	22 30       	cpi	r18, 0x02	; 2
    37ea:	31 05       	cpc	r19, r1
    37ec:	2c f4       	brge	.+10     	; 0x37f8 <LCD_moveCursor+0x3a>
    37ee:	8c 81       	ldd	r24, Y+4	; 0x04
    37f0:	9d 81       	ldd	r25, Y+5	; 0x05
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	61 f0       	breq	.+24     	; 0x380e <LCD_moveCursor+0x50>
    37f6:	19 c0       	rjmp	.+50     	; 0x382a <LCD_moveCursor+0x6c>
    37f8:	2c 81       	ldd	r18, Y+4	; 0x04
    37fa:	3d 81       	ldd	r19, Y+5	; 0x05
    37fc:	22 30       	cpi	r18, 0x02	; 2
    37fe:	31 05       	cpc	r19, r1
    3800:	69 f0       	breq	.+26     	; 0x381c <LCD_moveCursor+0x5e>
    3802:	8c 81       	ldd	r24, Y+4	; 0x04
    3804:	9d 81       	ldd	r25, Y+5	; 0x05
    3806:	83 30       	cpi	r24, 0x03	; 3
    3808:	91 05       	cpc	r25, r1
    380a:	61 f0       	breq	.+24     	; 0x3824 <LCD_moveCursor+0x66>
    380c:	0e c0       	rjmp	.+28     	; 0x382a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	0b c0       	rjmp	.+22     	; 0x382a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3814:	8b 81       	ldd	r24, Y+3	; 0x03
    3816:	80 5c       	subi	r24, 0xC0	; 192
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	07 c0       	rjmp	.+14     	; 0x382a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    381c:	8b 81       	ldd	r24, Y+3	; 0x03
    381e:	80 5f       	subi	r24, 0xF0	; 240
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	03 c0       	rjmp	.+6      	; 0x382a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	80 5b       	subi	r24, 0xB0	; 176
    3828:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	80 68       	ori	r24, 0x80	; 128
    382e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_sendCommand>
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	00 d0       	rcall	.+0      	; 0x3848 <LCD_displayStringRowColumn+0x6>
    3848:	00 d0       	rcall	.+0      	; 0x384a <LCD_displayStringRowColumn+0x8>
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	6a 83       	std	Y+2, r22	; 0x02
    3852:	5c 83       	std	Y+4, r21	; 0x04
    3854:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	6a 81       	ldd	r22, Y+2	; 0x02
    385a:	0e 94 df 1b 	call	0x37be	; 0x37be <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
}
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	62 97       	sbiw	r28, 0x12	; 18
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	9a 8b       	std	Y+18, r25	; 0x12
    388a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    388c:	89 89       	ldd	r24, Y+17	; 0x11
    388e:	9a 89       	ldd	r25, Y+18	; 0x12
    3890:	9e 01       	movw	r18, r28
    3892:	2f 5f       	subi	r18, 0xFF	; 255
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	b9 01       	movw	r22, r18
    3898:	4a e0       	ldi	r20, 0x0A	; 10
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <itoa>
   LCD_displayString(buff); /* Display the string */
    38a0:	ce 01       	movw	r24, r28
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <LCD_displayString>
}
    38a8:	62 96       	adiw	r28, 0x12	; 18
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	de bf       	out	0x3e, r29	; 62
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	cd bf       	out	0x3d, r28	; 61
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_sendCommand>
}
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <main>:

#include "HMI_ECU.h"


int main()
{
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
	start();
    38d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <start>
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
}
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <__vector_9>:
/*******************************************************************************
 *                                ISR                                          *
 *******************************************************************************/
/* Timer1 OVERFLOW mode */
ISR(TIMER1_OVF_vect)
{
    38e4:	1f 92       	push	r1
    38e6:	0f 92       	push	r0
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	0f 92       	push	r0
    38ec:	11 24       	eor	r1, r1
    38ee:	2f 93       	push	r18
    38f0:	3f 93       	push	r19
    38f2:	4f 93       	push	r20
    38f4:	5f 93       	push	r21
    38f6:	6f 93       	push	r22
    38f8:	7f 93       	push	r23
    38fa:	8f 93       	push	r24
    38fc:	9f 93       	push	r25
    38fe:	af 93       	push	r26
    3900:	bf 93       	push	r27
    3902:	ef 93       	push	r30
    3904:	ff 93       	push	r31
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    390e:	80 91 46 01 	lds	r24, 0x0146
    3912:	90 91 47 01 	lds	r25, 0x0147
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	29 f0       	breq	.+10     	; 0x3924 <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
    391a:	e0 91 46 01 	lds	r30, 0x0146
    391e:	f0 91 47 01 	lds	r31, 0x0147
    3922:	09 95       	icall
	}
}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	ff 91       	pop	r31
    392a:	ef 91       	pop	r30
    392c:	bf 91       	pop	r27
    392e:	af 91       	pop	r26
    3930:	9f 91       	pop	r25
    3932:	8f 91       	pop	r24
    3934:	7f 91       	pop	r23
    3936:	6f 91       	pop	r22
    3938:	5f 91       	pop	r21
    393a:	4f 91       	pop	r20
    393c:	3f 91       	pop	r19
    393e:	2f 91       	pop	r18
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <__vector_7>:

/* Timer1 COMPARE mode */
ISR(TIMER1_COMPA_vect)
{
    394a:	1f 92       	push	r1
    394c:	0f 92       	push	r0
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	0f 92       	push	r0
    3952:	11 24       	eor	r1, r1
    3954:	2f 93       	push	r18
    3956:	3f 93       	push	r19
    3958:	4f 93       	push	r20
    395a:	5f 93       	push	r21
    395c:	6f 93       	push	r22
    395e:	7f 93       	push	r23
    3960:	8f 93       	push	r24
    3962:	9f 93       	push	r25
    3964:	af 93       	push	r26
    3966:	bf 93       	push	r27
    3968:	ef 93       	push	r30
    396a:	ff 93       	push	r31
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    3974:	80 91 46 01 	lds	r24, 0x0146
    3978:	90 91 47 01 	lds	r25, 0x0147
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	29 f0       	breq	.+10     	; 0x398a <__vector_7+0x40>
	{
		(*g_Timer1CallBackPtr)();
    3980:	e0 91 46 01 	lds	r30, 0x0146
    3984:	f0 91 47 01 	lds	r31, 0x0147
    3988:	09 95       	icall
	}
}
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	ff 91       	pop	r31
    3990:	ef 91       	pop	r30
    3992:	bf 91       	pop	r27
    3994:	af 91       	pop	r26
    3996:	9f 91       	pop	r25
    3998:	8f 91       	pop	r24
    399a:	7f 91       	pop	r23
    399c:	6f 91       	pop	r22
    399e:	5f 91       	pop	r21
    39a0:	4f 91       	pop	r20
    39a2:	3f 91       	pop	r19
    39a4:	2f 91       	pop	r18
    39a6:	0f 90       	pop	r0
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	0f 90       	pop	r0
    39ac:	1f 90       	pop	r1
    39ae:	18 95       	reti

000039b0 <Timer1_init>:
/*
 * Description: A function that initialize a timer1 with dynamic configurations.
 *
 */
void Timer1_init(const Timer1_Configtype * Config_Ptr)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <Timer1_init+0x6>
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
    39ba:	9a 83       	std	Y+2, r25	; 0x02
    39bc:	89 83       	std	Y+1, r24	; 0x01
        TCCR1A =0;
    39be:	ef e4       	ldi	r30, 0x4F	; 79
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    39c4:	af e4       	ldi	r26, 0x4F	; 79
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	ef e4       	ldi	r30, 0x4F	; 79
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	88 60       	ori	r24, 0x08	; 8
    39d0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    39d2:	af e4       	ldi	r26, 0x4F	; 79
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	ef e4       	ldi	r30, 0x4F	; 79
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	84 60       	ori	r24, 0x04	; 4
    39de:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->prescale;
    39e0:	ae e4       	ldi	r26, 0x4E	; 78
    39e2:	b0 e0       	ldi	r27, 0x00	; 0
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	85 81       	ldd	r24, Z+5	; 0x05
    39ea:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initialvalue;
    39ec:	ac e4       	ldi	r26, 0x4C	; 76
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e9 81       	ldd	r30, Y+1	; 0x01
    39f2:	fa 81       	ldd	r31, Y+2	; 0x02
    39f4:	81 81       	ldd	r24, Z+1	; 0x01
    39f6:	92 81       	ldd	r25, Z+2	; 0x02
    39f8:	11 96       	adiw	r26, 0x01	; 1
    39fa:	9c 93       	st	X, r25
    39fc:	8e 93       	st	-X, r24

		if( (Config_Ptr -> mode) == NORMAL )
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	80 81       	ld	r24, Z
    3a04:	88 23       	and	r24, r24
    3a06:	79 f4       	brne	.+30     	; 0x3a26 <Timer1_init+0x76>
		{
			/* Enable interrupts for overflow mode */
			SET_BIT(TIMSK,TOIE1);
    3a08:	a9 e5       	ldi	r26, 0x59	; 89
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	e9 e5       	ldi	r30, 0x59	; 89
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	84 60       	ori	r24, 0x04	; 4
    3a14:	8c 93       	st	X, r24
			/* Enable overflow flag */
			SET_BIT(TIFR,TOV1);
    3a16:	a8 e5       	ldi	r26, 0x58	; 88
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e8 e5       	ldi	r30, 0x58	; 88
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	84 60       	ori	r24, 0x04	; 4
    3a22:	8c 93       	st	X, r24
    3a24:	23 c0       	rjmp	.+70     	; 0x3a6c <Timer1_init+0xbc>
		}
		else if ( (Config_Ptr -> mode) == COMPARE )
    3a26:	e9 81       	ldd	r30, Y+1	; 0x01
    3a28:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2a:	80 81       	ld	r24, Z
    3a2c:	81 30       	cpi	r24, 0x01	; 1
    3a2e:	f1 f4       	brne	.+60     	; 0x3a6c <Timer1_init+0xbc>
		{
			SET_BIT(TCCR1B,WGM12);
    3a30:	ae e4       	ldi	r26, 0x4E	; 78
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	ee e4       	ldi	r30, 0x4E	; 78
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 81       	ld	r24, Z
    3a3a:	88 60       	ori	r24, 0x08	; 8
    3a3c:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> comparevalue;
    3a3e:	aa e4       	ldi	r26, 0x4A	; 74
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e9 81       	ldd	r30, Y+1	; 0x01
    3a44:	fa 81       	ldd	r31, Y+2	; 0x02
    3a46:	83 81       	ldd	r24, Z+3	; 0x03
    3a48:	94 81       	ldd	r25, Z+4	; 0x04
    3a4a:	11 96       	adiw	r26, 0x01	; 1
    3a4c:	9c 93       	st	X, r25
    3a4e:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
    3a50:	a9 e5       	ldi	r26, 0x59	; 89
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	e9 e5       	ldi	r30, 0x59	; 89
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	80 61       	ori	r24, 0x10	; 16
    3a5c:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    3a5e:	a8 e5       	ldi	r26, 0x58	; 88
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	e8 e5       	ldi	r30, 0x58	; 88
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	80 61       	ori	r24, 0x10	; 16
    3a6a:	8c 93       	st	X, r24
		}
}
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	08 95       	ret

00003a76 <Timer1_deInit>:
/*
 * Description: A function that Deinitialize a timer1 with dynamic configurations.
 *
 */
void Timer1_deInit(void)
{
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
    3a7e:	ef e4       	ldi	r30, 0x4F	; 79
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	10 82       	st	Z, r1
	TCCR1B = 0; /* disable clock */
    3a84:	ee e4       	ldi	r30, 0x4E	; 78
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	10 82       	st	Z, r1
	TCNT1 = 0;
    3a8a:	ec e4       	ldi	r30, 0x4C	; 76
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	11 82       	std	Z+1, r1	; 0x01
    3a90:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    3a92:	a9 e5       	ldi	r26, 0x59	; 89
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	e9 e5       	ldi	r30, 0x59	; 89
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8b 7f       	andi	r24, 0xFB	; 251
    3a9e:	8c 93       	st	X, r24
	OCR1A = 0;  /* clear compare value for CTC mode */
    3aa0:	ea e4       	ldi	r30, 0x4A	; 74
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	11 82       	std	Z+1, r1	; 0x01
    3aa6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    3aa8:	a9 e5       	ldi	r26, 0x59	; 89
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	e9 e5       	ldi	r30, 0x59	; 89
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	8f 7e       	andi	r24, 0xEF	; 239
    3ab4:	8c 93       	st	X, r24
	g_Timer1CallBackPtr = NULL_PTR;
    3ab6:	10 92 47 01 	sts	0x0147, r1
    3aba:	10 92 46 01 	sts	0x0146, r1
}
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <Timer1_setCallBack>:
/*
 * Description: A function that Call Back A Function.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	00 d0       	rcall	.+0      	; 0x3aca <Timer1_setCallBack+0x6>
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	90 93 47 01 	sts	0x0147, r25
    3ada:	80 93 46 01 	sts	0x0146, r24
}
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	cf 91       	pop	r28
    3ae4:	df 91       	pop	r29
    3ae6:	08 95       	ret

00003ae8 <Timer1_setValue>:
/*
 * Description: A function that set a new value.
 *
 */
void Timer1_setValue (uint8 newValue)
{
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = newValue;
    3af4:	ec e4       	ldi	r30, 0x4C	; 76
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	88 2f       	mov	r24, r24
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	80 83       	st	Z, r24
}
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <Timer1_clearValue>:
/*
 * Description: A function that clear the value.
 *
 */
void Timer1_clearValue(void)
{
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    3b12:	ec e4       	ldi	r30, 0x4C	; 76
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	11 82       	std	Z+1, r1	; 0x01
    3b18:	10 82       	st	Z, r1
}
    3b1a:	cf 91       	pop	r28
    3b1c:	df 91       	pop	r29
    3b1e:	08 95       	ret

00003b20 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <UART_init+0x6>
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    3b2e:	aa e2       	ldi	r26, 0x2A	; 42
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	ea e2       	ldi	r30, 0x2A	; 42
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	88 61       	ori	r24, 0x18	; 24
    3b3a:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
    3b3c:	a0 e4       	ldi	r26, 0x40	; 64
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e0 e4       	ldi	r30, 0x40	; 64
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	80 68       	ori	r24, 0x80	; 128
    3b48:	8c 93       	st	X, r24
    UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    3b4a:	a0 e4       	ldi	r26, 0x40	; 64
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e0 e4       	ldi	r30, 0x40	; 64
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	86 60       	ori	r24, 0x06	; 6
    3b56:	8c 93       	st	X, r24

    UCSRC |= ((Config_Ptr->parity) << 4); //Choose Parity Bits
    3b58:	a0 e4       	ldi	r26, 0x40	; 64
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	e0 e4       	ldi	r30, 0x40	; 64
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	28 2f       	mov	r18, r24
    3b64:	e9 81       	ldd	r30, Y+1	; 0x01
    3b66:	fa 81       	ldd	r31, Y+2	; 0x02
    3b68:	81 81       	ldd	r24, Z+1	; 0x01
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	82 95       	swap	r24
    3b70:	92 95       	swap	r25
    3b72:	90 7f       	andi	r25, 0xF0	; 240
    3b74:	98 27       	eor	r25, r24
    3b76:	80 7f       	andi	r24, 0xF0	; 240
    3b78:	98 27       	eor	r25, r24
    3b7a:	82 2b       	or	r24, r18
    3b7c:	8c 93       	st	X, r24


    if(Config_Ptr->bit_data)
    3b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b80:	fa 81       	ldd	r31, Y+2	; 0x02
    3b82:	80 81       	ld	r24, Z
    3b84:	88 23       	and	r24, r24
    3b86:	29 f1       	breq	.+74     	; 0x3bd2 <UART_init+0xb2>
    {
    	UCSRC |= ((Config_Ptr->bit_data) << 6);
    3b88:	a0 e4       	ldi	r26, 0x40	; 64
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	e0 e4       	ldi	r30, 0x40	; 64
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	80 81       	ld	r24, Z
    3b92:	28 2f       	mov	r18, r24
    3b94:	e9 81       	ldd	r30, Y+1	; 0x01
    3b96:	fa 81       	ldd	r31, Y+2	; 0x02
    3b98:	80 81       	ld	r24, Z
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	00 24       	eor	r0, r0
    3ba0:	96 95       	lsr	r25
    3ba2:	87 95       	ror	r24
    3ba4:	07 94       	ror	r0
    3ba6:	96 95       	lsr	r25
    3ba8:	87 95       	ror	r24
    3baa:	07 94       	ror	r0
    3bac:	98 2f       	mov	r25, r24
    3bae:	80 2d       	mov	r24, r0
    3bb0:	82 2b       	or	r24, r18
    3bb2:	8c 93       	st	X, r24

    	UCSRC |= (1<<UCPOL);
    3bb4:	a0 e4       	ldi	r26, 0x40	; 64
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e0 e4       	ldi	r30, 0x40	; 64
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	81 60       	ori	r24, 0x01	; 1
    3bc0:	8c 93       	st	X, r24

    	UBRRH = (Asynchronous_Normal >> 8);
    3bc2:	e0 e4       	ldi	r30, 0x40	; 64
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	10 82       	st	Z, r1
    	UBRRL = Asynchronous_Normal;
    3bc8:	e9 e2       	ldi	r30, 0x29	; 41
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	87 e6       	ldi	r24, 0x67	; 103
    3bce:	80 83       	st	Z, r24
    3bd0:	25 c0       	rjmp	.+74     	; 0x3c1c <UART_init+0xfc>
    }
	
    else
    {
    	UCSRC &= ~((Config_Ptr->bit_data) << 6);
    3bd2:	a0 e4       	ldi	r26, 0x40	; 64
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	e0 e4       	ldi	r30, 0x40	; 64
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	28 2f       	mov	r18, r24
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	80 81       	ld	r24, Z
    3be4:	88 2f       	mov	r24, r24
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	00 24       	eor	r0, r0
    3bea:	96 95       	lsr	r25
    3bec:	87 95       	ror	r24
    3bee:	07 94       	ror	r0
    3bf0:	96 95       	lsr	r25
    3bf2:	87 95       	ror	r24
    3bf4:	07 94       	ror	r0
    3bf6:	98 2f       	mov	r25, r24
    3bf8:	80 2d       	mov	r24, r0
    3bfa:	80 95       	com	r24
    3bfc:	82 23       	and	r24, r18
    3bfe:	8c 93       	st	X, r24
    	UCSRA |= (1<<U2X);
    3c00:	ab e2       	ldi	r26, 0x2B	; 43
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	eb e2       	ldi	r30, 0x2B	; 43
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
    3c0a:	82 60       	ori	r24, 0x02	; 2
    3c0c:	8c 93       	st	X, r24
    	UBRRH = (Asynchronous_doubleSpeed >> 8);
    3c0e:	e0 e4       	ldi	r30, 0x40	; 64
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	10 82       	st	Z, r1
    	UBRRL =Asynchronous_doubleSpeed;
    3c14:	e9 e2       	ldi	r30, 0x29	; 41
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	83 e3       	ldi	r24, 0x33	; 51
    3c1a:	80 83       	st	Z, r24
    }
}
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	08 95       	ret

00003c26 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3c26:	df 93       	push	r29
    3c28:	cf 93       	push	r28
    3c2a:	0f 92       	push	r0
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3c32:	eb e2       	ldi	r30, 0x2B	; 43
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	80 72       	andi	r24, 0x20	; 32
    3c3e:	90 70       	andi	r25, 0x00	; 0
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	b9 f3       	breq	.-18     	; 0x3c32 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3c44:	ec e2       	ldi	r30, 0x2C	; 44
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3c5c:	eb e2       	ldi	r30, 0x2B	; 43
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	88 23       	and	r24, r24
    3c64:	dc f7       	brge	.-10     	; 0x3c5c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3c66:	ec e2       	ldi	r30, 0x2C	; 44
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
}
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	08 95       	ret

00003c72 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <UART_sendString+0x6>
    3c78:	0f 92       	push	r0
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c82:	19 82       	std	Y+1, r1	; 0x01
    3c84:	0e c0       	rjmp	.+28     	; 0x3ca2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	28 2f       	mov	r18, r24
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c90:	fc 01       	movw	r30, r24
    3c92:	e2 0f       	add	r30, r18
    3c94:	f3 1f       	adc	r31, r19
    3c96:	80 81       	ld	r24, Z
    3c98:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <UART_sendByte>
		i++;
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ca0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	28 2f       	mov	r18, r24
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	9b 81       	ldd	r25, Y+3	; 0x03
    3cac:	fc 01       	movw	r30, r24
    3cae:	e2 0f       	add	r30, r18
    3cb0:	f3 1f       	adc	r31, r19
    3cb2:	80 81       	ld	r24, Z
    3cb4:	88 23       	and	r24, r24
    3cb6:	39 f7       	brne	.-50     	; 0x3c86 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret

00003cc4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	df 93       	push	r29
    3cca:	cf 93       	push	r28
    3ccc:	00 d0       	rcall	.+0      	; 0x3cce <UART_receiveString+0xa>
    3cce:	0f 92       	push	r0
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	9b 83       	std	Y+3, r25	; 0x03
    3cd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3cd8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	28 2f       	mov	r18, r24
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	8c 01       	movw	r16, r24
    3ce6:	02 0f       	add	r16, r18
    3ce8:	13 1f       	adc	r17, r19
    3cea:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    3cee:	f8 01       	movw	r30, r16
    3cf0:	80 83       	st	Z, r24
    3cf2:	0f c0       	rjmp	.+30     	; 0x3d12 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
    3cf6:	8f 5f       	subi	r24, 0xFF	; 255
    3cf8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	8a 81       	ldd	r24, Y+2	; 0x02
    3d02:	9b 81       	ldd	r25, Y+3	; 0x03
    3d04:	8c 01       	movw	r16, r24
    3d06:	02 0f       	add	r16, r18
    3d08:	13 1f       	adc	r17, r19
    3d0a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <UART_recieveByte>
    3d0e:	f8 01       	movw	r30, r16
    3d10:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	28 2f       	mov	r18, r24
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	e2 0f       	add	r30, r18
    3d20:	f3 1f       	adc	r31, r19
    3d22:	80 81       	ld	r24, Z
    3d24:	83 32       	cpi	r24, 0x23	; 35
    3d26:	31 f7       	brne	.-52     	; 0x3cf4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	28 2f       	mov	r18, r24
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	9b 81       	ldd	r25, Y+3	; 0x03
    3d32:	fc 01       	movw	r30, r24
    3d34:	e2 0f       	add	r30, r18
    3d36:	f3 1f       	adc	r31, r19
    3d38:	10 82       	st	Z, r1
}
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	08 95       	ret

00003d4a <__prologue_saves__>:
    3d4a:	2f 92       	push	r2
    3d4c:	3f 92       	push	r3
    3d4e:	4f 92       	push	r4
    3d50:	5f 92       	push	r5
    3d52:	6f 92       	push	r6
    3d54:	7f 92       	push	r7
    3d56:	8f 92       	push	r8
    3d58:	9f 92       	push	r9
    3d5a:	af 92       	push	r10
    3d5c:	bf 92       	push	r11
    3d5e:	cf 92       	push	r12
    3d60:	df 92       	push	r13
    3d62:	ef 92       	push	r14
    3d64:	ff 92       	push	r15
    3d66:	0f 93       	push	r16
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
    3d72:	ca 1b       	sub	r28, r26
    3d74:	db 0b       	sbc	r29, r27
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	09 94       	ijmp

00003d82 <__epilogue_restores__>:
    3d82:	2a 88       	ldd	r2, Y+18	; 0x12
    3d84:	39 88       	ldd	r3, Y+17	; 0x11
    3d86:	48 88       	ldd	r4, Y+16	; 0x10
    3d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d94:	b9 84       	ldd	r11, Y+9	; 0x09
    3d96:	c8 84       	ldd	r12, Y+8	; 0x08
    3d98:	df 80       	ldd	r13, Y+7	; 0x07
    3d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    3d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    3d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    3da0:	1b 81       	ldd	r17, Y+3	; 0x03
    3da2:	aa 81       	ldd	r26, Y+2	; 0x02
    3da4:	b9 81       	ldd	r27, Y+1	; 0x01
    3da6:	ce 0f       	add	r28, r30
    3da8:	d1 1d       	adc	r29, r1
    3daa:	0f b6       	in	r0, 0x3f	; 63
    3dac:	f8 94       	cli
    3dae:	de bf       	out	0x3e, r29	; 62
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	ed 01       	movw	r28, r26
    3db6:	08 95       	ret

00003db8 <itoa>:
    3db8:	fb 01       	movw	r30, r22
    3dba:	9f 01       	movw	r18, r30
    3dbc:	e8 94       	clt
    3dbe:	42 30       	cpi	r20, 0x02	; 2
    3dc0:	c4 f0       	brlt	.+48     	; 0x3df2 <itoa+0x3a>
    3dc2:	45 32       	cpi	r20, 0x25	; 37
    3dc4:	b4 f4       	brge	.+44     	; 0x3df2 <itoa+0x3a>
    3dc6:	4a 30       	cpi	r20, 0x0A	; 10
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <itoa+0x1c>
    3dca:	97 fb       	bst	r25, 7
    3dcc:	1e f4       	brtc	.+6      	; 0x3dd4 <itoa+0x1c>
    3dce:	90 95       	com	r25
    3dd0:	81 95       	neg	r24
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	64 2f       	mov	r22, r20
    3dd6:	77 27       	eor	r23, r23
    3dd8:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__udivmodhi4>
    3ddc:	80 5d       	subi	r24, 0xD0	; 208
    3dde:	8a 33       	cpi	r24, 0x3A	; 58
    3de0:	0c f0       	brlt	.+2      	; 0x3de4 <itoa+0x2c>
    3de2:	89 5d       	subi	r24, 0xD9	; 217
    3de4:	81 93       	st	Z+, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	a1 f7       	brne	.-24     	; 0x3dd4 <itoa+0x1c>
    3dec:	16 f4       	brtc	.+4      	; 0x3df2 <itoa+0x3a>
    3dee:	5d e2       	ldi	r21, 0x2D	; 45
    3df0:	51 93       	st	Z+, r21
    3df2:	10 82       	st	Z, r1
    3df4:	c9 01       	movw	r24, r18
    3df6:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <strrev>

00003dfa <strrev>:
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	67 2f       	mov	r22, r23
    3e00:	71 91       	ld	r23, Z+
    3e02:	77 23       	and	r23, r23
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <strrev+0x4>
    3e06:	32 97       	sbiw	r30, 0x02	; 2
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <strrev+0x18>
    3e0a:	7c 91       	ld	r23, X
    3e0c:	6d 93       	st	X+, r22
    3e0e:	70 83       	st	Z, r23
    3e10:	62 91       	ld	r22, -Z
    3e12:	ae 17       	cp	r26, r30
    3e14:	bf 07       	cpc	r27, r31
    3e16:	c8 f3       	brcs	.-14     	; 0x3e0a <strrev+0x10>
    3e18:	08 95       	ret

00003e1a <__udivmodhi4>:
    3e1a:	aa 1b       	sub	r26, r26
    3e1c:	bb 1b       	sub	r27, r27
    3e1e:	51 e1       	ldi	r21, 0x11	; 17
    3e20:	07 c0       	rjmp	.+14     	; 0x3e30 <__udivmodhi4_ep>

00003e22 <__udivmodhi4_loop>:
    3e22:	aa 1f       	adc	r26, r26
    3e24:	bb 1f       	adc	r27, r27
    3e26:	a6 17       	cp	r26, r22
    3e28:	b7 07       	cpc	r27, r23
    3e2a:	10 f0       	brcs	.+4      	; 0x3e30 <__udivmodhi4_ep>
    3e2c:	a6 1b       	sub	r26, r22
    3e2e:	b7 0b       	sbc	r27, r23

00003e30 <__udivmodhi4_ep>:
    3e30:	88 1f       	adc	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	5a 95       	dec	r21
    3e36:	a9 f7       	brne	.-22     	; 0x3e22 <__udivmodhi4_loop>
    3e38:	80 95       	com	r24
    3e3a:	90 95       	com	r25
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	08 95       	ret

00003e42 <_exit>:
    3e42:	f8 94       	cli

00003e44 <__stop_program>:
    3e44:	ff cf       	rjmp	.-2      	; 0x3e44 <__stop_program>
